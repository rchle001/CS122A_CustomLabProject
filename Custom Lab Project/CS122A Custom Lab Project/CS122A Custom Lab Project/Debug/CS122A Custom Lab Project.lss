
CS122A Custom Lab Project.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000004  00800100  00000b78  00000c0c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00000b78  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          0000001a  00800104  00800104  00000c10  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00000c10  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00000c40  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000088  00000000  00000000  00000c80  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00000d33  00000000  00000000  00000d08  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 000008e6  00000000  00000000  00001a3b  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   000008b1  00000000  00000000  00002321  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000220  00000000  00000000  00002bd4  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    0000066a  00000000  00000000  00002df4  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00000472  00000000  00000000  0000345e  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000078  00000000  00000000  000038d0  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	45 c0       	rjmp	.+138    	; 0x8c <__ctors_end>
   2:	00 00       	nop
   4:	60 c0       	rjmp	.+192    	; 0xc6 <__bad_interrupt>
   6:	00 00       	nop
   8:	5e c0       	rjmp	.+188    	; 0xc6 <__bad_interrupt>
   a:	00 00       	nop
   c:	5c c0       	rjmp	.+184    	; 0xc6 <__bad_interrupt>
   e:	00 00       	nop
  10:	5a c0       	rjmp	.+180    	; 0xc6 <__bad_interrupt>
  12:	00 00       	nop
  14:	58 c0       	rjmp	.+176    	; 0xc6 <__bad_interrupt>
  16:	00 00       	nop
  18:	56 c0       	rjmp	.+172    	; 0xc6 <__bad_interrupt>
  1a:	00 00       	nop
  1c:	54 c0       	rjmp	.+168    	; 0xc6 <__bad_interrupt>
  1e:	00 00       	nop
  20:	52 c0       	rjmp	.+164    	; 0xc6 <__bad_interrupt>
  22:	00 00       	nop
  24:	50 c0       	rjmp	.+160    	; 0xc6 <__bad_interrupt>
  26:	00 00       	nop
  28:	4e c0       	rjmp	.+156    	; 0xc6 <__bad_interrupt>
  2a:	00 00       	nop
  2c:	4c c0       	rjmp	.+152    	; 0xc6 <__bad_interrupt>
  2e:	00 00       	nop
  30:	4a c0       	rjmp	.+148    	; 0xc6 <__bad_interrupt>
  32:	00 00       	nop
  34:	a9 c2       	rjmp	.+1362   	; 0x588 <__vector_13>
  36:	00 00       	nop
  38:	46 c0       	rjmp	.+140    	; 0xc6 <__bad_interrupt>
  3a:	00 00       	nop
  3c:	44 c0       	rjmp	.+136    	; 0xc6 <__bad_interrupt>
  3e:	00 00       	nop
  40:	42 c0       	rjmp	.+132    	; 0xc6 <__bad_interrupt>
  42:	00 00       	nop
  44:	40 c0       	rjmp	.+128    	; 0xc6 <__bad_interrupt>
  46:	00 00       	nop
  48:	3e c0       	rjmp	.+124    	; 0xc6 <__bad_interrupt>
  4a:	00 00       	nop
  4c:	3c c0       	rjmp	.+120    	; 0xc6 <__bad_interrupt>
  4e:	00 00       	nop
  50:	3a c0       	rjmp	.+116    	; 0xc6 <__bad_interrupt>
  52:	00 00       	nop
  54:	38 c0       	rjmp	.+112    	; 0xc6 <__bad_interrupt>
  56:	00 00       	nop
  58:	36 c0       	rjmp	.+108    	; 0xc6 <__bad_interrupt>
  5a:	00 00       	nop
  5c:	34 c0       	rjmp	.+104    	; 0xc6 <__bad_interrupt>
  5e:	00 00       	nop
  60:	32 c0       	rjmp	.+100    	; 0xc6 <__bad_interrupt>
  62:	00 00       	nop
  64:	30 c0       	rjmp	.+96     	; 0xc6 <__bad_interrupt>
  66:	00 00       	nop
  68:	2e c0       	rjmp	.+92     	; 0xc6 <__bad_interrupt>
  6a:	00 00       	nop
  6c:	2c c0       	rjmp	.+88     	; 0xc6 <__bad_interrupt>
  6e:	00 00       	nop
  70:	2a c0       	rjmp	.+84     	; 0xc6 <__bad_interrupt>
  72:	00 00       	nop
  74:	28 c0       	rjmp	.+80     	; 0xc6 <__bad_interrupt>
  76:	00 00       	nop
  78:	26 c0       	rjmp	.+76     	; 0xc6 <__bad_interrupt>
  7a:	00 00       	nop
  7c:	24 c0       	rjmp	.+72     	; 0xc6 <__bad_interrupt>
  7e:	00 00       	nop
  80:	22 c0       	rjmp	.+68     	; 0xc6 <__bad_interrupt>
  82:	00 00       	nop
  84:	20 c0       	rjmp	.+64     	; 0xc6 <__bad_interrupt>
  86:	00 00       	nop
  88:	1e c0       	rjmp	.+60     	; 0xc6 <__bad_interrupt>
	...

0000008c <__ctors_end>:
  8c:	11 24       	eor	r1, r1
  8e:	1f be       	out	0x3f, r1	; 63
  90:	cf ef       	ldi	r28, 0xFF	; 255
  92:	d0 e4       	ldi	r29, 0x40	; 64
  94:	de bf       	out	0x3e, r29	; 62
  96:	cd bf       	out	0x3d, r28	; 61

00000098 <__do_copy_data>:
  98:	11 e0       	ldi	r17, 0x01	; 1
  9a:	a0 e0       	ldi	r26, 0x00	; 0
  9c:	b1 e0       	ldi	r27, 0x01	; 1
  9e:	e8 e7       	ldi	r30, 0x78	; 120
  a0:	fb e0       	ldi	r31, 0x0B	; 11
  a2:	00 e0       	ldi	r16, 0x00	; 0
  a4:	0b bf       	out	0x3b, r16	; 59
  a6:	02 c0       	rjmp	.+4      	; 0xac <__do_copy_data+0x14>
  a8:	07 90       	elpm	r0, Z+
  aa:	0d 92       	st	X+, r0
  ac:	a4 30       	cpi	r26, 0x04	; 4
  ae:	b1 07       	cpc	r27, r17
  b0:	d9 f7       	brne	.-10     	; 0xa8 <__do_copy_data+0x10>

000000b2 <__do_clear_bss>:
  b2:	21 e0       	ldi	r18, 0x01	; 1
  b4:	a4 e0       	ldi	r26, 0x04	; 4
  b6:	b1 e0       	ldi	r27, 0x01	; 1
  b8:	01 c0       	rjmp	.+2      	; 0xbc <.do_clear_bss_start>

000000ba <.do_clear_bss_loop>:
  ba:	1d 92       	st	X+, r1

000000bc <.do_clear_bss_start>:
  bc:	ae 31       	cpi	r26, 0x1E	; 30
  be:	b2 07       	cpc	r27, r18
  c0:	e1 f7       	brne	.-8      	; 0xba <.do_clear_bss_loop>
  c2:	80 d4       	rcall	.+2304   	; 0x9c4 <main>
  c4:	57 c5       	rjmp	.+2734   	; 0xb74 <_exit>

000000c6 <__bad_interrupt>:
  c6:	9c cf       	rjmp	.-200    	; 0x0 <__vectors>

000000c8 <ADC_ON>:
unsigned char magY = 0;

char up = 0, down = 0, speed = 0;

void ADC_ON()
{
  c8:	cf 93       	push	r28
  ca:	df 93       	push	r29
  cc:	cd b7       	in	r28, 0x3d	; 61
  ce:	de b7       	in	r29, 0x3e	; 62
	ADMUX = muxselect;			// changes the adc input, adc select 
  d0:	8c e7       	ldi	r24, 0x7C	; 124
  d2:	90 e0       	ldi	r25, 0x00	; 0
  d4:	20 91 05 01 	lds	r18, 0x0105	; 0x800105 <muxselect>
  d8:	fc 01       	movw	r30, r24
  da:	20 83       	st	Z, r18
	ADCSRA = (1 << ADEN) | (1 << ADSC) | (1 << 6) | (3); // turns on converter, starts conversion
  dc:	8a e7       	ldi	r24, 0x7A	; 122
  de:	90 e0       	ldi	r25, 0x00	; 0
  e0:	23 ec       	ldi	r18, 0xC3	; 195
  e2:	fc 01       	movw	r30, r24
  e4:	20 83       	st	Z, r18
}
  e6:	00 00       	nop
  e8:	df 91       	pop	r29
  ea:	cf 91       	pop	r28
  ec:	08 95       	ret

000000ee <ADC_SELECT>:

void ADC_SELECT(unsigned char select) // selects the adc input pin
{
  ee:	cf 93       	push	r28
  f0:	df 93       	push	r29
  f2:	1f 92       	push	r1
  f4:	cd b7       	in	r28, 0x3d	; 61
  f6:	de b7       	in	r29, 0x3e	; 62
  f8:	89 83       	std	Y+1, r24	; 0x01
	if(select < 8) { muxselect = select; //ADC_OFF();
  fa:	89 81       	ldd	r24, Y+1	; 0x01
  fc:	88 30       	cpi	r24, 0x08	; 8
  fe:	48 f4       	brcc	.+18     	; 0x112 <ADC_SELECT+0x24>
 100:	89 81       	ldd	r24, Y+1	; 0x01
 102:	80 93 05 01 	sts	0x0105, r24	; 0x800105 <muxselect>
		 ADMUX = muxselect; }//ADC_ON();}
 106:	8c e7       	ldi	r24, 0x7C	; 124
 108:	90 e0       	ldi	r25, 0x00	; 0
 10a:	20 91 05 01 	lds	r18, 0x0105	; 0x800105 <muxselect>
 10e:	fc 01       	movw	r30, r24
 110:	20 83       	st	Z, r18
}
 112:	00 00       	nop
 114:	0f 90       	pop	r0
 116:	df 91       	pop	r29
 118:	cf 91       	pop	r28
 11a:	08 95       	ret

0000011c <ADC_OFF>:

void ADC_OFF()
{
 11c:	cf 93       	push	r28
 11e:	df 93       	push	r29
 120:	cd b7       	in	r28, 0x3d	; 61
 122:	de b7       	in	r29, 0x3e	; 62
	while(!(ADCSRA & (1 << 4))); // http://extremeelectronics.co.in/avr-tutorials/using-adc-of-avr-microcontroller/
 124:	00 00       	nop
 126:	8a e7       	ldi	r24, 0x7A	; 122
 128:	90 e0       	ldi	r25, 0x00	; 0
 12a:	fc 01       	movw	r30, r24
 12c:	80 81       	ld	r24, Z
 12e:	88 2f       	mov	r24, r24
 130:	90 e0       	ldi	r25, 0x00	; 0
 132:	80 71       	andi	r24, 0x10	; 16
 134:	99 27       	eor	r25, r25
 136:	89 2b       	or	r24, r25
 138:	b1 f3       	breq	.-20     	; 0x126 <ADC_OFF+0xa>
	ADCSRA = ~(1 << ADEN) | ~(1 << ADSC);
 13a:	8a e7       	ldi	r24, 0x7A	; 122
 13c:	90 e0       	ldi	r25, 0x00	; 0
 13e:	2f ef       	ldi	r18, 0xFF	; 255
 140:	fc 01       	movw	r30, r24
 142:	20 83       	st	Z, r18
}
 144:	00 00       	nop
 146:	df 91       	pop	r29
 148:	cf 91       	pop	r28
 14a:	08 95       	ret

0000014c <ADC_SEND>:

unsigned char ADC_SEND()
{
 14c:	cf 93       	push	r28
 14e:	df 93       	push	r29
 150:	cd b7       	in	r28, 0x3d	; 61
 152:	de b7       	in	r29, 0x3e	; 62
	ADCSRA |= (1 << ADSC);
 154:	8a e7       	ldi	r24, 0x7A	; 122
 156:	90 e0       	ldi	r25, 0x00	; 0
 158:	2a e7       	ldi	r18, 0x7A	; 122
 15a:	30 e0       	ldi	r19, 0x00	; 0
 15c:	f9 01       	movw	r30, r18
 15e:	20 81       	ld	r18, Z
 160:	20 64       	ori	r18, 0x40	; 64
 162:	fc 01       	movw	r30, r24
 164:	20 83       	st	Z, r18
	while(!(ADCSRA & (1 << ADIF)));
 166:	00 00       	nop
 168:	8a e7       	ldi	r24, 0x7A	; 122
 16a:	90 e0       	ldi	r25, 0x00	; 0
 16c:	fc 01       	movw	r30, r24
 16e:	80 81       	ld	r24, Z
 170:	88 2f       	mov	r24, r24
 172:	90 e0       	ldi	r25, 0x00	; 0
 174:	80 71       	andi	r24, 0x10	; 16
 176:	99 27       	eor	r25, r25
 178:	89 2b       	or	r24, r25
 17a:	b1 f3       	breq	.-20     	; 0x168 <ADC_SEND+0x1c>
	ADCSRA &= ~(1 << ADSC);
 17c:	8a e7       	ldi	r24, 0x7A	; 122
 17e:	90 e0       	ldi	r25, 0x00	; 0
 180:	2a e7       	ldi	r18, 0x7A	; 122
 182:	30 e0       	ldi	r19, 0x00	; 0
 184:	f9 01       	movw	r30, r18
 186:	20 81       	ld	r18, Z
 188:	2f 7b       	andi	r18, 0xBF	; 191
 18a:	fc 01       	movw	r30, r24
 18c:	20 83       	st	Z, r18
	return (char)(ADC >> 2);
 18e:	88 e7       	ldi	r24, 0x78	; 120
 190:	90 e0       	ldi	r25, 0x00	; 0
 192:	fc 01       	movw	r30, r24
 194:	80 81       	ld	r24, Z
 196:	91 81       	ldd	r25, Z+1	; 0x01
 198:	96 95       	lsr	r25
 19a:	87 95       	ror	r24
 19c:	96 95       	lsr	r25
 19e:	87 95       	ror	r24
}
 1a0:	df 91       	pop	r29
 1a2:	cf 91       	pop	r28
 1a4:	08 95       	ret

000001a6 <PRESSENSE_task>:
#define PRESSENS_H

enum PRESSENS{presStart, presSample, presOff} pressense_state;

int PRESSENSE_task(int state)
{
 1a6:	cf 93       	push	r28
 1a8:	df 93       	push	r29
 1aa:	00 d0       	rcall	.+0      	; 0x1ac <PRESSENSE_task+0x6>
 1ac:	cd b7       	in	r28, 0x3d	; 61
 1ae:	de b7       	in	r29, 0x3e	; 62
 1b0:	9a 83       	std	Y+2, r25	; 0x02
 1b2:	89 83       	std	Y+1, r24	; 0x01
	switch (state)
 1b4:	89 81       	ldd	r24, Y+1	; 0x01
 1b6:	9a 81       	ldd	r25, Y+2	; 0x02
 1b8:	81 30       	cpi	r24, 0x01	; 1
 1ba:	91 05       	cpc	r25, r1
 1bc:	81 f0       	breq	.+32     	; 0x1de <PRESSENSE_task+0x38>
 1be:	82 30       	cpi	r24, 0x02	; 2
 1c0:	91 05       	cpc	r25, r1
 1c2:	41 f0       	breq	.+16     	; 0x1d4 <PRESSENSE_task+0x2e>
 1c4:	89 2b       	or	r24, r25
 1c6:	81 f4       	brne	.+32     	; 0x1e8 <PRESSENSE_task+0x42>
	{
		case presStart:
			state = presSample;
 1c8:	81 e0       	ldi	r24, 0x01	; 1
 1ca:	90 e0       	ldi	r25, 0x00	; 0
 1cc:	9a 83       	std	Y+2, r25	; 0x02
 1ce:	89 83       	std	Y+1, r24	; 0x01
			ADC_ON();
 1d0:	7b df       	rcall	.-266    	; 0xc8 <ADC_ON>
			break;
 1d2:	0d c0       	rjmp	.+26     	; 0x1ee <PRESSENSE_task+0x48>
		
		case presOff:
			state = presOff;
 1d4:	82 e0       	ldi	r24, 0x02	; 2
 1d6:	90 e0       	ldi	r25, 0x00	; 0
 1d8:	9a 83       	std	Y+2, r25	; 0x02
 1da:	89 83       	std	Y+1, r24	; 0x01
			break;
 1dc:	08 c0       	rjmp	.+16     	; 0x1ee <PRESSENSE_task+0x48>
		
		case presSample:
			state = presSample;
 1de:	81 e0       	ldi	r24, 0x01	; 1
 1e0:	90 e0       	ldi	r25, 0x00	; 0
 1e2:	9a 83       	std	Y+2, r25	; 0x02
 1e4:	89 83       	std	Y+1, r24	; 0x01
			break;
 1e6:	03 c0       	rjmp	.+6      	; 0x1ee <PRESSENSE_task+0x48>
			
		default:
			state = presStart;
 1e8:	1a 82       	std	Y+2, r1	; 0x02
 1ea:	19 82       	std	Y+1, r1	; 0x01
			break;
 1ec:	00 00       	nop
	}
	switch (state)
 1ee:	89 81       	ldd	r24, Y+1	; 0x01
 1f0:	9a 81       	ldd	r25, Y+2	; 0x02
 1f2:	81 30       	cpi	r24, 0x01	; 1
 1f4:	91 05       	cpc	r25, r1
 1f6:	41 f0       	breq	.+16     	; 0x208 <PRESSENSE_task+0x62>
 1f8:	82 30       	cpi	r24, 0x02	; 2
 1fa:	91 05       	cpc	r25, r1
 1fc:	19 f0       	breq	.+6      	; 0x204 <PRESSENSE_task+0x5e>
 1fe:	89 2b       	or	r24, r25
 200:	79 f0       	breq	.+30     	; 0x220 <PRESSENSE_task+0x7a>
	{
		case presStart:
			break;
		
		case presOff:
			ADC_OFF();
 202:	0f c0       	rjmp	.+30     	; 0x222 <PRESSENSE_task+0x7c>
 204:	8b df       	rcall	.-234    	; 0x11c <ADC_OFF>
			break;
		
		case presSample:
			ADC_SELECT(0);
 206:	0d c0       	rjmp	.+26     	; 0x222 <PRESSENSE_task+0x7c>
 208:	80 e0       	ldi	r24, 0x00	; 0
			presSens = 15 - (ADC_SEND() >> 4);
 20a:	71 df       	rcall	.-286    	; 0xee <ADC_SELECT>
 20c:	9f df       	rcall	.-194    	; 0x14c <ADC_SEND>
 20e:	82 95       	swap	r24
 210:	8f 70       	andi	r24, 0x0F	; 15
 212:	9f e0       	ldi	r25, 0x0F	; 15
 214:	29 2f       	mov	r18, r25
 216:	28 1b       	sub	r18, r24
 218:	82 2f       	mov	r24, r18
 21a:	80 93 04 01 	sts	0x0104, r24	; 0x800104 <__data_end>
			break;
 21e:	01 c0       	rjmp	.+2      	; 0x222 <PRESSENSE_task+0x7c>
			break;
	}
	switch (state)
	{
		case presStart:
			break;
 220:	00 00       	nop
			break;
		
		default:
			break;
	}
	return state;
 222:	89 81       	ldd	r24, Y+1	; 0x01
 224:	9a 81       	ldd	r25, Y+2	; 0x02
}
 226:	0f 90       	pop	r0
 228:	0f 90       	pop	r0
 22a:	df 91       	pop	r29
 22c:	cf 91       	pop	r28
 22e:	08 95       	ret

00000230 <magSense_task>:
#define MAGSENS_H

enum magSense {magStart, magRead, magOff} magSense_state;

int magSense_task(int state)
{
 230:	cf 93       	push	r28
 232:	df 93       	push	r29
 234:	00 d0       	rcall	.+0      	; 0x236 <magSense_task+0x6>
 236:	cd b7       	in	r28, 0x3d	; 61
 238:	de b7       	in	r29, 0x3e	; 62
 23a:	9a 83       	std	Y+2, r25	; 0x02
 23c:	89 83       	std	Y+1, r24	; 0x01
	switch(state)
 23e:	89 81       	ldd	r24, Y+1	; 0x01
 240:	9a 81       	ldd	r25, Y+2	; 0x02
 242:	81 30       	cpi	r24, 0x01	; 1
 244:	91 05       	cpc	r25, r1
 246:	61 f0       	breq	.+24     	; 0x260 <magSense_task+0x30>
 248:	82 30       	cpi	r24, 0x02	; 2
 24a:	91 05       	cpc	r25, r1
 24c:	09 f4       	brne	.+2      	; 0x250 <magSense_task+0x20>
 24e:	94 c0       	rjmp	.+296    	; 0x378 <magSense_task+0x148>
 250:	89 2b       	or	r24, r25
 252:	09 f0       	breq	.+2      	; 0x256 <magSense_task+0x26>
 254:	96 c0       	rjmp	.+300    	; 0x382 <magSense_task+0x152>
	{
		case magStart:
			state = magRead;
 256:	81 e0       	ldi	r24, 0x01	; 1
 258:	90 e0       	ldi	r25, 0x00	; 0
 25a:	9a 83       	std	Y+2, r25	; 0x02
 25c:	89 83       	std	Y+1, r24	; 0x01
			break;
 25e:	94 c0       	rjmp	.+296    	; 0x388 <magSense_task+0x158>
		
		case magRead:
			state = magRead;
 260:	81 e0       	ldi	r24, 0x01	; 1
 262:	90 e0       	ldi	r25, 0x00	; 0
 264:	9a 83       	std	Y+2, r25	; 0x02
 266:	89 83       	std	Y+1, r24	; 0x01
			ADC_SELECT(1);
 268:	81 e0       	ldi	r24, 0x01	; 1
 26a:	41 df       	rcall	.-382    	; 0xee <ADC_SELECT>
			magTL = (ADC_SEND() >> 4);
 26c:	6f df       	rcall	.-290    	; 0x14c <ADC_SEND>
 26e:	82 95       	swap	r24
 270:	8f 70       	andi	r24, 0x0F	; 15
 272:	80 93 08 01 	sts	0x0108, r24	; 0x800108 <magTL>
			ADC_SELECT(2);
 276:	82 e0       	ldi	r24, 0x02	; 2
 278:	3a df       	rcall	.-396    	; 0xee <ADC_SELECT>
			magBL = (ADC_SEND() >> 4);
 27a:	68 df       	rcall	.-304    	; 0x14c <ADC_SEND>
 27c:	82 95       	swap	r24
 27e:	8f 70       	andi	r24, 0x0F	; 15
 280:	80 93 09 01 	sts	0x0109, r24	; 0x800109 <magBL>
 284:	80 91 0c 01 	lds	r24, 0x010C	; 0x80010c <up>
			//magTR = ADC_SEND();
			_delay_ms(1);
			ADC_SELECT(3);
			_delay_ms(1);*/
			//magBR = ADC_SEND();
			if(up && !down)
 288:	88 23       	and	r24, r24
 28a:	d9 f0       	breq	.+54     	; 0x2c2 <magSense_task+0x92>
 28c:	80 91 0d 01 	lds	r24, 0x010D	; 0x80010d <down>
 290:	88 23       	and	r24, r24
 292:	b9 f4       	brne	.+46     	; 0x2c2 <magSense_task+0x92>
 294:	80 91 08 01 	lds	r24, 0x0108	; 0x800108 <magTL>
			{
				if(magTL < 7 && magBL < 7) speed = 1;
 298:	87 30       	cpi	r24, 0x07	; 7
 29a:	40 f4       	brcc	.+16     	; 0x2ac <magSense_task+0x7c>
 29c:	80 91 09 01 	lds	r24, 0x0109	; 0x800109 <magBL>
 2a0:	87 30       	cpi	r24, 0x07	; 7
 2a2:	20 f4       	brcc	.+8      	; 0x2ac <magSense_task+0x7c>
 2a4:	81 e0       	ldi	r24, 0x01	; 1
 2a6:	80 93 0e 01 	sts	0x010E, r24	; 0x80010e <speed>
 2aa:	55 c0       	rjmp	.+170    	; 0x356 <magSense_task+0x126>
 2ac:	80 91 08 01 	lds	r24, 0x0108	; 0x800108 <magTL>
				else if(magTL < 7) speed = 2;
 2b0:	87 30       	cpi	r24, 0x07	; 7
 2b2:	20 f4       	brcc	.+8      	; 0x2bc <magSense_task+0x8c>
 2b4:	82 e0       	ldi	r24, 0x02	; 2
 2b6:	80 93 0e 01 	sts	0x010E, r24	; 0x80010e <speed>
 2ba:	4d c0       	rjmp	.+154    	; 0x356 <magSense_task+0x126>
			ADC_SELECT(3);
			_delay_ms(1);*/
			//magBR = ADC_SEND();
			if(up && !down)
			{
				if(magTL < 7 && magBL < 7) speed = 1;
 2bc:	10 92 0e 01 	sts	0x010E, r1	; 0x80010e <speed>
				else if(magTL < 7) speed = 2;
				else speed = 0;
 2c0:	4a c0       	rjmp	.+148    	; 0x356 <magSense_task+0x126>
			ADC_SELECT(3);
			_delay_ms(1);*/
			//magBR = ADC_SEND();
			if(up && !down)
			{
				if(magTL < 7 && magBL < 7) speed = 1;
 2c2:	80 91 0d 01 	lds	r24, 0x010D	; 0x80010d <down>
				else if(magTL < 7) speed = 2;
				else speed = 0;
			}
			else if(down && !up)
 2c6:	88 23       	and	r24, r24
 2c8:	d9 f0       	breq	.+54     	; 0x300 <magSense_task+0xd0>
 2ca:	80 91 0c 01 	lds	r24, 0x010C	; 0x80010c <up>
 2ce:	88 23       	and	r24, r24
 2d0:	b9 f4       	brne	.+46     	; 0x300 <magSense_task+0xd0>
 2d2:	80 91 08 01 	lds	r24, 0x0108	; 0x800108 <magTL>
			{
				if(magTL < 7 && magBL < 7) speed = 1;
 2d6:	87 30       	cpi	r24, 0x07	; 7
 2d8:	40 f4       	brcc	.+16     	; 0x2ea <magSense_task+0xba>
 2da:	80 91 09 01 	lds	r24, 0x0109	; 0x800109 <magBL>
 2de:	87 30       	cpi	r24, 0x07	; 7
 2e0:	20 f4       	brcc	.+8      	; 0x2ea <magSense_task+0xba>
 2e2:	81 e0       	ldi	r24, 0x01	; 1
 2e4:	80 93 0e 01 	sts	0x010E, r24	; 0x80010e <speed>
 2e8:	36 c0       	rjmp	.+108    	; 0x356 <magSense_task+0x126>
 2ea:	80 91 09 01 	lds	r24, 0x0109	; 0x800109 <magBL>
				else if(magBL < 7) speed = 2;
 2ee:	87 30       	cpi	r24, 0x07	; 7
 2f0:	20 f4       	brcc	.+8      	; 0x2fa <magSense_task+0xca>
 2f2:	82 e0       	ldi	r24, 0x02	; 2
 2f4:	80 93 0e 01 	sts	0x010E, r24	; 0x80010e <speed>
 2f8:	2e c0       	rjmp	.+92     	; 0x356 <magSense_task+0x126>
				else if(magTL < 7) speed = 2;
				else speed = 0;
			}
			else if(down && !up)
			{
				if(magTL < 7 && magBL < 7) speed = 1;
 2fa:	10 92 0e 01 	sts	0x010E, r1	; 0x80010e <speed>
				else if(magBL < 7) speed = 2;
				else speed = 0;
 2fe:	2b c0       	rjmp	.+86     	; 0x356 <magSense_task+0x126>
				else if(magTL < 7) speed = 2;
				else speed = 0;
			}
			else if(down && !up)
			{
				if(magTL < 7 && magBL < 7) speed = 1;
 300:	80 91 0c 01 	lds	r24, 0x010C	; 0x80010c <up>
				else if(magBL < 7) speed = 2;
				else speed = 0;
			}
			else if(!up && !down) {speed = 0;}
 304:	88 23       	and	r24, r24
 306:	39 f4       	brne	.+14     	; 0x316 <magSense_task+0xe6>
 308:	80 91 0d 01 	lds	r24, 0x010D	; 0x80010d <down>
 30c:	88 23       	and	r24, r24
 30e:	19 f4       	brne	.+6      	; 0x316 <magSense_task+0xe6>
 310:	10 92 0e 01 	sts	0x010E, r1	; 0x80010e <speed>
 314:	20 c0       	rjmp	.+64     	; 0x356 <magSense_task+0x126>
 316:	80 91 08 01 	lds	r24, 0x0108	; 0x800108 <magTL>
			else
			{
				if(magTL < 7 && magBL > 7)
 31a:	87 30       	cpi	r24, 0x07	; 7
 31c:	58 f4       	brcc	.+22     	; 0x334 <magSense_task+0x104>
 31e:	80 91 09 01 	lds	r24, 0x0109	; 0x800109 <magBL>
 322:	88 30       	cpi	r24, 0x08	; 8
 324:	38 f0       	brcs	.+14     	; 0x334 <magSense_task+0x104>
 326:	81 e0       	ldi	r24, 0x01	; 1
				{
					speed = 1; up = 1;
 328:	80 93 0e 01 	sts	0x010E, r24	; 0x80010e <speed>
 32c:	81 e0       	ldi	r24, 0x01	; 1
 32e:	80 93 0c 01 	sts	0x010C, r24	; 0x80010c <up>
 332:	11 c0       	rjmp	.+34     	; 0x356 <magSense_task+0x126>
 334:	80 91 08 01 	lds	r24, 0x0108	; 0x800108 <magTL>
				}
				else if(magTL > 7 && magBL < 7)
 338:	88 30       	cpi	r24, 0x08	; 8
 33a:	58 f0       	brcs	.+22     	; 0x352 <magSense_task+0x122>
 33c:	80 91 09 01 	lds	r24, 0x0109	; 0x800109 <magBL>
 340:	87 30       	cpi	r24, 0x07	; 7
 342:	38 f4       	brcc	.+14     	; 0x352 <magSense_task+0x122>
 344:	81 e0       	ldi	r24, 0x01	; 1
				{
					speed = 1; down = 1;
 346:	80 93 0e 01 	sts	0x010E, r24	; 0x80010e <speed>
 34a:	81 e0       	ldi	r24, 0x01	; 1
 34c:	80 93 0d 01 	sts	0x010D, r24	; 0x80010d <down>
 350:	02 c0       	rjmp	.+4      	; 0x356 <magSense_task+0x126>
 352:	10 92 0e 01 	sts	0x010E, r1	; 0x80010e <speed>
				}
				else
				{
					speed = 0;
 356:	90 91 09 01 	lds	r25, 0x0109	; 0x800109 <magBL>
				}
			}
			up = magBL < 7 ? 1 : 0;
 35a:	81 e0       	ldi	r24, 0x01	; 1
 35c:	97 30       	cpi	r25, 0x07	; 7
 35e:	08 f0       	brcs	.+2      	; 0x362 <magSense_task+0x132>
 360:	80 e0       	ldi	r24, 0x00	; 0
 362:	80 93 0c 01 	sts	0x010C, r24	; 0x80010c <up>
 366:	90 91 08 01 	lds	r25, 0x0108	; 0x800108 <magTL>
			down = magTL < 7 ? 1 : 0;
 36a:	81 e0       	ldi	r24, 0x01	; 1
 36c:	97 30       	cpi	r25, 0x07	; 7
 36e:	08 f0       	brcs	.+2      	; 0x372 <magSense_task+0x142>
 370:	80 e0       	ldi	r24, 0x00	; 0
 372:	80 93 0d 01 	sts	0x010D, r24	; 0x80010d <down>
 376:	08 c0       	rjmp	.+16     	; 0x388 <magSense_task+0x158>
			break;
 378:	82 e0       	ldi	r24, 0x02	; 2
		
		case magOff:
			state = magOff;
 37a:	90 e0       	ldi	r25, 0x00	; 0
 37c:	9a 83       	std	Y+2, r25	; 0x02
 37e:	89 83       	std	Y+1, r24	; 0x01
 380:	03 c0       	rjmp	.+6      	; 0x388 <magSense_task+0x158>
			break;
 382:	1a 82       	std	Y+2, r1	; 0x02
		
		default:
			state = magStart;
 384:	19 82       	std	Y+1, r1	; 0x01
 386:	00 00       	nop
			break;
 388:	89 81       	ldd	r24, Y+1	; 0x01
	}
	switch(state)
 38a:	9a 81       	ldd	r25, Y+2	; 0x02
 38c:	81 30       	cpi	r24, 0x01	; 1
 38e:	91 05       	cpc	r25, r1
 390:	31 f0       	breq	.+12     	; 0x39e <magSense_task+0x16e>
 392:	82 30       	cpi	r24, 0x02	; 2
 394:	91 05       	cpc	r25, r1
 396:	a1 f0       	breq	.+40     	; 0x3c0 <magSense_task+0x190>
 398:	89 2b       	or	r24, r25
 39a:	d1 f0       	breq	.+52     	; 0x3d0 <magSense_task+0x1a0>
 39c:	16 c0       	rjmp	.+44     	; 0x3ca <magSense_task+0x19a>
 39e:	80 91 0b 01 	lds	r24, 0x010B	; 0x80010b <magY>
	{
		case magStart:
			break;
		
		case magRead:
			magCalc = magY | (magX << 8);
 3a2:	28 2f       	mov	r18, r24
 3a4:	30 e0       	ldi	r19, 0x00	; 0
 3a6:	80 91 0a 01 	lds	r24, 0x010A	; 0x80010a <magX>
 3aa:	88 2f       	mov	r24, r24
 3ac:	90 e0       	ldi	r25, 0x00	; 0
 3ae:	98 2f       	mov	r25, r24
 3b0:	88 27       	eor	r24, r24
 3b2:	82 2b       	or	r24, r18
 3b4:	93 2b       	or	r25, r19
 3b6:	90 93 07 01 	sts	0x0107, r25	; 0x800107 <magCalc+0x1>
 3ba:	80 93 06 01 	sts	0x0106, r24	; 0x800106 <magCalc>
 3be:	09 c0       	rjmp	.+18     	; 0x3d2 <magSense_task+0x1a2>
			break;
 3c0:	82 e0       	ldi	r24, 0x02	; 2
		
		case magOff:
			state = magOff;
 3c2:	90 e0       	ldi	r25, 0x00	; 0
 3c4:	9a 83       	std	Y+2, r25	; 0x02
 3c6:	89 83       	std	Y+1, r24	; 0x01
 3c8:	04 c0       	rjmp	.+8      	; 0x3d2 <magSense_task+0x1a2>
			break;
 3ca:	1a 82       	std	Y+2, r1	; 0x02
		
		default:
			state = magStart;
 3cc:	19 82       	std	Y+1, r1	; 0x01
 3ce:	01 c0       	rjmp	.+2      	; 0x3d2 <magSense_task+0x1a2>
			break;
 3d0:	00 00       	nop
			break;
	}
	switch(state)
	{
		case magStart:
			break;
 3d2:	89 81       	ldd	r24, Y+1	; 0x01
		
		default:
			state = magStart;
			break;
	}
	return state;
 3d4:	9a 81       	ldd	r25, Y+2	; 0x02
 3d6:	0f 90       	pop	r0
}
 3d8:	0f 90       	pop	r0
 3da:	df 91       	pop	r29
 3dc:	cf 91       	pop	r28
 3de:	08 95       	ret

000003e0 <TimerISR>:
 3e0:	0f 93       	push	r16

task* tasks;

///////////////////////////////////////////////////////////////////////////////
// Heart of the scheduler code
void TimerISR() {
 3e2:	1f 93       	push	r17
 3e4:	cf 93       	push	r28
 3e6:	df 93       	push	r29
 3e8:	cd b7       	in	r28, 0x3d	; 61
 3ea:	de b7       	in	r29, 0x3e	; 62
	static unsigned char i;
	for (i = 0; i < tasksNum; i++) {
 3ec:	10 92 15 01 	sts	0x0115, r1	; 0x800115 <i.1803>
 3f0:	be c0       	rjmp	.+380    	; 0x56e <__LOCK_REGION_LENGTH__+0x16e>
		if ( tasks[i].elapsedTime >= tasks[i].period ) { // Ready
 3f2:	20 91 17 01 	lds	r18, 0x0117	; 0x800117 <tasks>
 3f6:	30 91 18 01 	lds	r19, 0x0118	; 0x800118 <tasks+0x1>
 3fa:	80 91 15 01 	lds	r24, 0x0115	; 0x800115 <i.1803>
 3fe:	48 2f       	mov	r20, r24
 400:	50 e0       	ldi	r21, 0x00	; 0
 402:	6b e0       	ldi	r22, 0x0B	; 11
 404:	64 9f       	mul	r22, r20
 406:	c0 01       	movw	r24, r0
 408:	65 9f       	mul	r22, r21
 40a:	90 0d       	add	r25, r0
 40c:	11 24       	eor	r1, r1
 40e:	82 0f       	add	r24, r18
 410:	93 1f       	adc	r25, r19
 412:	fc 01       	movw	r30, r24
 414:	25 81       	ldd	r18, Z+5	; 0x05
 416:	36 81       	ldd	r19, Z+6	; 0x06
 418:	47 81       	ldd	r20, Z+7	; 0x07
 41a:	50 85       	ldd	r21, Z+8	; 0x08
 41c:	60 91 17 01 	lds	r22, 0x0117	; 0x800117 <tasks>
 420:	70 91 18 01 	lds	r23, 0x0118	; 0x800118 <tasks+0x1>
 424:	80 91 15 01 	lds	r24, 0x0115	; 0x800115 <i.1803>
 428:	e8 2f       	mov	r30, r24
 42a:	f0 e0       	ldi	r31, 0x00	; 0
 42c:	ab e0       	ldi	r26, 0x0B	; 11
 42e:	ae 9f       	mul	r26, r30
 430:	c0 01       	movw	r24, r0
 432:	af 9f       	mul	r26, r31
 434:	90 0d       	add	r25, r0
 436:	11 24       	eor	r1, r1
 438:	86 0f       	add	r24, r22
 43a:	97 1f       	adc	r25, r23
 43c:	fc 01       	movw	r30, r24
 43e:	81 81       	ldd	r24, Z+1	; 0x01
 440:	92 81       	ldd	r25, Z+2	; 0x02
 442:	a3 81       	ldd	r26, Z+3	; 0x03
 444:	b4 81       	ldd	r27, Z+4	; 0x04
 446:	28 17       	cp	r18, r24
 448:	39 07       	cpc	r19, r25
 44a:	4a 07       	cpc	r20, r26
 44c:	5b 07       	cpc	r21, r27
 44e:	08 f4       	brcc	.+2      	; 0x452 <__LOCK_REGION_LENGTH__+0x52>
 450:	52 c0       	rjmp	.+164    	; 0x4f6 <__LOCK_REGION_LENGTH__+0xf6>
			tasks[i].state = tasks[i].TickFct(tasks[i].state);
 452:	20 91 17 01 	lds	r18, 0x0117	; 0x800117 <tasks>
 456:	30 91 18 01 	lds	r19, 0x0118	; 0x800118 <tasks+0x1>
 45a:	80 91 15 01 	lds	r24, 0x0115	; 0x800115 <i.1803>
 45e:	48 2f       	mov	r20, r24
 460:	50 e0       	ldi	r21, 0x00	; 0
 462:	6b e0       	ldi	r22, 0x0B	; 11
 464:	64 9f       	mul	r22, r20
 466:	c0 01       	movw	r24, r0
 468:	65 9f       	mul	r22, r21
 46a:	90 0d       	add	r25, r0
 46c:	11 24       	eor	r1, r1
 46e:	89 01       	movw	r16, r18
 470:	08 0f       	add	r16, r24
 472:	19 1f       	adc	r17, r25
 474:	20 91 17 01 	lds	r18, 0x0117	; 0x800117 <tasks>
 478:	30 91 18 01 	lds	r19, 0x0118	; 0x800118 <tasks+0x1>
 47c:	80 91 15 01 	lds	r24, 0x0115	; 0x800115 <i.1803>
 480:	48 2f       	mov	r20, r24
 482:	50 e0       	ldi	r21, 0x00	; 0
 484:	6b e0       	ldi	r22, 0x0B	; 11
 486:	64 9f       	mul	r22, r20
 488:	c0 01       	movw	r24, r0
 48a:	65 9f       	mul	r22, r21
 48c:	90 0d       	add	r25, r0
 48e:	11 24       	eor	r1, r1
 490:	82 0f       	add	r24, r18
 492:	93 1f       	adc	r25, r19
 494:	fc 01       	movw	r30, r24
 496:	21 85       	ldd	r18, Z+9	; 0x09
 498:	32 85       	ldd	r19, Z+10	; 0x0a
 49a:	40 91 17 01 	lds	r20, 0x0117	; 0x800117 <tasks>
 49e:	50 91 18 01 	lds	r21, 0x0118	; 0x800118 <tasks+0x1>
 4a2:	80 91 15 01 	lds	r24, 0x0115	; 0x800115 <i.1803>
 4a6:	68 2f       	mov	r22, r24
 4a8:	70 e0       	ldi	r23, 0x00	; 0
 4aa:	eb e0       	ldi	r30, 0x0B	; 11
 4ac:	e6 9f       	mul	r30, r22
 4ae:	c0 01       	movw	r24, r0
 4b0:	e7 9f       	mul	r30, r23
 4b2:	90 0d       	add	r25, r0
 4b4:	11 24       	eor	r1, r1
 4b6:	84 0f       	add	r24, r20
 4b8:	95 1f       	adc	r25, r21
 4ba:	fc 01       	movw	r30, r24
 4bc:	80 81       	ld	r24, Z
 4be:	08 2e       	mov	r0, r24
 4c0:	00 0c       	add	r0, r0
 4c2:	99 0b       	sbc	r25, r25
 4c4:	f9 01       	movw	r30, r18
 4c6:	09 95       	icall
 4c8:	f8 01       	movw	r30, r16
 4ca:	80 83       	st	Z, r24
			tasks[i].elapsedTime = 0;
 4cc:	20 91 17 01 	lds	r18, 0x0117	; 0x800117 <tasks>
 4d0:	30 91 18 01 	lds	r19, 0x0118	; 0x800118 <tasks+0x1>
 4d4:	80 91 15 01 	lds	r24, 0x0115	; 0x800115 <i.1803>
 4d8:	48 2f       	mov	r20, r24
 4da:	50 e0       	ldi	r21, 0x00	; 0
 4dc:	6b e0       	ldi	r22, 0x0B	; 11
 4de:	64 9f       	mul	r22, r20
 4e0:	c0 01       	movw	r24, r0
 4e2:	65 9f       	mul	r22, r21
 4e4:	90 0d       	add	r25, r0
 4e6:	11 24       	eor	r1, r1
 4e8:	82 0f       	add	r24, r18
 4ea:	93 1f       	adc	r25, r19
 4ec:	fc 01       	movw	r30, r24
 4ee:	15 82       	std	Z+5, r1	; 0x05
 4f0:	16 82       	std	Z+6, r1	; 0x06
 4f2:	17 82       	std	Z+7, r1	; 0x07
 4f4:	10 86       	std	Z+8, r1	; 0x08
		}
		tasks[i].elapsedTime += tasksPeriodGCD;
 4f6:	20 91 17 01 	lds	r18, 0x0117	; 0x800117 <tasks>
 4fa:	30 91 18 01 	lds	r19, 0x0118	; 0x800118 <tasks+0x1>
 4fe:	80 91 15 01 	lds	r24, 0x0115	; 0x800115 <i.1803>
 502:	48 2f       	mov	r20, r24
 504:	50 e0       	ldi	r21, 0x00	; 0
 506:	6b e0       	ldi	r22, 0x0B	; 11
 508:	64 9f       	mul	r22, r20
 50a:	c0 01       	movw	r24, r0
 50c:	65 9f       	mul	r22, r21
 50e:	90 0d       	add	r25, r0
 510:	11 24       	eor	r1, r1
 512:	b9 01       	movw	r22, r18
 514:	68 0f       	add	r22, r24
 516:	79 1f       	adc	r23, r25
 518:	20 91 17 01 	lds	r18, 0x0117	; 0x800117 <tasks>
 51c:	30 91 18 01 	lds	r19, 0x0118	; 0x800118 <tasks+0x1>
 520:	80 91 15 01 	lds	r24, 0x0115	; 0x800115 <i.1803>
 524:	48 2f       	mov	r20, r24
 526:	50 e0       	ldi	r21, 0x00	; 0
 528:	eb e0       	ldi	r30, 0x0B	; 11
 52a:	e4 9f       	mul	r30, r20
 52c:	c0 01       	movw	r24, r0
 52e:	e5 9f       	mul	r30, r21
 530:	90 0d       	add	r25, r0
 532:	11 24       	eor	r1, r1
 534:	82 0f       	add	r24, r18
 536:	93 1f       	adc	r25, r19
 538:	fc 01       	movw	r30, r24
 53a:	25 81       	ldd	r18, Z+5	; 0x05
 53c:	36 81       	ldd	r19, Z+6	; 0x06
 53e:	47 81       	ldd	r20, Z+7	; 0x07
 540:	50 85       	ldd	r21, Z+8	; 0x08
 542:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <__DATA_REGION_ORIGIN__>
 546:	90 91 01 01 	lds	r25, 0x0101	; 0x800101 <__DATA_REGION_ORIGIN__+0x1>
 54a:	a0 91 02 01 	lds	r26, 0x0102	; 0x800102 <__DATA_REGION_ORIGIN__+0x2>
 54e:	b0 91 03 01 	lds	r27, 0x0103	; 0x800103 <__DATA_REGION_ORIGIN__+0x3>
 552:	82 0f       	add	r24, r18
 554:	93 1f       	adc	r25, r19
 556:	a4 1f       	adc	r26, r20
 558:	b5 1f       	adc	r27, r21
 55a:	fb 01       	movw	r30, r22
 55c:	85 83       	std	Z+5, r24	; 0x05
 55e:	96 83       	std	Z+6, r25	; 0x06
 560:	a7 83       	std	Z+7, r26	; 0x07
 562:	b0 87       	std	Z+8, r27	; 0x08

///////////////////////////////////////////////////////////////////////////////
// Heart of the scheduler code
void TimerISR() {
	static unsigned char i;
	for (i = 0; i < tasksNum; i++) {
 564:	80 91 15 01 	lds	r24, 0x0115	; 0x800115 <i.1803>
 568:	8f 5f       	subi	r24, 0xFF	; 255
 56a:	80 93 15 01 	sts	0x0115, r24	; 0x800115 <i.1803>
 56e:	90 91 15 01 	lds	r25, 0x0115	; 0x800115 <i.1803>
 572:	80 91 13 01 	lds	r24, 0x0113	; 0x800113 <tasksNum>
 576:	98 17       	cp	r25, r24
 578:	08 f4       	brcc	.+2      	; 0x57c <__LOCK_REGION_LENGTH__+0x17c>
 57a:	3b cf       	rjmp	.-394    	; 0x3f2 <TimerISR+0x12>
			tasks[i].state = tasks[i].TickFct(tasks[i].state);
			tasks[i].elapsedTime = 0;
		}
		tasks[i].elapsedTime += tasksPeriodGCD;
	}
}
 57c:	00 00       	nop
 57e:	df 91       	pop	r29
 580:	cf 91       	pop	r28
 582:	1f 91       	pop	r17
 584:	0f 91       	pop	r16
 586:	08 95       	ret

00000588 <__vector_13>:

///////////////////////////////////////////////////////////////////////////////
// In our approach, the C programmer does not touch this ISR, but rather TimerISR()
ISR(TIMER1_COMPA_vect) {
 588:	1f 92       	push	r1
 58a:	0f 92       	push	r0
 58c:	00 90 5f 00 	lds	r0, 0x005F	; 0x80005f <__TEXT_REGION_LENGTH__+0x7e005f>
 590:	0f 92       	push	r0
 592:	11 24       	eor	r1, r1
 594:	00 90 5b 00 	lds	r0, 0x005B	; 0x80005b <__TEXT_REGION_LENGTH__+0x7e005b>
 598:	0f 92       	push	r0
 59a:	2f 93       	push	r18
 59c:	3f 93       	push	r19
 59e:	4f 93       	push	r20
 5a0:	5f 93       	push	r21
 5a2:	6f 93       	push	r22
 5a4:	7f 93       	push	r23
 5a6:	8f 93       	push	r24
 5a8:	9f 93       	push	r25
 5aa:	af 93       	push	r26
 5ac:	bf 93       	push	r27
 5ae:	ef 93       	push	r30
 5b0:	ff 93       	push	r31
 5b2:	cf 93       	push	r28
 5b4:	df 93       	push	r29
 5b6:	cd b7       	in	r28, 0x3d	; 61
 5b8:	de b7       	in	r29, 0x3e	; 62
	// CPU automatically calls when TCNT0 == OCR0 (every 1 ms per TimerOn settings)
	tasksPeriodCntDown--; 			// Count down to 0 rather than up to TOP
 5ba:	80 91 0f 01 	lds	r24, 0x010F	; 0x80010f <tasksPeriodCntDown>
 5be:	90 91 10 01 	lds	r25, 0x0110	; 0x800110 <tasksPeriodCntDown+0x1>
 5c2:	a0 91 11 01 	lds	r26, 0x0111	; 0x800111 <tasksPeriodCntDown+0x2>
 5c6:	b0 91 12 01 	lds	r27, 0x0112	; 0x800112 <tasksPeriodCntDown+0x3>
 5ca:	01 97       	sbiw	r24, 0x01	; 1
 5cc:	a1 09       	sbc	r26, r1
 5ce:	b1 09       	sbc	r27, r1
 5d0:	80 93 0f 01 	sts	0x010F, r24	; 0x80010f <tasksPeriodCntDown>
 5d4:	90 93 10 01 	sts	0x0110, r25	; 0x800110 <tasksPeriodCntDown+0x1>
 5d8:	a0 93 11 01 	sts	0x0111, r26	; 0x800111 <tasksPeriodCntDown+0x2>
 5dc:	b0 93 12 01 	sts	0x0112, r27	; 0x800112 <tasksPeriodCntDown+0x3>
	if (tasksPeriodCntDown == 0) { 	// results in a more efficient compare
 5e0:	80 91 0f 01 	lds	r24, 0x010F	; 0x80010f <tasksPeriodCntDown>
 5e4:	90 91 10 01 	lds	r25, 0x0110	; 0x800110 <tasksPeriodCntDown+0x1>
 5e8:	a0 91 11 01 	lds	r26, 0x0111	; 0x800111 <tasksPeriodCntDown+0x2>
 5ec:	b0 91 12 01 	lds	r27, 0x0112	; 0x800112 <tasksPeriodCntDown+0x3>
 5f0:	89 2b       	or	r24, r25
 5f2:	8a 2b       	or	r24, r26
 5f4:	8b 2b       	or	r24, r27
 5f6:	89 f4       	brne	.+34     	; 0x61a <__vector_13+0x92>
		TimerISR(); 				// Call the ISR that the user uses
 5f8:	f3 de       	rcall	.-538    	; 0x3e0 <TimerISR>
		tasksPeriodCntDown = tasksPeriodGCD;
 5fa:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <__DATA_REGION_ORIGIN__>
 5fe:	90 91 01 01 	lds	r25, 0x0101	; 0x800101 <__DATA_REGION_ORIGIN__+0x1>
 602:	a0 91 02 01 	lds	r26, 0x0102	; 0x800102 <__DATA_REGION_ORIGIN__+0x2>
 606:	b0 91 03 01 	lds	r27, 0x0103	; 0x800103 <__DATA_REGION_ORIGIN__+0x3>
 60a:	80 93 0f 01 	sts	0x010F, r24	; 0x80010f <tasksPeriodCntDown>
 60e:	90 93 10 01 	sts	0x0110, r25	; 0x800110 <tasksPeriodCntDown+0x1>
 612:	a0 93 11 01 	sts	0x0111, r26	; 0x800111 <tasksPeriodCntDown+0x2>
 616:	b0 93 12 01 	sts	0x0112, r27	; 0x800112 <tasksPeriodCntDown+0x3>
	}
}
 61a:	00 00       	nop
 61c:	df 91       	pop	r29
 61e:	cf 91       	pop	r28
 620:	ff 91       	pop	r31
 622:	ef 91       	pop	r30
 624:	bf 91       	pop	r27
 626:	af 91       	pop	r26
 628:	9f 91       	pop	r25
 62a:	8f 91       	pop	r24
 62c:	7f 91       	pop	r23
 62e:	6f 91       	pop	r22
 630:	5f 91       	pop	r21
 632:	4f 91       	pop	r20
 634:	3f 91       	pop	r19
 636:	2f 91       	pop	r18
 638:	0f 90       	pop	r0
 63a:	00 92 5b 00 	sts	0x005B, r0	; 0x80005b <__TEXT_REGION_LENGTH__+0x7e005b>
 63e:	0f 90       	pop	r0
 640:	00 92 5f 00 	sts	0x005F, r0	; 0x80005f <__TEXT_REGION_LENGTH__+0x7e005f>
 644:	0f 90       	pop	r0
 646:	1f 90       	pop	r1
 648:	18 95       	reti

0000064a <TimerSet>:

///////////////////////////////////////////////////////////////////////////////
// Set TimerISR() to tick every m ms
void TimerSet(unsigned long m) {
 64a:	cf 93       	push	r28
 64c:	df 93       	push	r29
 64e:	00 d0       	rcall	.+0      	; 0x650 <TimerSet+0x6>
 650:	00 d0       	rcall	.+0      	; 0x652 <TimerSet+0x8>
 652:	cd b7       	in	r28, 0x3d	; 61
 654:	de b7       	in	r29, 0x3e	; 62
 656:	69 83       	std	Y+1, r22	; 0x01
 658:	7a 83       	std	Y+2, r23	; 0x02
 65a:	8b 83       	std	Y+3, r24	; 0x03
 65c:	9c 83       	std	Y+4, r25	; 0x04
	tasksPeriodGCD = m;
 65e:	89 81       	ldd	r24, Y+1	; 0x01
 660:	9a 81       	ldd	r25, Y+2	; 0x02
 662:	ab 81       	ldd	r26, Y+3	; 0x03
 664:	bc 81       	ldd	r27, Y+4	; 0x04
 666:	80 93 00 01 	sts	0x0100, r24	; 0x800100 <__DATA_REGION_ORIGIN__>
 66a:	90 93 01 01 	sts	0x0101, r25	; 0x800101 <__DATA_REGION_ORIGIN__+0x1>
 66e:	a0 93 02 01 	sts	0x0102, r26	; 0x800102 <__DATA_REGION_ORIGIN__+0x2>
 672:	b0 93 03 01 	sts	0x0103, r27	; 0x800103 <__DATA_REGION_ORIGIN__+0x3>
	tasksPeriodCntDown = tasksPeriodGCD;
 676:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <__DATA_REGION_ORIGIN__>
 67a:	90 91 01 01 	lds	r25, 0x0101	; 0x800101 <__DATA_REGION_ORIGIN__+0x1>
 67e:	a0 91 02 01 	lds	r26, 0x0102	; 0x800102 <__DATA_REGION_ORIGIN__+0x2>
 682:	b0 91 03 01 	lds	r27, 0x0103	; 0x800103 <__DATA_REGION_ORIGIN__+0x3>
 686:	80 93 0f 01 	sts	0x010F, r24	; 0x80010f <tasksPeriodCntDown>
 68a:	90 93 10 01 	sts	0x0110, r25	; 0x800110 <tasksPeriodCntDown+0x1>
 68e:	a0 93 11 01 	sts	0x0111, r26	; 0x800111 <tasksPeriodCntDown+0x2>
 692:	b0 93 12 01 	sts	0x0112, r27	; 0x800112 <tasksPeriodCntDown+0x3>
}
 696:	00 00       	nop
 698:	0f 90       	pop	r0
 69a:	0f 90       	pop	r0
 69c:	0f 90       	pop	r0
 69e:	0f 90       	pop	r0
 6a0:	df 91       	pop	r29
 6a2:	cf 91       	pop	r28
 6a4:	08 95       	ret

000006a6 <TimerOn>:

///////////////////////////////////////////////////////////////////////////////
void TimerOn() {
 6a6:	cf 93       	push	r28
 6a8:	df 93       	push	r29
 6aa:	cd b7       	in	r28, 0x3d	; 61
 6ac:	de b7       	in	r29, 0x3e	; 62
	// AVR timer/counter controller register TCCR1
	TCCR1B 	= (1<<WGM12)|(1<<CS11)|(1<<CS10);
 6ae:	81 e8       	ldi	r24, 0x81	; 129
 6b0:	90 e0       	ldi	r25, 0x00	; 0
 6b2:	2b e0       	ldi	r18, 0x0B	; 11
 6b4:	fc 01       	movw	r30, r24
 6b6:	20 83       	st	Z, r18
	// Thus TCCR1B = 00001011 or 0x0B
	// So, 8 MHz clock or 8,000,000 /64 = 125,000 ticks/s
	// Thus, TCNT1 register will count at 125,000 ticks/s

	// AVR output compare register OCR1A.
	OCR1A 	= 125;	// Timer interrupt will be generated when TCNT1==OCR1A
 6b8:	88 e8       	ldi	r24, 0x88	; 136
 6ba:	90 e0       	ldi	r25, 0x00	; 0
 6bc:	2d e7       	ldi	r18, 0x7D	; 125
 6be:	30 e0       	ldi	r19, 0x00	; 0
 6c0:	fc 01       	movw	r30, r24
 6c2:	31 83       	std	Z+1, r19	; 0x01
 6c4:	20 83       	st	Z, r18
	// So when TCNT1 register equals 125,
	// 1 ms has passed. Thus, we compare to 125.
	// AVR timer interrupt mask register

	#if defined (__AVR_ATmega1284__)
	TIMSK1 	= (1<<OCIE1A); // OCIE1A (bit1): enables compare match interrupt - ATMega1284
 6c6:	8f e6       	ldi	r24, 0x6F	; 111
 6c8:	90 e0       	ldi	r25, 0x00	; 0
 6ca:	22 e0       	ldi	r18, 0x02	; 2
 6cc:	fc 01       	movw	r30, r24
 6ce:	20 83       	st	Z, r18
	#else
	TIMSK 	= (1<<OCIE1A); // OCIE1A (bit1): enables compare match interrupt - ATMega32
	#endif

	// Initialize avr counter
	TCNT1 = 0;
 6d0:	84 e8       	ldi	r24, 0x84	; 132
 6d2:	90 e0       	ldi	r25, 0x00	; 0
 6d4:	fc 01       	movw	r30, r24
 6d6:	11 82       	std	Z+1, r1	; 0x01
 6d8:	10 82       	st	Z, r1

	// TimerISR will be called every tasksPeriodCntDown milliseconds
	tasksPeriodCntDown = tasksPeriodGCD;
 6da:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <__DATA_REGION_ORIGIN__>
 6de:	90 91 01 01 	lds	r25, 0x0101	; 0x800101 <__DATA_REGION_ORIGIN__+0x1>
 6e2:	a0 91 02 01 	lds	r26, 0x0102	; 0x800102 <__DATA_REGION_ORIGIN__+0x2>
 6e6:	b0 91 03 01 	lds	r27, 0x0103	; 0x800103 <__DATA_REGION_ORIGIN__+0x3>
 6ea:	80 93 0f 01 	sts	0x010F, r24	; 0x80010f <tasksPeriodCntDown>
 6ee:	90 93 10 01 	sts	0x0110, r25	; 0x800110 <tasksPeriodCntDown+0x1>
 6f2:	a0 93 11 01 	sts	0x0111, r26	; 0x800111 <tasksPeriodCntDown+0x2>
 6f6:	b0 93 12 01 	sts	0x0112, r27	; 0x800112 <tasksPeriodCntDown+0x3>

	// Enable global interrupts
	SREG |= 0x80;	// 0x80: 1000000
 6fa:	8f e5       	ldi	r24, 0x5F	; 95
 6fc:	90 e0       	ldi	r25, 0x00	; 0
 6fe:	2f e5       	ldi	r18, 0x5F	; 95
 700:	30 e0       	ldi	r19, 0x00	; 0
 702:	f9 01       	movw	r30, r18
 704:	20 81       	ld	r18, Z
 706:	20 68       	ori	r18, 0x80	; 128
 708:	fc 01       	movw	r30, r24
 70a:	20 83       	st	Z, r18
}
 70c:	00 00       	nop
 70e:	df 91       	pop	r29
 710:	cf 91       	pop	r28
 712:	08 95       	ret

00000714 <B1_task>:
enum B2 {B2_start, B2_sample, B2_wait} B2_states;
	
unsigned char buttons = 0;
	
int B1_task(int state)
{
 714:	cf 93       	push	r28
 716:	df 93       	push	r29
 718:	00 d0       	rcall	.+0      	; 0x71a <B1_task+0x6>
 71a:	cd b7       	in	r28, 0x3d	; 61
 71c:	de b7       	in	r29, 0x3e	; 62
 71e:	9a 83       	std	Y+2, r25	; 0x02
 720:	89 83       	std	Y+1, r24	; 0x01
	switch(state)
 722:	89 81       	ldd	r24, Y+1	; 0x01
 724:	9a 81       	ldd	r25, Y+2	; 0x02
 726:	81 30       	cpi	r24, 0x01	; 1
 728:	91 05       	cpc	r25, r1
 72a:	51 f0       	breq	.+20     	; 0x740 <B1_task+0x2c>
 72c:	82 30       	cpi	r24, 0x02	; 2
 72e:	91 05       	cpc	r25, r1
 730:	d9 f0       	breq	.+54     	; 0x768 <B1_task+0x54>
 732:	89 2b       	or	r24, r25
 734:	69 f5       	brne	.+90     	; 0x790 <B1_task+0x7c>
	{
		case B1_start:
			state = B1_sample;
 736:	81 e0       	ldi	r24, 0x01	; 1
 738:	90 e0       	ldi	r25, 0x00	; 0
 73a:	9a 83       	std	Y+2, r25	; 0x02
 73c:	89 83       	std	Y+1, r24	; 0x01
			break;
 73e:	2b c0       	rjmp	.+86     	; 0x796 <B1_task+0x82>
			
		case B1_sample:
			if(button1)
 740:	86 e2       	ldi	r24, 0x26	; 38
 742:	90 e0       	ldi	r25, 0x00	; 0
 744:	fc 01       	movw	r30, r24
 746:	80 81       	ld	r24, Z
 748:	88 2f       	mov	r24, r24
 74a:	90 e0       	ldi	r25, 0x00	; 0
 74c:	81 70       	andi	r24, 0x01	; 1
 74e:	99 27       	eor	r25, r25
 750:	89 2b       	or	r24, r25
 752:	29 f4       	brne	.+10     	; 0x75e <B1_task+0x4a>
				state = B1_wait;
 754:	82 e0       	ldi	r24, 0x02	; 2
 756:	90 e0       	ldi	r25, 0x00	; 0
 758:	9a 83       	std	Y+2, r25	; 0x02
 75a:	89 83       	std	Y+1, r24	; 0x01
			else state = B1_sample;
			break;
 75c:	1c c0       	rjmp	.+56     	; 0x796 <B1_task+0x82>
			break;
			
		case B1_sample:
			if(button1)
				state = B1_wait;
			else state = B1_sample;
 75e:	81 e0       	ldi	r24, 0x01	; 1
 760:	90 e0       	ldi	r25, 0x00	; 0
 762:	9a 83       	std	Y+2, r25	; 0x02
 764:	89 83       	std	Y+1, r24	; 0x01
			break;
 766:	17 c0       	rjmp	.+46     	; 0x796 <B1_task+0x82>
			
		case B1_wait:
			if(!button1)
 768:	86 e2       	ldi	r24, 0x26	; 38
 76a:	90 e0       	ldi	r25, 0x00	; 0
 76c:	fc 01       	movw	r30, r24
 76e:	80 81       	ld	r24, Z
 770:	88 2f       	mov	r24, r24
 772:	90 e0       	ldi	r25, 0x00	; 0
 774:	81 70       	andi	r24, 0x01	; 1
 776:	99 27       	eor	r25, r25
 778:	89 2b       	or	r24, r25
 77a:	29 f0       	breq	.+10     	; 0x786 <B1_task+0x72>
				state = B1_sample;
 77c:	81 e0       	ldi	r24, 0x01	; 1
 77e:	90 e0       	ldi	r25, 0x00	; 0
 780:	9a 83       	std	Y+2, r25	; 0x02
 782:	89 83       	std	Y+1, r24	; 0x01
			else
				state = B1_wait;
			break;
 784:	08 c0       	rjmp	.+16     	; 0x796 <B1_task+0x82>
			
		case B1_wait:
			if(!button1)
				state = B1_sample;
			else
				state = B1_wait;
 786:	82 e0       	ldi	r24, 0x02	; 2
 788:	90 e0       	ldi	r25, 0x00	; 0
 78a:	9a 83       	std	Y+2, r25	; 0x02
 78c:	89 83       	std	Y+1, r24	; 0x01
			break;
 78e:	03 c0       	rjmp	.+6      	; 0x796 <B1_task+0x82>
		
		default:
			state = B1_start;
 790:	1a 82       	std	Y+2, r1	; 0x02
 792:	19 82       	std	Y+1, r1	; 0x01
			break;
 794:	00 00       	nop
	}
	switch(state)
 796:	89 81       	ldd	r24, Y+1	; 0x01
 798:	9a 81       	ldd	r25, Y+2	; 0x02
 79a:	81 30       	cpi	r24, 0x01	; 1
 79c:	91 05       	cpc	r25, r1
 79e:	31 f0       	breq	.+12     	; 0x7ac <B1_task+0x98>
 7a0:	82 30       	cpi	r24, 0x02	; 2
 7a2:	91 05       	cpc	r25, r1
 7a4:	49 f0       	breq	.+18     	; 0x7b8 <B1_task+0xa4>
 7a6:	89 2b       	or	r24, r25
 7a8:	69 f0       	breq	.+26     	; 0x7c4 <B1_task+0xb0>
			buttons |= 1;
			break;
		
		default:
		
			break;
 7aa:	0d c0       	rjmp	.+26     	; 0x7c6 <B1_task+0xb2>
	{
		case B1_start:
			break;
		
		case B1_sample:
			buttons &= ~(1);
 7ac:	80 91 14 01 	lds	r24, 0x0114	; 0x800114 <buttons>
 7b0:	8e 7f       	andi	r24, 0xFE	; 254
 7b2:	80 93 14 01 	sts	0x0114, r24	; 0x800114 <buttons>
			break;
 7b6:	07 c0       	rjmp	.+14     	; 0x7c6 <B1_task+0xb2>
		
		case B1_wait:
			buttons |= 1;
 7b8:	80 91 14 01 	lds	r24, 0x0114	; 0x800114 <buttons>
 7bc:	81 60       	ori	r24, 0x01	; 1
 7be:	80 93 14 01 	sts	0x0114, r24	; 0x800114 <buttons>
			break;
 7c2:	01 c0       	rjmp	.+2      	; 0x7c6 <B1_task+0xb2>
			break;
	}
	switch(state)
	{
		case B1_start:
			break;
 7c4:	00 00       	nop
		
		default:
		
			break;
	}
	return state;
 7c6:	89 81       	ldd	r24, Y+1	; 0x01
 7c8:	9a 81       	ldd	r25, Y+2	; 0x02
}
 7ca:	0f 90       	pop	r0
 7cc:	0f 90       	pop	r0
 7ce:	df 91       	pop	r29
 7d0:	cf 91       	pop	r28
 7d2:	08 95       	ret

000007d4 <B2_task>:

int B2_task(int state)
{
 7d4:	cf 93       	push	r28
 7d6:	df 93       	push	r29
 7d8:	00 d0       	rcall	.+0      	; 0x7da <B2_task+0x6>
 7da:	cd b7       	in	r28, 0x3d	; 61
 7dc:	de b7       	in	r29, 0x3e	; 62
 7de:	9a 83       	std	Y+2, r25	; 0x02
 7e0:	89 83       	std	Y+1, r24	; 0x01
	switch(state)
 7e2:	89 81       	ldd	r24, Y+1	; 0x01
 7e4:	9a 81       	ldd	r25, Y+2	; 0x02
 7e6:	81 30       	cpi	r24, 0x01	; 1
 7e8:	91 05       	cpc	r25, r1
 7ea:	51 f0       	breq	.+20     	; 0x800 <B2_task+0x2c>
 7ec:	82 30       	cpi	r24, 0x02	; 2
 7ee:	91 05       	cpc	r25, r1
 7f0:	d9 f0       	breq	.+54     	; 0x828 <B2_task+0x54>
 7f2:	89 2b       	or	r24, r25
 7f4:	69 f5       	brne	.+90     	; 0x850 <B2_task+0x7c>
	{
		case B2_start:
			state = B2_sample;
 7f6:	81 e0       	ldi	r24, 0x01	; 1
 7f8:	90 e0       	ldi	r25, 0x00	; 0
 7fa:	9a 83       	std	Y+2, r25	; 0x02
 7fc:	89 83       	std	Y+1, r24	; 0x01
			break;
 7fe:	2b c0       	rjmp	.+86     	; 0x856 <B2_task+0x82>
		
		case B2_sample:
			if(button2)
 800:	86 e2       	ldi	r24, 0x26	; 38
 802:	90 e0       	ldi	r25, 0x00	; 0
 804:	fc 01       	movw	r30, r24
 806:	80 81       	ld	r24, Z
 808:	88 2f       	mov	r24, r24
 80a:	90 e0       	ldi	r25, 0x00	; 0
 80c:	82 70       	andi	r24, 0x02	; 2
 80e:	99 27       	eor	r25, r25
 810:	89 2b       	or	r24, r25
 812:	29 f4       	brne	.+10     	; 0x81e <B2_task+0x4a>
				state = B2_wait;
 814:	82 e0       	ldi	r24, 0x02	; 2
 816:	90 e0       	ldi	r25, 0x00	; 0
 818:	9a 83       	std	Y+2, r25	; 0x02
 81a:	89 83       	std	Y+1, r24	; 0x01
			else
				state = B2_sample;
			break;
 81c:	1c c0       	rjmp	.+56     	; 0x856 <B2_task+0x82>
		
		case B2_sample:
			if(button2)
				state = B2_wait;
			else
				state = B2_sample;
 81e:	81 e0       	ldi	r24, 0x01	; 1
 820:	90 e0       	ldi	r25, 0x00	; 0
 822:	9a 83       	std	Y+2, r25	; 0x02
 824:	89 83       	std	Y+1, r24	; 0x01
			break;
 826:	17 c0       	rjmp	.+46     	; 0x856 <B2_task+0x82>
		
		case B2_wait:
			if(!button2)
 828:	86 e2       	ldi	r24, 0x26	; 38
 82a:	90 e0       	ldi	r25, 0x00	; 0
 82c:	fc 01       	movw	r30, r24
 82e:	80 81       	ld	r24, Z
 830:	88 2f       	mov	r24, r24
 832:	90 e0       	ldi	r25, 0x00	; 0
 834:	82 70       	andi	r24, 0x02	; 2
 836:	99 27       	eor	r25, r25
 838:	89 2b       	or	r24, r25
 83a:	29 f0       	breq	.+10     	; 0x846 <B2_task+0x72>
				state = B2_sample;
 83c:	81 e0       	ldi	r24, 0x01	; 1
 83e:	90 e0       	ldi	r25, 0x00	; 0
 840:	9a 83       	std	Y+2, r25	; 0x02
 842:	89 83       	std	Y+1, r24	; 0x01
			else
				state = B2_wait;
			break;
 844:	08 c0       	rjmp	.+16     	; 0x856 <B2_task+0x82>
		
		case B2_wait:
			if(!button2)
				state = B2_sample;
			else
				state = B2_wait;
 846:	82 e0       	ldi	r24, 0x02	; 2
 848:	90 e0       	ldi	r25, 0x00	; 0
 84a:	9a 83       	std	Y+2, r25	; 0x02
 84c:	89 83       	std	Y+1, r24	; 0x01
			break;
 84e:	03 c0       	rjmp	.+6      	; 0x856 <B2_task+0x82>
		
		default:
			state = B2_start;
 850:	1a 82       	std	Y+2, r1	; 0x02
 852:	19 82       	std	Y+1, r1	; 0x01
			break;
 854:	00 00       	nop
	}
	switch(state)
 856:	89 81       	ldd	r24, Y+1	; 0x01
 858:	9a 81       	ldd	r25, Y+2	; 0x02
 85a:	81 30       	cpi	r24, 0x01	; 1
 85c:	91 05       	cpc	r25, r1
 85e:	31 f0       	breq	.+12     	; 0x86c <B2_task+0x98>
 860:	82 30       	cpi	r24, 0x02	; 2
 862:	91 05       	cpc	r25, r1
 864:	49 f0       	breq	.+18     	; 0x878 <B2_task+0xa4>
 866:	89 2b       	or	r24, r25
 868:	69 f0       	breq	.+26     	; 0x884 <B2_task+0xb0>
			buttons |= (1 << 1);
			break;
		
		default:
		
			break;
 86a:	0d c0       	rjmp	.+26     	; 0x886 <B2_task+0xb2>
	{
		case B2_start:
			break;
		
		case B2_sample:
			buttons &= ~(1 << 1);
 86c:	80 91 14 01 	lds	r24, 0x0114	; 0x800114 <buttons>
 870:	8d 7f       	andi	r24, 0xFD	; 253
 872:	80 93 14 01 	sts	0x0114, r24	; 0x800114 <buttons>
			break;
 876:	07 c0       	rjmp	.+14     	; 0x886 <B2_task+0xb2>
		
		case B2_wait:
			buttons |= (1 << 1);
 878:	80 91 14 01 	lds	r24, 0x0114	; 0x800114 <buttons>
 87c:	82 60       	ori	r24, 0x02	; 2
 87e:	80 93 14 01 	sts	0x0114, r24	; 0x800114 <buttons>
			break;
 882:	01 c0       	rjmp	.+2      	; 0x886 <B2_task+0xb2>
			break;
	}
	switch(state)
	{
		case B2_start:
			break;
 884:	00 00       	nop
		
		default:
		
			break;
	}
	return state;
 886:	89 81       	ldd	r24, Y+1	; 0x01
 888:	9a 81       	ldd	r25, Y+2	; 0x02
}
 88a:	0f 90       	pop	r0
 88c:	0f 90       	pop	r0
 88e:	df 91       	pop	r29
 890:	cf 91       	pop	r28
 892:	08 95       	ret

00000894 <tasks_task>:


enum TASKS{tasks_start, tasks_send, tasks_sleep} task_state;
	
int tasks_task(int state)
{
 894:	cf 93       	push	r28
 896:	df 93       	push	r29
 898:	00 d0       	rcall	.+0      	; 0x89a <tasks_task+0x6>
 89a:	cd b7       	in	r28, 0x3d	; 61
 89c:	de b7       	in	r29, 0x3e	; 62
 89e:	9a 83       	std	Y+2, r25	; 0x02
 8a0:	89 83       	std	Y+1, r24	; 0x01
	static unsigned char tk; // counts to 5 seconds
	switch(state)
 8a2:	89 81       	ldd	r24, Y+1	; 0x01
 8a4:	9a 81       	ldd	r25, Y+2	; 0x02
 8a6:	81 30       	cpi	r24, 0x01	; 1
 8a8:	91 05       	cpc	r25, r1
 8aa:	91 f1       	breq	.+100    	; 0x910 <tasks_task+0x7c>
 8ac:	82 30       	cpi	r24, 0x02	; 2
 8ae:	91 05       	cpc	r25, r1
 8b0:	09 f4       	brne	.+2      	; 0x8b4 <tasks_task+0x20>
 8b2:	3f c0       	rjmp	.+126    	; 0x932 <tasks_task+0x9e>
 8b4:	89 2b       	or	r24, r25
 8b6:	d1 f5       	brne	.+116    	; 0x92c <tasks_task+0x98>
	{
		case tasks_start:			// initializes all ports
			DDRA = 0x00; PORTA = 0xff;
 8b8:	81 e2       	ldi	r24, 0x21	; 33
 8ba:	90 e0       	ldi	r25, 0x00	; 0
 8bc:	fc 01       	movw	r30, r24
 8be:	10 82       	st	Z, r1
 8c0:	82 e2       	ldi	r24, 0x22	; 34
 8c2:	90 e0       	ldi	r25, 0x00	; 0
 8c4:	2f ef       	ldi	r18, 0xFF	; 255
 8c6:	fc 01       	movw	r30, r24
 8c8:	20 83       	st	Z, r18
			DDRB = 0xff; PORTB = 0x00;
 8ca:	84 e2       	ldi	r24, 0x24	; 36
 8cc:	90 e0       	ldi	r25, 0x00	; 0
 8ce:	2f ef       	ldi	r18, 0xFF	; 255
 8d0:	fc 01       	movw	r30, r24
 8d2:	20 83       	st	Z, r18
 8d4:	85 e2       	ldi	r24, 0x25	; 37
 8d6:	90 e0       	ldi	r25, 0x00	; 0
 8d8:	fc 01       	movw	r30, r24
 8da:	10 82       	st	Z, r1
			DDRC = 0x00; PORTC = 0xff;
 8dc:	87 e2       	ldi	r24, 0x27	; 39
 8de:	90 e0       	ldi	r25, 0x00	; 0
 8e0:	fc 01       	movw	r30, r24
 8e2:	10 82       	st	Z, r1
 8e4:	88 e2       	ldi	r24, 0x28	; 40
 8e6:	90 e0       	ldi	r25, 0x00	; 0
 8e8:	2f ef       	ldi	r18, 0xFF	; 255
 8ea:	fc 01       	movw	r30, r24
 8ec:	20 83       	st	Z, r18
			DDRD = 0xff; PORTD = 0x00;
 8ee:	8a e2       	ldi	r24, 0x2A	; 42
 8f0:	90 e0       	ldi	r25, 0x00	; 0
 8f2:	2f ef       	ldi	r18, 0xFF	; 255
 8f4:	fc 01       	movw	r30, r24
 8f6:	20 83       	st	Z, r18
 8f8:	8b e2       	ldi	r24, 0x2B	; 43
 8fa:	90 e0       	ldi	r25, 0x00	; 0
 8fc:	fc 01       	movw	r30, r24
 8fe:	10 82       	st	Z, r1
			tk = 50;
 900:	82 e3       	ldi	r24, 0x32	; 50
 902:	80 93 16 01 	sts	0x0116, r24	; 0x800116 <tk.1862>
			state = tasks_send;
 906:	81 e0       	ldi	r24, 0x01	; 1
 908:	90 e0       	ldi	r25, 0x00	; 0
 90a:	9a 83       	std	Y+2, r25	; 0x02
 90c:	89 83       	std	Y+1, r24	; 0x01
			break;
 90e:	12 c0       	rjmp	.+36     	; 0x934 <tasks_task+0xa0>
		case tasks_send:
			if(tk == 0)
 910:	80 91 16 01 	lds	r24, 0x0116	; 0x800116 <tk.1862>
 914:	88 23       	and	r24, r24
 916:	29 f4       	brne	.+10     	; 0x922 <tasks_task+0x8e>
				state = tasks_sleep;
 918:	82 e0       	ldi	r24, 0x02	; 2
 91a:	90 e0       	ldi	r25, 0x00	; 0
 91c:	9a 83       	std	Y+2, r25	; 0x02
 91e:	89 83       	std	Y+1, r24	; 0x01
			else
				state = tasks_send;
			break;
 920:	09 c0       	rjmp	.+18     	; 0x934 <tasks_task+0xa0>
			break;
		case tasks_send:
			if(tk == 0)
				state = tasks_sleep;
			else
				state = tasks_send;
 922:	81 e0       	ldi	r24, 0x01	; 1
 924:	90 e0       	ldi	r25, 0x00	; 0
 926:	9a 83       	std	Y+2, r25	; 0x02
 928:	89 83       	std	Y+1, r24	; 0x01
			break;
 92a:	04 c0       	rjmp	.+8      	; 0x934 <tasks_task+0xa0>
		case tasks_sleep:
			break;
		default:
			state = tasks_start;
 92c:	1a 82       	std	Y+2, r1	; 0x02
 92e:	19 82       	std	Y+1, r1	; 0x01
			break;
 930:	01 c0       	rjmp	.+2      	; 0x934 <tasks_task+0xa0>
				state = tasks_sleep;
			else
				state = tasks_send;
			break;
		case tasks_sleep:
			break;
 932:	00 00       	nop
		default:
			state = tasks_start;
			break;
	}
	switch(state)
 934:	89 81       	ldd	r24, Y+1	; 0x01
 936:	9a 81       	ldd	r25, Y+2	; 0x02
 938:	81 30       	cpi	r24, 0x01	; 1
 93a:	91 05       	cpc	r25, r1
 93c:	51 f0       	breq	.+20     	; 0x952 <tasks_task+0xbe>
 93e:	82 30       	cpi	r24, 0x02	; 2
 940:	91 05       	cpc	r25, r1
 942:	c1 f1       	breq	.+112    	; 0x9b4 <tasks_task+0x120>
 944:	89 2b       	or	r24, r25
 946:	99 f5       	brne	.+102    	; 0x9ae <tasks_task+0x11a>
		case tasks_start:			// initializes all ports
			/*DDRA = 0x00; PORTA = 0xff;
			DDRB = 0xff; PORTB = 0x00;
			DDRC = 0x00; PORTC = 0xff;
			DDRD = 0xff; PORTD = 0x00;*/
			state = tasks_send;
 948:	81 e0       	ldi	r24, 0x01	; 1
 94a:	90 e0       	ldi	r25, 0x00	; 0
 94c:	9a 83       	std	Y+2, r25	; 0x02
 94e:	89 83       	std	Y+1, r24	; 0x01
			break;
 950:	32 c0       	rjmp	.+100    	; 0x9b6 <tasks_task+0x122>
		case tasks_send:
			PORTB = presSens | buttons | (up << 0) | (down << 1) | (speed << 2); // temporary
 952:	85 e2       	ldi	r24, 0x25	; 37
 954:	90 e0       	ldi	r25, 0x00	; 0
 956:	30 91 04 01 	lds	r19, 0x0104	; 0x800104 <__data_end>
 95a:	20 91 14 01 	lds	r18, 0x0114	; 0x800114 <buttons>
 95e:	32 2b       	or	r19, r18
 960:	20 91 0c 01 	lds	r18, 0x010C	; 0x80010c <up>
 964:	23 2b       	or	r18, r19
 966:	42 2f       	mov	r20, r18
 968:	20 91 0d 01 	lds	r18, 0x010D	; 0x80010d <down>
 96c:	22 2f       	mov	r18, r18
 96e:	30 e0       	ldi	r19, 0x00	; 0
 970:	22 0f       	add	r18, r18
 972:	33 1f       	adc	r19, r19
 974:	42 2b       	or	r20, r18
 976:	20 91 0e 01 	lds	r18, 0x010E	; 0x80010e <speed>
 97a:	22 2f       	mov	r18, r18
 97c:	30 e0       	ldi	r19, 0x00	; 0
 97e:	22 0f       	add	r18, r18
 980:	33 1f       	adc	r19, r19
 982:	22 0f       	add	r18, r18
 984:	33 1f       	adc	r19, r19
 986:	24 2b       	or	r18, r20
 988:	fc 01       	movw	r30, r24
 98a:	20 83       	st	Z, r18
			//PORTB = magTL;
			if(ADC == 0)
 98c:	88 e7       	ldi	r24, 0x78	; 120
 98e:	90 e0       	ldi	r25, 0x00	; 0
 990:	fc 01       	movw	r30, r24
 992:	80 81       	ld	r24, Z
 994:	91 81       	ldd	r25, Z+1	; 0x01
 996:	89 2b       	or	r24, r25
 998:	31 f4       	brne	.+12     	; 0x9a6 <tasks_task+0x112>
				tk--;
 99a:	80 91 16 01 	lds	r24, 0x0116	; 0x800116 <tk.1862>
 99e:	81 50       	subi	r24, 0x01	; 1
 9a0:	80 93 16 01 	sts	0x0116, r24	; 0x800116 <tk.1862>
			else
				tk = 50;
			break;
 9a4:	08 c0       	rjmp	.+16     	; 0x9b6 <tasks_task+0x122>
			PORTB = presSens | buttons | (up << 0) | (down << 1) | (speed << 2); // temporary
			//PORTB = magTL;
			if(ADC == 0)
				tk--;
			else
				tk = 50;
 9a6:	82 e3       	ldi	r24, 0x32	; 50
 9a8:	80 93 16 01 	sts	0x0116, r24	; 0x800116 <tk.1862>
			break;
 9ac:	04 c0       	rjmp	.+8      	; 0x9b6 <tasks_task+0x122>
		case tasks_sleep:
			//sleep();
			break;
		default:
			state = tasks_start;
 9ae:	1a 82       	std	Y+2, r1	; 0x02
 9b0:	19 82       	std	Y+1, r1	; 0x01
			break;
 9b2:	01 c0       	rjmp	.+2      	; 0x9b6 <tasks_task+0x122>
			else
				tk = 50;
			break;
		case tasks_sleep:
			//sleep();
			break;
 9b4:	00 00       	nop
		default:
			state = tasks_start;
			break;
	}
	
	return state;
 9b6:	89 81       	ldd	r24, Y+1	; 0x01
 9b8:	9a 81       	ldd	r25, Y+2	; 0x02
}
 9ba:	0f 90       	pop	r0
 9bc:	0f 90       	pop	r0
 9be:	df 91       	pop	r29
 9c0:	cf 91       	pop	r28
 9c2:	08 95       	ret

000009c4 <main>:


int main(void)
{
 9c4:	cf 93       	push	r28
 9c6:	df 93       	push	r29
 9c8:	cd b7       	in	r28, 0x3d	; 61
 9ca:	de b7       	in	r29, 0x3e	; 62
 9cc:	c0 57       	subi	r28, 0x70	; 112
 9ce:	d1 09       	sbc	r29, r1
 9d0:	0f b6       	in	r0, 0x3f	; 63
 9d2:	f8 94       	cli
 9d4:	de bf       	out	0x3e, r29	; 62
 9d6:	0f be       	out	0x3f, r0	; 63
 9d8:	cd bf       	out	0x3d, r28	; 61
    /* Replace with your application code */
	unsigned char contTime = 100;
 9da:	84 e6       	ldi	r24, 0x64	; 100
 9dc:	89 83       	std	Y+1, r24	; 0x01
	task  Pressure;
	task Poll1;
	task Poll2;
	task Mag;
	
	controller.state = tasks_start;
 9de:	1b 82       	std	Y+3, r1	; 0x03
	controller.elapsedTime = contTime;
 9e0:	89 81       	ldd	r24, Y+1	; 0x01
 9e2:	88 2f       	mov	r24, r24
 9e4:	90 e0       	ldi	r25, 0x00	; 0
 9e6:	a0 e0       	ldi	r26, 0x00	; 0
 9e8:	b0 e0       	ldi	r27, 0x00	; 0
 9ea:	88 87       	std	Y+8, r24	; 0x08
 9ec:	99 87       	std	Y+9, r25	; 0x09
 9ee:	aa 87       	std	Y+10, r26	; 0x0a
 9f0:	bb 87       	std	Y+11, r27	; 0x0b
	controller.period = contTime;
 9f2:	89 81       	ldd	r24, Y+1	; 0x01
 9f4:	88 2f       	mov	r24, r24
 9f6:	90 e0       	ldi	r25, 0x00	; 0
 9f8:	a0 e0       	ldi	r26, 0x00	; 0
 9fa:	b0 e0       	ldi	r27, 0x00	; 0
 9fc:	8c 83       	std	Y+4, r24	; 0x04
 9fe:	9d 83       	std	Y+5, r25	; 0x05
 a00:	ae 83       	std	Y+6, r26	; 0x06
 a02:	bf 83       	std	Y+7, r27	; 0x07
	controller.TickFct = &tasks_task;
 a04:	8a e4       	ldi	r24, 0x4A	; 74
 a06:	94 e0       	ldi	r25, 0x04	; 4
 a08:	9d 87       	std	Y+13, r25	; 0x0d
 a0a:	8c 87       	std	Y+12, r24	; 0x0c
	
	Pressure.state = presStart;
 a0c:	1e 86       	std	Y+14, r1	; 0x0e
	Pressure.TickFct = &PRESSENSE_task;
 a0e:	83 ed       	ldi	r24, 0xD3	; 211
 a10:	90 e0       	ldi	r25, 0x00	; 0
 a12:	98 8f       	std	Y+24, r25	; 0x18
 a14:	8f 8b       	std	Y+23, r24	; 0x17
	Pressure.elapsedTime = contTime;
 a16:	89 81       	ldd	r24, Y+1	; 0x01
 a18:	88 2f       	mov	r24, r24
 a1a:	90 e0       	ldi	r25, 0x00	; 0
 a1c:	a0 e0       	ldi	r26, 0x00	; 0
 a1e:	b0 e0       	ldi	r27, 0x00	; 0
 a20:	8b 8b       	std	Y+19, r24	; 0x13
 a22:	9c 8b       	std	Y+20, r25	; 0x14
 a24:	ad 8b       	std	Y+21, r26	; 0x15
 a26:	be 8b       	std	Y+22, r27	; 0x16
	Pressure.period = contTime;
 a28:	89 81       	ldd	r24, Y+1	; 0x01
 a2a:	88 2f       	mov	r24, r24
 a2c:	90 e0       	ldi	r25, 0x00	; 0
 a2e:	a0 e0       	ldi	r26, 0x00	; 0
 a30:	b0 e0       	ldi	r27, 0x00	; 0
 a32:	8f 87       	std	Y+15, r24	; 0x0f
 a34:	98 8b       	std	Y+16, r25	; 0x10
 a36:	a9 8b       	std	Y+17, r26	; 0x11
 a38:	ba 8b       	std	Y+18, r27	; 0x12
	tasksPeriodGCD = contTime;
 a3a:	89 81       	ldd	r24, Y+1	; 0x01
 a3c:	88 2f       	mov	r24, r24
 a3e:	90 e0       	ldi	r25, 0x00	; 0
 a40:	a0 e0       	ldi	r26, 0x00	; 0
 a42:	b0 e0       	ldi	r27, 0x00	; 0
 a44:	80 93 00 01 	sts	0x0100, r24	; 0x800100 <__DATA_REGION_ORIGIN__>
 a48:	90 93 01 01 	sts	0x0101, r25	; 0x800101 <__DATA_REGION_ORIGIN__+0x1>
 a4c:	a0 93 02 01 	sts	0x0102, r26	; 0x800102 <__DATA_REGION_ORIGIN__+0x2>
 a50:	b0 93 03 01 	sts	0x0103, r27	; 0x800103 <__DATA_REGION_ORIGIN__+0x3>
	
	Poll1.state = B1_start;
 a54:	19 8e       	std	Y+25, r1	; 0x19
	Poll1.elapsedTime = contTime;
 a56:	89 81       	ldd	r24, Y+1	; 0x01
 a58:	88 2f       	mov	r24, r24
 a5a:	90 e0       	ldi	r25, 0x00	; 0
 a5c:	a0 e0       	ldi	r26, 0x00	; 0
 a5e:	b0 e0       	ldi	r27, 0x00	; 0
 a60:	8e 8f       	std	Y+30, r24	; 0x1e
 a62:	9f 8f       	std	Y+31, r25	; 0x1f
 a64:	a8 a3       	std	Y+32, r26	; 0x20
 a66:	b9 a3       	std	Y+33, r27	; 0x21
	Poll1.period = contTime;
 a68:	89 81       	ldd	r24, Y+1	; 0x01
 a6a:	88 2f       	mov	r24, r24
 a6c:	90 e0       	ldi	r25, 0x00	; 0
 a6e:	a0 e0       	ldi	r26, 0x00	; 0
 a70:	b0 e0       	ldi	r27, 0x00	; 0
 a72:	8a 8f       	std	Y+26, r24	; 0x1a
 a74:	9b 8f       	std	Y+27, r25	; 0x1b
 a76:	ac 8f       	std	Y+28, r26	; 0x1c
 a78:	bd 8f       	std	Y+29, r27	; 0x1d
	Poll1.TickFct = &B1_task;
 a7a:	8a e8       	ldi	r24, 0x8A	; 138
 a7c:	93 e0       	ldi	r25, 0x03	; 3
 a7e:	9b a3       	std	Y+35, r25	; 0x23
 a80:	8a a3       	std	Y+34, r24	; 0x22
	
	Poll2.state = B2_start;
 a82:	1c a2       	std	Y+36, r1	; 0x24
	Poll2.elapsedTime = contTime;
 a84:	89 81       	ldd	r24, Y+1	; 0x01
 a86:	88 2f       	mov	r24, r24
 a88:	90 e0       	ldi	r25, 0x00	; 0
 a8a:	a0 e0       	ldi	r26, 0x00	; 0
 a8c:	b0 e0       	ldi	r27, 0x00	; 0
 a8e:	89 a7       	std	Y+41, r24	; 0x29
 a90:	9a a7       	std	Y+42, r25	; 0x2a
 a92:	ab a7       	std	Y+43, r26	; 0x2b
 a94:	bc a7       	std	Y+44, r27	; 0x2c
	Poll2.period = contTime;
 a96:	89 81       	ldd	r24, Y+1	; 0x01
 a98:	88 2f       	mov	r24, r24
 a9a:	90 e0       	ldi	r25, 0x00	; 0
 a9c:	a0 e0       	ldi	r26, 0x00	; 0
 a9e:	b0 e0       	ldi	r27, 0x00	; 0
 aa0:	8d a3       	std	Y+37, r24	; 0x25
 aa2:	9e a3       	std	Y+38, r25	; 0x26
 aa4:	af a3       	std	Y+39, r26	; 0x27
 aa6:	b8 a7       	std	Y+40, r27	; 0x28
	Poll2.TickFct = &B2_task;
 aa8:	8a ee       	ldi	r24, 0xEA	; 234
 aaa:	93 e0       	ldi	r25, 0x03	; 3
 aac:	9e a7       	std	Y+46, r25	; 0x2e
 aae:	8d a7       	std	Y+45, r24	; 0x2d
	
	Mag.state = magStart;
 ab0:	1f a6       	std	Y+47, r1	; 0x2f
	Mag.elapsedTime = contTime/2;
 ab2:	89 81       	ldd	r24, Y+1	; 0x01
 ab4:	86 95       	lsr	r24
 ab6:	88 2f       	mov	r24, r24
 ab8:	90 e0       	ldi	r25, 0x00	; 0
 aba:	a0 e0       	ldi	r26, 0x00	; 0
 abc:	b0 e0       	ldi	r27, 0x00	; 0
 abe:	8c ab       	std	Y+52, r24	; 0x34
 ac0:	9d ab       	std	Y+53, r25	; 0x35
 ac2:	ae ab       	std	Y+54, r26	; 0x36
 ac4:	bf ab       	std	Y+55, r27	; 0x37
	Mag.period = contTime;
 ac6:	89 81       	ldd	r24, Y+1	; 0x01
 ac8:	88 2f       	mov	r24, r24
 aca:	90 e0       	ldi	r25, 0x00	; 0
 acc:	a0 e0       	ldi	r26, 0x00	; 0
 ace:	b0 e0       	ldi	r27, 0x00	; 0
 ad0:	88 ab       	std	Y+48, r24	; 0x30
 ad2:	99 ab       	std	Y+49, r25	; 0x31
 ad4:	aa ab       	std	Y+50, r26	; 0x32
 ad6:	bb ab       	std	Y+51, r27	; 0x33
	Mag.TickFct = &magSense_task;
 ad8:	88 e1       	ldi	r24, 0x18	; 24
 ada:	91 e0       	ldi	r25, 0x01	; 1
 adc:	99 af       	std	Y+57, r25	; 0x39
 ade:	88 af       	std	Y+56, r24	; 0x38
	/*DDRA = 0x00; PORTA = 0xff;
	DDRB = 0xff; PORTB = 0x00;
	DDRC = 0xff; PORTC = 0x00;
	DDRD = 0xff; PORTD = 0x00;
	*/
	TimerSet(contTime/2);
 ae0:	89 81       	ldd	r24, Y+1	; 0x01
 ae2:	86 95       	lsr	r24
 ae4:	88 2f       	mov	r24, r24
 ae6:	90 e0       	ldi	r25, 0x00	; 0
 ae8:	a0 e0       	ldi	r26, 0x00	; 0
 aea:	b0 e0       	ldi	r27, 0x00	; 0
 aec:	bc 01       	movw	r22, r24
 aee:	cd 01       	movw	r24, r26
 af0:	ac dd       	rcall	.-1192   	; 0x64a <TimerSet>
	TimerOn();
 af2:	d9 dd       	rcall	.-1102   	; 0x6a6 <TimerOn>
 af4:	8b e0       	ldi	r24, 0x0B	; 11
	
	
	task temp[] = {controller, Pressure, Poll1, Poll2, Mag};
 af6:	fe 01       	movw	r30, r28
 af8:	33 96       	adiw	r30, 0x03	; 3
 afa:	de 01       	movw	r26, r28
 afc:	da 96       	adiw	r26, 0x3a	; 58
 afe:	01 90       	ld	r0, Z+
 b00:	0d 92       	st	X+, r0
 b02:	8a 95       	dec	r24
 b04:	e1 f7       	brne	.-8      	; 0xafe <main+0x13a>
 b06:	ce 01       	movw	r24, r28
 b08:	8b 5b       	subi	r24, 0xBB	; 187
 b0a:	9f 4f       	sbci	r25, 0xFF	; 255
 b0c:	2b e0       	ldi	r18, 0x0B	; 11
 b0e:	fe 01       	movw	r30, r28
 b10:	3e 96       	adiw	r30, 0x0e	; 14
 b12:	dc 01       	movw	r26, r24
 b14:	01 90       	ld	r0, Z+
 b16:	0d 92       	st	X+, r0
 b18:	2a 95       	dec	r18
 b1a:	e1 f7       	brne	.-8      	; 0xb14 <main+0x150>
 b1c:	ce 01       	movw	r24, r28
 b1e:	80 5b       	subi	r24, 0xB0	; 176
 b20:	9f 4f       	sbci	r25, 0xFF	; 255
 b22:	2b e0       	ldi	r18, 0x0B	; 11
 b24:	fe 01       	movw	r30, r28
 b26:	79 96       	adiw	r30, 0x19	; 25
 b28:	dc 01       	movw	r26, r24
 b2a:	01 90       	ld	r0, Z+
 b2c:	0d 92       	st	X+, r0
 b2e:	2a 95       	dec	r18
 b30:	e1 f7       	brne	.-8      	; 0xb2a <main+0x166>
 b32:	ce 01       	movw	r24, r28
 b34:	85 5a       	subi	r24, 0xA5	; 165
 b36:	9f 4f       	sbci	r25, 0xFF	; 255
 b38:	2b e0       	ldi	r18, 0x0B	; 11
 b3a:	fe 01       	movw	r30, r28
 b3c:	b4 96       	adiw	r30, 0x24	; 36
 b3e:	dc 01       	movw	r26, r24
 b40:	01 90       	ld	r0, Z+
 b42:	0d 92       	st	X+, r0
 b44:	2a 95       	dec	r18
 b46:	e1 f7       	brne	.-8      	; 0xb40 <main+0x17c>
 b48:	ce 01       	movw	r24, r28
 b4a:	8a 59       	subi	r24, 0x9A	; 154
 b4c:	9f 4f       	sbci	r25, 0xFF	; 255
 b4e:	2b e0       	ldi	r18, 0x0B	; 11
 b50:	fe 01       	movw	r30, r28
 b52:	bf 96       	adiw	r30, 0x2f	; 47
 b54:	dc 01       	movw	r26, r24
 b56:	01 90       	ld	r0, Z+
 b58:	0d 92       	st	X+, r0
 b5a:	2a 95       	dec	r18
 b5c:	e1 f7       	brne	.-8      	; 0xb56 <main+0x192>
 b5e:	ce 01       	movw	r24, r28
	tasks = &temp;
 b60:	ca 96       	adiw	r24, 0x3a	; 58
 b62:	90 93 18 01 	sts	0x0118, r25	; 0x800118 <tasks+0x1>
 b66:	80 93 17 01 	sts	0x0117, r24	; 0x800117 <tasks>
 b6a:	85 e0       	ldi	r24, 0x05	; 5
	tasksNum = 5;
 b6c:	80 93 13 01 	sts	0x0113, r24	; 0x800113 <tasksNum>
 b70:	1a 82       	std	Y+2, r1	; 0x02
	//task * temp[] = {Pressure};
		
	unsigned char selector = 0;
 b72:	ff cf       	rjmp	.-2      	; 0xb72 <main+0x1ae>

00000b74 <_exit>:
		//ADC_ON();
		//PORTB = ADC_SEND();
		//ADC_SELECT(selector);
		//selector++;
		//PORTB = presSens;
    }
 b74:	f8 94       	cli

00000b76 <__stop_program>:
 b76:	ff cf       	rjmp	.-2      	; 0xb76 <__stop_program>
