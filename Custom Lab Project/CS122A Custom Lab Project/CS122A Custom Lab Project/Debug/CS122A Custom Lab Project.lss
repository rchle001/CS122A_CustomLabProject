
CS122A Custom Lab Project.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000004  00800100  000012a8  0000133c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         000012a8  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000019  00800104  00800104  00001340  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00001340  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00001370  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000098  00000000  00000000  000013b0  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00001005  00000000  00000000  00001448  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000981  00000000  00000000  0000244d  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00000a44  00000000  00000000  00002dce  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  0000026c  00000000  00000000  00003814  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    000006a2  00000000  00000000  00003a80  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00000501  00000000  00000000  00004122  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000088  00000000  00000000  00004623  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	45 c0       	rjmp	.+138    	; 0x8c <__ctors_end>
       2:	00 00       	nop
       4:	61 c0       	rjmp	.+194    	; 0xc8 <__bad_interrupt>
       6:	00 00       	nop
       8:	5f c0       	rjmp	.+190    	; 0xc8 <__bad_interrupt>
       a:	00 00       	nop
       c:	5d c0       	rjmp	.+186    	; 0xc8 <__bad_interrupt>
       e:	00 00       	nop
      10:	5b c0       	rjmp	.+182    	; 0xc8 <__bad_interrupt>
      12:	00 00       	nop
      14:	59 c0       	rjmp	.+178    	; 0xc8 <__bad_interrupt>
      16:	00 00       	nop
      18:	57 c0       	rjmp	.+174    	; 0xc8 <__bad_interrupt>
      1a:	00 00       	nop
      1c:	55 c0       	rjmp	.+170    	; 0xc8 <__bad_interrupt>
      1e:	00 00       	nop
      20:	53 c0       	rjmp	.+166    	; 0xc8 <__bad_interrupt>
      22:	00 00       	nop
      24:	51 c0       	rjmp	.+162    	; 0xc8 <__bad_interrupt>
      26:	00 00       	nop
      28:	4f c0       	rjmp	.+158    	; 0xc8 <__bad_interrupt>
      2a:	00 00       	nop
      2c:	4d c0       	rjmp	.+154    	; 0xc8 <__bad_interrupt>
      2e:	00 00       	nop
      30:	4b c0       	rjmp	.+150    	; 0xc8 <__bad_interrupt>
      32:	00 00       	nop
      34:	30 c5       	rjmp	.+2656   	; 0xa96 <__vector_13>
      36:	00 00       	nop
      38:	47 c0       	rjmp	.+142    	; 0xc8 <__bad_interrupt>
      3a:	00 00       	nop
      3c:	45 c0       	rjmp	.+138    	; 0xc8 <__bad_interrupt>
      3e:	00 00       	nop
      40:	43 c0       	rjmp	.+134    	; 0xc8 <__bad_interrupt>
      42:	00 00       	nop
      44:	41 c0       	rjmp	.+130    	; 0xc8 <__bad_interrupt>
      46:	00 00       	nop
      48:	3f c0       	rjmp	.+126    	; 0xc8 <__bad_interrupt>
      4a:	00 00       	nop
      4c:	3d c0       	rjmp	.+122    	; 0xc8 <__bad_interrupt>
      4e:	00 00       	nop
      50:	3b c0       	rjmp	.+118    	; 0xc8 <__bad_interrupt>
      52:	00 00       	nop
      54:	39 c0       	rjmp	.+114    	; 0xc8 <__bad_interrupt>
      56:	00 00       	nop
      58:	37 c0       	rjmp	.+110    	; 0xc8 <__bad_interrupt>
      5a:	00 00       	nop
      5c:	35 c0       	rjmp	.+106    	; 0xc8 <__bad_interrupt>
      5e:	00 00       	nop
      60:	33 c0       	rjmp	.+102    	; 0xc8 <__bad_interrupt>
      62:	00 00       	nop
      64:	31 c0       	rjmp	.+98     	; 0xc8 <__bad_interrupt>
      66:	00 00       	nop
      68:	2f c0       	rjmp	.+94     	; 0xc8 <__bad_interrupt>
      6a:	00 00       	nop
      6c:	2d c0       	rjmp	.+90     	; 0xc8 <__bad_interrupt>
      6e:	00 00       	nop
      70:	2b c0       	rjmp	.+86     	; 0xc8 <__bad_interrupt>
      72:	00 00       	nop
      74:	29 c0       	rjmp	.+82     	; 0xc8 <__bad_interrupt>
      76:	00 00       	nop
      78:	27 c0       	rjmp	.+78     	; 0xc8 <__bad_interrupt>
      7a:	00 00       	nop
      7c:	25 c0       	rjmp	.+74     	; 0xc8 <__bad_interrupt>
      7e:	00 00       	nop
      80:	23 c0       	rjmp	.+70     	; 0xc8 <__bad_interrupt>
      82:	00 00       	nop
      84:	21 c0       	rjmp	.+66     	; 0xc8 <__bad_interrupt>
      86:	00 00       	nop
      88:	1f c0       	rjmp	.+62     	; 0xc8 <__bad_interrupt>
	...

0000008c <__ctors_end>:
      8c:	11 24       	eor	r1, r1
      8e:	1f be       	out	0x3f, r1	; 63
      90:	cf ef       	ldi	r28, 0xFF	; 255
      92:	d0 e4       	ldi	r29, 0x40	; 64
      94:	de bf       	out	0x3e, r29	; 62
      96:	cd bf       	out	0x3d, r28	; 61

00000098 <__do_copy_data>:
      98:	11 e0       	ldi	r17, 0x01	; 1
      9a:	a0 e0       	ldi	r26, 0x00	; 0
      9c:	b1 e0       	ldi	r27, 0x01	; 1
      9e:	e8 ea       	ldi	r30, 0xA8	; 168
      a0:	f2 e1       	ldi	r31, 0x12	; 18
      a2:	00 e0       	ldi	r16, 0x00	; 0
      a4:	0b bf       	out	0x3b, r16	; 59
      a6:	02 c0       	rjmp	.+4      	; 0xac <__do_copy_data+0x14>
      a8:	07 90       	elpm	r0, Z+
      aa:	0d 92       	st	X+, r0
      ac:	a4 30       	cpi	r26, 0x04	; 4
      ae:	b1 07       	cpc	r27, r17
      b0:	d9 f7       	brne	.-10     	; 0xa8 <__do_copy_data+0x10>

000000b2 <__do_clear_bss>:
      b2:	21 e0       	ldi	r18, 0x01	; 1
      b4:	a4 e0       	ldi	r26, 0x04	; 4
      b6:	b1 e0       	ldi	r27, 0x01	; 1
      b8:	01 c0       	rjmp	.+2      	; 0xbc <.do_clear_bss_start>

000000ba <.do_clear_bss_loop>:
      ba:	1d 92       	st	X+, r1

000000bc <.do_clear_bss_start>:
      bc:	ad 31       	cpi	r26, 0x1D	; 29
      be:	b2 07       	cpc	r27, r18
      c0:	e1 f7       	brne	.-8      	; 0xba <.do_clear_bss_loop>
      c2:	ff d6       	rcall	.+3582   	; 0xec2 <main>
      c4:	0c 94 52 09 	jmp	0x12a4	; 0x12a4 <_exit>

000000c8 <__bad_interrupt>:
      c8:	9b cf       	rjmp	.-202    	; 0x0 <__vectors>

000000ca <ADC_ON>:
	{
	}
	else{
	magX = magTL; // temporary
	}
}
      ca:	cf 93       	push	r28
      cc:	df 93       	push	r29
      ce:	cd b7       	in	r28, 0x3d	; 61
      d0:	de b7       	in	r29, 0x3e	; 62
      d2:	8c e7       	ldi	r24, 0x7C	; 124
      d4:	90 e0       	ldi	r25, 0x00	; 0
      d6:	20 91 05 01 	lds	r18, 0x0105	; 0x800105 <muxselect>
      da:	fc 01       	movw	r30, r24
      dc:	20 83       	st	Z, r18
      de:	8a e7       	ldi	r24, 0x7A	; 122
      e0:	90 e0       	ldi	r25, 0x00	; 0
      e2:	20 ec       	ldi	r18, 0xC0	; 192
      e4:	fc 01       	movw	r30, r24
      e6:	20 83       	st	Z, r18
      e8:	00 00       	nop
      ea:	df 91       	pop	r29
      ec:	cf 91       	pop	r28
      ee:	08 95       	ret

000000f0 <ADC_SELECT>:
      f0:	cf 93       	push	r28
      f2:	df 93       	push	r29
      f4:	1f 92       	push	r1
      f6:	cd b7       	in	r28, 0x3d	; 61
      f8:	de b7       	in	r29, 0x3e	; 62
      fa:	89 83       	std	Y+1, r24	; 0x01
      fc:	89 81       	ldd	r24, Y+1	; 0x01
      fe:	88 30       	cpi	r24, 0x08	; 8
     100:	58 f4       	brcc	.+22     	; 0x118 <ADC_SELECT+0x28>
     102:	89 81       	ldd	r24, Y+1	; 0x01
     104:	80 93 05 01 	sts	0x0105, r24	; 0x800105 <muxselect>
     108:	0c d0       	rcall	.+24     	; 0x122 <ADC_OFF>
     10a:	8c e7       	ldi	r24, 0x7C	; 124
     10c:	90 e0       	ldi	r25, 0x00	; 0
     10e:	20 91 05 01 	lds	r18, 0x0105	; 0x800105 <muxselect>
     112:	fc 01       	movw	r30, r24
     114:	20 83       	st	Z, r18
     116:	d9 df       	rcall	.-78     	; 0xca <ADC_ON>
     118:	00 00       	nop
     11a:	0f 90       	pop	r0
     11c:	df 91       	pop	r29
     11e:	cf 91       	pop	r28
     120:	08 95       	ret

00000122 <ADC_OFF>:
     122:	cf 93       	push	r28
     124:	df 93       	push	r29
     126:	cd b7       	in	r28, 0x3d	; 61
     128:	de b7       	in	r29, 0x3e	; 62
     12a:	8a e7       	ldi	r24, 0x7A	; 122
     12c:	90 e0       	ldi	r25, 0x00	; 0
     12e:	2f ef       	ldi	r18, 0xFF	; 255
     130:	fc 01       	movw	r30, r24
     132:	20 83       	st	Z, r18
     134:	00 00       	nop
     136:	df 91       	pop	r29
     138:	cf 91       	pop	r28
     13a:	08 95       	ret

0000013c <ADC_SEND>:
     13c:	cf 93       	push	r28
     13e:	df 93       	push	r29
     140:	cd b7       	in	r28, 0x3d	; 61
     142:	de b7       	in	r29, 0x3e	; 62
     144:	88 e7       	ldi	r24, 0x78	; 120
     146:	90 e0       	ldi	r25, 0x00	; 0
     148:	fc 01       	movw	r30, r24
     14a:	80 81       	ld	r24, Z
     14c:	91 81       	ldd	r25, Z+1	; 0x01
     14e:	9c 01       	movw	r18, r24
     150:	a1 ef       	ldi	r26, 0xF1	; 241
     152:	b0 ef       	ldi	r27, 0xF0	; 240
     154:	0e 94 43 09 	call	0x1286	; 0x1286 <__umulhisi3>
     158:	00 24       	eor	r0, r0
     15a:	88 0f       	add	r24, r24
     15c:	99 1f       	adc	r25, r25
     15e:	00 1c       	adc	r0, r0
     160:	88 0f       	add	r24, r24
     162:	99 1f       	adc	r25, r25
     164:	00 1c       	adc	r0, r0
     166:	89 2f       	mov	r24, r25
     168:	90 2d       	mov	r25, r0
     16a:	df 91       	pop	r29
     16c:	cf 91       	pop	r28
     16e:	08 95       	ret

00000170 <PRESSENSE_task>:
#define PRESSENS_H

enum PRESSENS{presStart, presSample, presOff} pressense_state;

int PRESSENSE_task(int state)
{
     170:	cf 93       	push	r28
     172:	df 93       	push	r29
     174:	cd b7       	in	r28, 0x3d	; 61
     176:	de b7       	in	r29, 0x3e	; 62
     178:	60 97       	sbiw	r28, 0x10	; 16
     17a:	0f b6       	in	r0, 0x3f	; 63
     17c:	f8 94       	cli
     17e:	de bf       	out	0x3e, r29	; 62
     180:	0f be       	out	0x3f, r0	; 63
     182:	cd bf       	out	0x3d, r28	; 61
     184:	98 8b       	std	Y+16, r25	; 0x10
     186:	8f 87       	std	Y+15, r24	; 0x0f
	switch (state)
     188:	8f 85       	ldd	r24, Y+15	; 0x0f
     18a:	98 89       	ldd	r25, Y+16	; 0x10
     18c:	81 30       	cpi	r24, 0x01	; 1
     18e:	91 05       	cpc	r25, r1
     190:	81 f0       	breq	.+32     	; 0x1b2 <PRESSENSE_task+0x42>
     192:	82 30       	cpi	r24, 0x02	; 2
     194:	91 05       	cpc	r25, r1
     196:	41 f0       	breq	.+16     	; 0x1a8 <PRESSENSE_task+0x38>
     198:	89 2b       	or	r24, r25
     19a:	81 f4       	brne	.+32     	; 0x1bc <PRESSENSE_task+0x4c>
	{
		case presStart:
			state = presSample;
     19c:	81 e0       	ldi	r24, 0x01	; 1
     19e:	90 e0       	ldi	r25, 0x00	; 0
     1a0:	98 8b       	std	Y+16, r25	; 0x10
     1a2:	8f 87       	std	Y+15, r24	; 0x0f
			ADC_ON();
     1a4:	92 df       	rcall	.-220    	; 0xca <ADC_ON>
			break;
     1a6:	0d c0       	rjmp	.+26     	; 0x1c2 <PRESSENSE_task+0x52>
		
		case presOff:
			state = presOff;
     1a8:	82 e0       	ldi	r24, 0x02	; 2
     1aa:	90 e0       	ldi	r25, 0x00	; 0
     1ac:	98 8b       	std	Y+16, r25	; 0x10
     1ae:	8f 87       	std	Y+15, r24	; 0x0f
			break;
     1b0:	08 c0       	rjmp	.+16     	; 0x1c2 <PRESSENSE_task+0x52>
		
		case presSample:
			state = presSample;
     1b2:	81 e0       	ldi	r24, 0x01	; 1
     1b4:	90 e0       	ldi	r25, 0x00	; 0
     1b6:	98 8b       	std	Y+16, r25	; 0x10
     1b8:	8f 87       	std	Y+15, r24	; 0x0f
			break;
     1ba:	03 c0       	rjmp	.+6      	; 0x1c2 <PRESSENSE_task+0x52>
			
		default:
			state = presStart;
     1bc:	18 8a       	std	Y+16, r1	; 0x10
     1be:	1f 86       	std	Y+15, r1	; 0x0f
			break;
     1c0:	00 00       	nop
	}
	switch (state)
     1c2:	8f 85       	ldd	r24, Y+15	; 0x0f
     1c4:	98 89       	ldd	r25, Y+16	; 0x10
     1c6:	81 30       	cpi	r24, 0x01	; 1
     1c8:	91 05       	cpc	r25, r1
     1ca:	49 f0       	breq	.+18     	; 0x1de <PRESSENSE_task+0x6e>
     1cc:	82 30       	cpi	r24, 0x02	; 2
     1ce:	91 05       	cpc	r25, r1
     1d0:	21 f0       	breq	.+8      	; 0x1da <PRESSENSE_task+0x6a>
     1d2:	89 2b       	or	r24, r25
     1d4:	09 f4       	brne	.+2      	; 0x1d8 <PRESSENSE_task+0x68>
     1d6:	78 c0       	rjmp	.+240    	; 0x2c8 <PRESSENSE_task+0x158>
	{
		case presStart:
			break;
		
		case presOff:
			ADC_OFF();
     1d8:	78 c0       	rjmp	.+240    	; 0x2ca <PRESSENSE_task+0x15a>
     1da:	a3 df       	rcall	.-186    	; 0x122 <ADC_OFF>
			break;
		
		case presSample:
			ADC_SELECT(0);
     1dc:	76 c0       	rjmp	.+236    	; 0x2ca <PRESSENSE_task+0x15a>
     1de:	80 e0       	ldi	r24, 0x00	; 0
     1e0:	87 df       	rcall	.-242    	; 0xf0 <ADC_SELECT>
     1e2:	80 e0       	ldi	r24, 0x00	; 0
     1e4:	90 e0       	ldi	r25, 0x00	; 0
     1e6:	a0 e8       	ldi	r26, 0x80	; 128
     1e8:	bf e3       	ldi	r27, 0x3F	; 63
     1ea:	89 83       	std	Y+1, r24	; 0x01
     1ec:	9a 83       	std	Y+2, r25	; 0x02
     1ee:	ab 83       	std	Y+3, r26	; 0x03
     1f0:	bc 83       	std	Y+4, r27	; 0x04

	__builtin_avr_delay_cycles(__ticks_dc);

#else
	uint16_t __ticks;
	__tmp = ((F_CPU) / 4e3) * __ms;
     1f2:	20 e0       	ldi	r18, 0x00	; 0
     1f4:	30 e0       	ldi	r19, 0x00	; 0
     1f6:	4a ef       	ldi	r20, 0xFA	; 250
     1f8:	54 e4       	ldi	r21, 0x44	; 68
     1fa:	69 81       	ldd	r22, Y+1	; 0x01
     1fc:	7a 81       	ldd	r23, Y+2	; 0x02
     1fe:	8b 81       	ldd	r24, Y+3	; 0x03
     200:	9c 81       	ldd	r25, Y+4	; 0x04
     202:	b6 d7       	rcall	.+3948   	; 0x1170 <__mulsf3>
     204:	dc 01       	movw	r26, r24
     206:	cb 01       	movw	r24, r22
     208:	8d 83       	std	Y+5, r24	; 0x05
     20a:	9e 83       	std	Y+6, r25	; 0x06
     20c:	af 83       	std	Y+7, r26	; 0x07
     20e:	b8 87       	std	Y+8, r27	; 0x08
	if (__tmp < 1.0)
     210:	20 e0       	ldi	r18, 0x00	; 0
     212:	30 e0       	ldi	r19, 0x00	; 0
     214:	40 e8       	ldi	r20, 0x80	; 128
     216:	5f e3       	ldi	r21, 0x3F	; 63
     218:	6d 81       	ldd	r22, Y+5	; 0x05
     21a:	7e 81       	ldd	r23, Y+6	; 0x06
     21c:	8f 81       	ldd	r24, Y+7	; 0x07
     21e:	98 85       	ldd	r25, Y+8	; 0x08
     220:	26 d7       	rcall	.+3660   	; 0x106e <__cmpsf2>
     222:	88 23       	and	r24, r24
     224:	2c f4       	brge	.+10     	; 0x230 <PRESSENSE_task+0xc0>
		__ticks = 1;
     226:	81 e0       	ldi	r24, 0x01	; 1
     228:	90 e0       	ldi	r25, 0x00	; 0
     22a:	9a 87       	std	Y+10, r25	; 0x0a
     22c:	89 87       	std	Y+9, r24	; 0x09
     22e:	3b c0       	rjmp	.+118    	; 0x2a6 <PRESSENSE_task+0x136>
	else if (__tmp > 65535)
     230:	20 e0       	ldi	r18, 0x00	; 0
     232:	3f ef       	ldi	r19, 0xFF	; 255
     234:	4f e7       	ldi	r20, 0x7F	; 127
     236:	57 e4       	ldi	r21, 0x47	; 71
     238:	6d 81       	ldd	r22, Y+5	; 0x05
     23a:	7e 81       	ldd	r23, Y+6	; 0x06
     23c:	8f 81       	ldd	r24, Y+7	; 0x07
     23e:	98 85       	ldd	r25, Y+8	; 0x08
     240:	93 d7       	rcall	.+3878   	; 0x1168 <__gesf2>
     242:	18 16       	cp	r1, r24
     244:	3c f5       	brge	.+78     	; 0x294 <PRESSENSE_task+0x124>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
     246:	20 e0       	ldi	r18, 0x00	; 0
     248:	30 e0       	ldi	r19, 0x00	; 0
     24a:	40 e2       	ldi	r20, 0x20	; 32
     24c:	51 e4       	ldi	r21, 0x41	; 65
     24e:	69 81       	ldd	r22, Y+1	; 0x01
     250:	7a 81       	ldd	r23, Y+2	; 0x02
     252:	8b 81       	ldd	r24, Y+3	; 0x03
     254:	9c 81       	ldd	r25, Y+4	; 0x04
     256:	8c d7       	rcall	.+3864   	; 0x1170 <__mulsf3>
     258:	dc 01       	movw	r26, r24
     25a:	cb 01       	movw	r24, r22
     25c:	bc 01       	movw	r22, r24
     25e:	cd 01       	movw	r24, r26
     260:	0a d7       	rcall	.+3604   	; 0x1076 <__fixunssfsi>
     262:	dc 01       	movw	r26, r24
     264:	cb 01       	movw	r24, r22
     266:	9a 87       	std	Y+10, r25	; 0x0a
     268:	89 87       	std	Y+9, r24	; 0x09
     26a:	0f c0       	rjmp	.+30     	; 0x28a <PRESSENSE_task+0x11a>
     26c:	88 ec       	ldi	r24, 0xC8	; 200
     26e:	90 e0       	ldi	r25, 0x00	; 0
     270:	9c 87       	std	Y+12, r25	; 0x0c
     272:	8b 87       	std	Y+11, r24	; 0x0b
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
     274:	8b 85       	ldd	r24, Y+11	; 0x0b
     276:	9c 85       	ldd	r25, Y+12	; 0x0c
     278:	01 97       	sbiw	r24, 0x01	; 1
     27a:	f1 f7       	brne	.-4      	; 0x278 <PRESSENSE_task+0x108>
     27c:	9c 87       	std	Y+12, r25	; 0x0c
     27e:	8b 87       	std	Y+11, r24	; 0x0b
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     280:	89 85       	ldd	r24, Y+9	; 0x09
     282:	9a 85       	ldd	r25, Y+10	; 0x0a
     284:	01 97       	sbiw	r24, 0x01	; 1
     286:	9a 87       	std	Y+10, r25	; 0x0a
     288:	89 87       	std	Y+9, r24	; 0x09
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     28a:	89 85       	ldd	r24, Y+9	; 0x09
     28c:	9a 85       	ldd	r25, Y+10	; 0x0a
     28e:	89 2b       	or	r24, r25
     290:	69 f7       	brne	.-38     	; 0x26c <PRESSENSE_task+0xfc>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
     292:	13 c0       	rjmp	.+38     	; 0x2ba <PRESSENSE_task+0x14a>
     294:	6d 81       	ldd	r22, Y+5	; 0x05
     296:	7e 81       	ldd	r23, Y+6	; 0x06
     298:	8f 81       	ldd	r24, Y+7	; 0x07
     29a:	98 85       	ldd	r25, Y+8	; 0x08
     29c:	ec d6       	rcall	.+3544   	; 0x1076 <__fixunssfsi>
     29e:	dc 01       	movw	r26, r24
     2a0:	cb 01       	movw	r24, r22
     2a2:	9a 87       	std	Y+10, r25	; 0x0a
     2a4:	89 87       	std	Y+9, r24	; 0x09
     2a6:	89 85       	ldd	r24, Y+9	; 0x09
     2a8:	9a 85       	ldd	r25, Y+10	; 0x0a
     2aa:	9e 87       	std	Y+14, r25	; 0x0e
     2ac:	8d 87       	std	Y+13, r24	; 0x0d
     2ae:	8d 85       	ldd	r24, Y+13	; 0x0d
     2b0:	9e 85       	ldd	r25, Y+14	; 0x0e
     2b2:	01 97       	sbiw	r24, 0x01	; 1
     2b4:	f1 f7       	brne	.-4      	; 0x2b2 <PRESSENSE_task+0x142>
     2b6:	9e 87       	std	Y+14, r25	; 0x0e
			_delay_ms(1);
			presSens = 15 - ADC_SEND();
     2b8:	8d 87       	std	Y+13, r24	; 0x0d
     2ba:	40 df       	rcall	.-384    	; 0x13c <ADC_SEND>
     2bc:	98 2f       	mov	r25, r24
     2be:	8f e0       	ldi	r24, 0x0F	; 15
     2c0:	89 1b       	sub	r24, r25
     2c2:	80 93 04 01 	sts	0x0104, r24	; 0x800104 <__data_end>
			break;
     2c6:	01 c0       	rjmp	.+2      	; 0x2ca <PRESSENSE_task+0x15a>
			break;
	}
	switch (state)
	{
		case presStart:
			break;
     2c8:	00 00       	nop
			break;
		
		default:
			break;
	}
	return state;
     2ca:	8f 85       	ldd	r24, Y+15	; 0x0f
     2cc:	98 89       	ldd	r25, Y+16	; 0x10
}
     2ce:	60 96       	adiw	r28, 0x10	; 16
     2d0:	0f b6       	in	r0, 0x3f	; 63
     2d2:	f8 94       	cli
     2d4:	de bf       	out	0x3e, r29	; 62
     2d6:	0f be       	out	0x3f, r0	; 63
     2d8:	cd bf       	out	0x3d, r28	; 61
     2da:	df 91       	pop	r29
     2dc:	cf 91       	pop	r28
     2de:	08 95       	ret

000002e0 <magSense_task>:
#define MAGSENS_H

enum magSense {magStart, magRead, magOff} magSense_state;

int magSense_task(int state)
{
     2e0:	0f 93       	push	r16
     2e2:	1f 93       	push	r17
     2e4:	cf 93       	push	r28
     2e6:	df 93       	push	r29
     2e8:	cd b7       	in	r28, 0x3d	; 61
     2ea:	de b7       	in	r29, 0x3e	; 62
     2ec:	c8 54       	subi	r28, 0x48	; 72
     2ee:	d1 09       	sbc	r29, r1
     2f0:	0f b6       	in	r0, 0x3f	; 63
     2f2:	f8 94       	cli
     2f4:	de bf       	out	0x3e, r29	; 62
     2f6:	0f be       	out	0x3f, r0	; 63
     2f8:	cd bf       	out	0x3d, r28	; 61
     2fa:	9e 01       	movw	r18, r28
     2fc:	29 5b       	subi	r18, 0xB9	; 185
     2fe:	3f 4f       	sbci	r19, 0xFF	; 255
     300:	f9 01       	movw	r30, r18
     302:	91 83       	std	Z+1, r25	; 0x01
     304:	80 83       	st	Z, r24
	switch(state)
     306:	ce 01       	movw	r24, r28
     308:	89 5b       	subi	r24, 0xB9	; 185
     30a:	9f 4f       	sbci	r25, 0xFF	; 255
     30c:	fc 01       	movw	r30, r24
     30e:	80 81       	ld	r24, Z
     310:	91 81       	ldd	r25, Z+1	; 0x01
     312:	81 30       	cpi	r24, 0x01	; 1
     314:	91 05       	cpc	r25, r1
     316:	81 f0       	breq	.+32     	; 0x338 <magSense_task+0x58>
     318:	82 30       	cpi	r24, 0x02	; 2
     31a:	91 05       	cpc	r25, r1
     31c:	09 f4       	brne	.+2      	; 0x320 <magSense_task+0x40>
     31e:	94 c2       	rjmp	.+1320   	; 0x848 <__LOCK_REGION_LENGTH__+0x448>
     320:	89 2b       	or	r24, r25
     322:	09 f0       	breq	.+2      	; 0x326 <magSense_task+0x46>
     324:	9a c2       	rjmp	.+1332   	; 0x85a <__LOCK_REGION_LENGTH__+0x45a>
	{
		case magStart:
			state = magRead;
     326:	ce 01       	movw	r24, r28
     328:	89 5b       	subi	r24, 0xB9	; 185
     32a:	9f 4f       	sbci	r25, 0xFF	; 255
     32c:	21 e0       	ldi	r18, 0x01	; 1
     32e:	30 e0       	ldi	r19, 0x00	; 0
     330:	fc 01       	movw	r30, r24
     332:	31 83       	std	Z+1, r19	; 0x01
     334:	20 83       	st	Z, r18
			break;
     336:	98 c2       	rjmp	.+1328   	; 0x868 <__LOCK_REGION_LENGTH__+0x468>
		
		case magRead:
			state = magRead;
     338:	ce 01       	movw	r24, r28
     33a:	89 5b       	subi	r24, 0xB9	; 185
     33c:	9f 4f       	sbci	r25, 0xFF	; 255
     33e:	21 e0       	ldi	r18, 0x01	; 1
     340:	30 e0       	ldi	r19, 0x00	; 0
     342:	fc 01       	movw	r30, r24
     344:	31 83       	std	Z+1, r19	; 0x01
     346:	20 83       	st	Z, r18
			ADC_SELECT(1);
     348:	81 e0       	ldi	r24, 0x01	; 1
     34a:	d2 de       	rcall	.-604    	; 0xf0 <ADC_SELECT>
     34c:	80 e0       	ldi	r24, 0x00	; 0
     34e:	90 e0       	ldi	r25, 0x00	; 0
     350:	a0 e8       	ldi	r26, 0x80	; 128
     352:	bf e3       	ldi	r27, 0x3F	; 63
     354:	89 83       	std	Y+1, r24	; 0x01
     356:	9a 83       	std	Y+2, r25	; 0x02
     358:	ab 83       	std	Y+3, r26	; 0x03
     35a:	bc 83       	std	Y+4, r27	; 0x04

	__builtin_avr_delay_cycles(__ticks_dc);

#else
	uint16_t __ticks;
	__tmp = ((F_CPU) / 4e3) * __ms;
     35c:	20 e0       	ldi	r18, 0x00	; 0
     35e:	30 e0       	ldi	r19, 0x00	; 0
     360:	4a ef       	ldi	r20, 0xFA	; 250
     362:	54 e4       	ldi	r21, 0x44	; 68
     364:	69 81       	ldd	r22, Y+1	; 0x01
     366:	7a 81       	ldd	r23, Y+2	; 0x02
     368:	8b 81       	ldd	r24, Y+3	; 0x03
     36a:	9c 81       	ldd	r25, Y+4	; 0x04
     36c:	01 d7       	rcall	.+3586   	; 0x1170 <__mulsf3>
     36e:	dc 01       	movw	r26, r24
     370:	cb 01       	movw	r24, r22
     372:	9e 01       	movw	r18, r28
     374:	23 5c       	subi	r18, 0xC3	; 195
     376:	3f 4f       	sbci	r19, 0xFF	; 255
     378:	f9 01       	movw	r30, r18
     37a:	80 83       	st	Z, r24
     37c:	91 83       	std	Z+1, r25	; 0x01
     37e:	a2 83       	std	Z+2, r26	; 0x02
     380:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
     382:	20 e0       	ldi	r18, 0x00	; 0
     384:	30 e0       	ldi	r19, 0x00	; 0
     386:	40 e8       	ldi	r20, 0x80	; 128
     388:	5f e3       	ldi	r21, 0x3F	; 63
     38a:	ce 01       	movw	r24, r28
     38c:	cd 96       	adiw	r24, 0x3d	; 61
     38e:	fc 01       	movw	r30, r24
     390:	60 81       	ld	r22, Z
     392:	71 81       	ldd	r23, Z+1	; 0x01
     394:	82 81       	ldd	r24, Z+2	; 0x02
     396:	93 81       	ldd	r25, Z+3	; 0x03
     398:	6a d6       	rcall	.+3284   	; 0x106e <__cmpsf2>
     39a:	88 23       	and	r24, r24
     39c:	4c f4       	brge	.+18     	; 0x3b0 <magSense_task+0xd0>
		__ticks = 1;
     39e:	ce 01       	movw	r24, r28
     3a0:	8f 5b       	subi	r24, 0xBF	; 191
     3a2:	9f 4f       	sbci	r25, 0xFF	; 255
     3a4:	21 e0       	ldi	r18, 0x01	; 1
     3a6:	30 e0       	ldi	r19, 0x00	; 0
     3a8:	fc 01       	movw	r30, r24
     3aa:	31 83       	std	Z+1, r19	; 0x01
     3ac:	20 83       	st	Z, r18
     3ae:	63 c0       	rjmp	.+198    	; 0x476 <__LOCK_REGION_LENGTH__+0x76>
	else if (__tmp > 65535)
     3b0:	20 e0       	ldi	r18, 0x00	; 0
     3b2:	3f ef       	ldi	r19, 0xFF	; 255
     3b4:	4f e7       	ldi	r20, 0x7F	; 127
     3b6:	57 e4       	ldi	r21, 0x47	; 71
     3b8:	ce 01       	movw	r24, r28
     3ba:	cd 96       	adiw	r24, 0x3d	; 61
     3bc:	fc 01       	movw	r30, r24
     3be:	60 81       	ld	r22, Z
     3c0:	71 81       	ldd	r23, Z+1	; 0x01
     3c2:	82 81       	ldd	r24, Z+2	; 0x02
     3c4:	93 81       	ldd	r25, Z+3	; 0x03
     3c6:	d0 d6       	rcall	.+3488   	; 0x1168 <__gesf2>
     3c8:	18 16       	cp	r1, r24
     3ca:	0c f0       	brlt	.+2      	; 0x3ce <magSense_task+0xee>
     3cc:	44 c0       	rjmp	.+136    	; 0x456 <__LOCK_REGION_LENGTH__+0x56>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
     3ce:	20 e0       	ldi	r18, 0x00	; 0
     3d0:	30 e0       	ldi	r19, 0x00	; 0
     3d2:	40 e2       	ldi	r20, 0x20	; 32
     3d4:	51 e4       	ldi	r21, 0x41	; 65
     3d6:	69 81       	ldd	r22, Y+1	; 0x01
     3d8:	7a 81       	ldd	r23, Y+2	; 0x02
     3da:	8b 81       	ldd	r24, Y+3	; 0x03
     3dc:	9c 81       	ldd	r25, Y+4	; 0x04
     3de:	c8 d6       	rcall	.+3472   	; 0x1170 <__mulsf3>
     3e0:	dc 01       	movw	r26, r24
     3e2:	cb 01       	movw	r24, r22
     3e4:	8e 01       	movw	r16, r28
     3e6:	0f 5b       	subi	r16, 0xBF	; 191
     3e8:	1f 4f       	sbci	r17, 0xFF	; 255
     3ea:	bc 01       	movw	r22, r24
     3ec:	cd 01       	movw	r24, r26
     3ee:	43 d6       	rcall	.+3206   	; 0x1076 <__fixunssfsi>
     3f0:	dc 01       	movw	r26, r24
     3f2:	cb 01       	movw	r24, r22
     3f4:	f8 01       	movw	r30, r16
     3f6:	91 83       	std	Z+1, r25	; 0x01
     3f8:	80 83       	st	Z, r24
     3fa:	24 c0       	rjmp	.+72     	; 0x444 <__LOCK_REGION_LENGTH__+0x44>
     3fc:	ce 01       	movw	r24, r28
     3fe:	8d 5b       	subi	r24, 0xBD	; 189
     400:	9f 4f       	sbci	r25, 0xFF	; 255
     402:	28 ec       	ldi	r18, 0xC8	; 200
     404:	30 e0       	ldi	r19, 0x00	; 0
     406:	fc 01       	movw	r30, r24
     408:	31 83       	std	Z+1, r19	; 0x01
     40a:	20 83       	st	Z, r18
     40c:	ce 01       	movw	r24, r28
     40e:	8d 5b       	subi	r24, 0xBD	; 189
     410:	9f 4f       	sbci	r25, 0xFF	; 255
     412:	fc 01       	movw	r30, r24
     414:	80 81       	ld	r24, Z
     416:	91 81       	ldd	r25, Z+1	; 0x01
     418:	01 97       	sbiw	r24, 0x01	; 1
     41a:	f1 f7       	brne	.-4      	; 0x418 <__LOCK_REGION_LENGTH__+0x18>
     41c:	9e 01       	movw	r18, r28
     41e:	2d 5b       	subi	r18, 0xBD	; 189
     420:	3f 4f       	sbci	r19, 0xFF	; 255
     422:	f9 01       	movw	r30, r18
     424:	91 83       	std	Z+1, r25	; 0x01
     426:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     428:	ce 01       	movw	r24, r28
     42a:	8f 5b       	subi	r24, 0xBF	; 191
     42c:	9f 4f       	sbci	r25, 0xFF	; 255
     42e:	9e 01       	movw	r18, r28
     430:	2f 5b       	subi	r18, 0xBF	; 191
     432:	3f 4f       	sbci	r19, 0xFF	; 255
     434:	f9 01       	movw	r30, r18
     436:	20 81       	ld	r18, Z
     438:	31 81       	ldd	r19, Z+1	; 0x01
     43a:	21 50       	subi	r18, 0x01	; 1
     43c:	31 09       	sbc	r19, r1
     43e:	fc 01       	movw	r30, r24
     440:	31 83       	std	Z+1, r19	; 0x01
     442:	20 83       	st	Z, r18
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     444:	ce 01       	movw	r24, r28
     446:	8f 5b       	subi	r24, 0xBF	; 191
     448:	9f 4f       	sbci	r25, 0xFF	; 255
     44a:	fc 01       	movw	r30, r24
     44c:	80 81       	ld	r24, Z
     44e:	91 81       	ldd	r25, Z+1	; 0x01
     450:	89 2b       	or	r24, r25
     452:	a1 f6       	brne	.-88     	; 0x3fc <magSense_task+0x11c>
     454:	2a c0       	rjmp	.+84     	; 0x4aa <__LOCK_REGION_LENGTH__+0xaa>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
     456:	8e 01       	movw	r16, r28
     458:	0f 5b       	subi	r16, 0xBF	; 191
     45a:	1f 4f       	sbci	r17, 0xFF	; 255
     45c:	ce 01       	movw	r24, r28
     45e:	cd 96       	adiw	r24, 0x3d	; 61
     460:	fc 01       	movw	r30, r24
     462:	60 81       	ld	r22, Z
     464:	71 81       	ldd	r23, Z+1	; 0x01
     466:	82 81       	ldd	r24, Z+2	; 0x02
     468:	93 81       	ldd	r25, Z+3	; 0x03
     46a:	05 d6       	rcall	.+3082   	; 0x1076 <__fixunssfsi>
     46c:	dc 01       	movw	r26, r24
     46e:	cb 01       	movw	r24, r22
     470:	f8 01       	movw	r30, r16
     472:	91 83       	std	Z+1, r25	; 0x01
     474:	80 83       	st	Z, r24
     476:	ce 01       	movw	r24, r28
     478:	8b 5b       	subi	r24, 0xBB	; 187
     47a:	9f 4f       	sbci	r25, 0xFF	; 255
     47c:	9e 01       	movw	r18, r28
     47e:	2f 5b       	subi	r18, 0xBF	; 191
     480:	3f 4f       	sbci	r19, 0xFF	; 255
     482:	f9 01       	movw	r30, r18
     484:	20 81       	ld	r18, Z
     486:	31 81       	ldd	r19, Z+1	; 0x01
     488:	fc 01       	movw	r30, r24
     48a:	31 83       	std	Z+1, r19	; 0x01
     48c:	20 83       	st	Z, r18
     48e:	ce 01       	movw	r24, r28
     490:	8b 5b       	subi	r24, 0xBB	; 187
     492:	9f 4f       	sbci	r25, 0xFF	; 255
     494:	fc 01       	movw	r30, r24
     496:	80 81       	ld	r24, Z
     498:	91 81       	ldd	r25, Z+1	; 0x01
     49a:	01 97       	sbiw	r24, 0x01	; 1
     49c:	f1 f7       	brne	.-4      	; 0x49a <__LOCK_REGION_LENGTH__+0x9a>
     49e:	9e 01       	movw	r18, r28
     4a0:	2b 5b       	subi	r18, 0xBB	; 187
     4a2:	3f 4f       	sbci	r19, 0xFF	; 255
     4a4:	f9 01       	movw	r30, r18
     4a6:	91 83       	std	Z+1, r25	; 0x01
			_delay_ms(1);
			magTL = 15 - ADC_SEND();
     4a8:	80 83       	st	Z, r24
     4aa:	48 de       	rcall	.-880    	; 0x13c <ADC_SEND>
     4ac:	98 2f       	mov	r25, r24
     4ae:	8f e0       	ldi	r24, 0x0F	; 15
     4b0:	89 1b       	sub	r24, r25
     4b2:	80 93 08 01 	sts	0x0108, r24	; 0x800108 <magTL>
			ADC_SELECT(2);
     4b6:	82 e0       	ldi	r24, 0x02	; 2
     4b8:	1b de       	rcall	.-970    	; 0xf0 <ADC_SELECT>
     4ba:	80 e0       	ldi	r24, 0x00	; 0
     4bc:	90 e0       	ldi	r25, 0x00	; 0
     4be:	a0 e8       	ldi	r26, 0x80	; 128
     4c0:	bf e3       	ldi	r27, 0x3F	; 63
     4c2:	8d 83       	std	Y+5, r24	; 0x05
     4c4:	9e 83       	std	Y+6, r25	; 0x06
     4c6:	af 83       	std	Y+7, r26	; 0x07

	__builtin_avr_delay_cycles(__ticks_dc);

#else
	uint16_t __ticks;
	__tmp = ((F_CPU) / 4e3) * __ms;
     4c8:	b8 87       	std	Y+8, r27	; 0x08
     4ca:	20 e0       	ldi	r18, 0x00	; 0
     4cc:	30 e0       	ldi	r19, 0x00	; 0
     4ce:	4a ef       	ldi	r20, 0xFA	; 250
     4d0:	54 e4       	ldi	r21, 0x44	; 68
     4d2:	6d 81       	ldd	r22, Y+5	; 0x05
     4d4:	7e 81       	ldd	r23, Y+6	; 0x06
     4d6:	8f 81       	ldd	r24, Y+7	; 0x07
     4d8:	98 85       	ldd	r25, Y+8	; 0x08
     4da:	4a d6       	rcall	.+3220   	; 0x1170 <__mulsf3>
     4dc:	dc 01       	movw	r26, r24
     4de:	cb 01       	movw	r24, r22
     4e0:	8b ab       	std	Y+51, r24	; 0x33
     4e2:	9c ab       	std	Y+52, r25	; 0x34
     4e4:	ad ab       	std	Y+53, r26	; 0x35
	if (__tmp < 1.0)
     4e6:	be ab       	std	Y+54, r27	; 0x36
     4e8:	20 e0       	ldi	r18, 0x00	; 0
     4ea:	30 e0       	ldi	r19, 0x00	; 0
     4ec:	40 e8       	ldi	r20, 0x80	; 128
     4ee:	5f e3       	ldi	r21, 0x3F	; 63
     4f0:	6b a9       	ldd	r22, Y+51	; 0x33
     4f2:	7c a9       	ldd	r23, Y+52	; 0x34
     4f4:	8d a9       	ldd	r24, Y+53	; 0x35
     4f6:	9e a9       	ldd	r25, Y+54	; 0x36
     4f8:	ba d5       	rcall	.+2932   	; 0x106e <__cmpsf2>
     4fa:	88 23       	and	r24, r24
     4fc:	2c f4       	brge	.+10     	; 0x508 <__LOCK_REGION_LENGTH__+0x108>
		__ticks = 1;
     4fe:	81 e0       	ldi	r24, 0x01	; 1
     500:	90 e0       	ldi	r25, 0x00	; 0
     502:	98 af       	std	Y+56, r25	; 0x38
     504:	8f ab       	std	Y+55, r24	; 0x37
	else if (__tmp > 65535)
     506:	3b c0       	rjmp	.+118    	; 0x57e <__LOCK_REGION_LENGTH__+0x17e>
     508:	20 e0       	ldi	r18, 0x00	; 0
     50a:	3f ef       	ldi	r19, 0xFF	; 255
     50c:	4f e7       	ldi	r20, 0x7F	; 127
     50e:	57 e4       	ldi	r21, 0x47	; 71
     510:	6b a9       	ldd	r22, Y+51	; 0x33
     512:	7c a9       	ldd	r23, Y+52	; 0x34
     514:	8d a9       	ldd	r24, Y+53	; 0x35
     516:	9e a9       	ldd	r25, Y+54	; 0x36
     518:	27 d6       	rcall	.+3150   	; 0x1168 <__gesf2>
     51a:	18 16       	cp	r1, r24
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
     51c:	3c f5       	brge	.+78     	; 0x56c <__LOCK_REGION_LENGTH__+0x16c>
     51e:	20 e0       	ldi	r18, 0x00	; 0
     520:	30 e0       	ldi	r19, 0x00	; 0
     522:	40 e2       	ldi	r20, 0x20	; 32
     524:	51 e4       	ldi	r21, 0x41	; 65
     526:	6d 81       	ldd	r22, Y+5	; 0x05
     528:	7e 81       	ldd	r23, Y+6	; 0x06
     52a:	8f 81       	ldd	r24, Y+7	; 0x07
     52c:	98 85       	ldd	r25, Y+8	; 0x08
     52e:	20 d6       	rcall	.+3136   	; 0x1170 <__mulsf3>
     530:	dc 01       	movw	r26, r24
     532:	cb 01       	movw	r24, r22
     534:	bc 01       	movw	r22, r24
     536:	cd 01       	movw	r24, r26
     538:	9e d5       	rcall	.+2876   	; 0x1076 <__fixunssfsi>
     53a:	dc 01       	movw	r26, r24
     53c:	cb 01       	movw	r24, r22
     53e:	98 af       	std	Y+56, r25	; 0x38
     540:	8f ab       	std	Y+55, r24	; 0x37
     542:	0f c0       	rjmp	.+30     	; 0x562 <__LOCK_REGION_LENGTH__+0x162>
     544:	88 ec       	ldi	r24, 0xC8	; 200
     546:	90 e0       	ldi	r25, 0x00	; 0
     548:	9a af       	std	Y+58, r25	; 0x3a
     54a:	89 af       	std	Y+57, r24	; 0x39
     54c:	89 ad       	ldd	r24, Y+57	; 0x39
     54e:	9a ad       	ldd	r25, Y+58	; 0x3a
     550:	01 97       	sbiw	r24, 0x01	; 1
     552:	f1 f7       	brne	.-4      	; 0x550 <__LOCK_REGION_LENGTH__+0x150>
     554:	9a af       	std	Y+58, r25	; 0x3a
     556:	89 af       	std	Y+57, r24	; 0x39
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     558:	8f a9       	ldd	r24, Y+55	; 0x37
     55a:	98 ad       	ldd	r25, Y+56	; 0x38
     55c:	01 97       	sbiw	r24, 0x01	; 1
     55e:	98 af       	std	Y+56, r25	; 0x38
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     560:	8f ab       	std	Y+55, r24	; 0x37
     562:	8f a9       	ldd	r24, Y+55	; 0x37
     564:	98 ad       	ldd	r25, Y+56	; 0x38
     566:	89 2b       	or	r24, r25
     568:	69 f7       	brne	.-38     	; 0x544 <__LOCK_REGION_LENGTH__+0x144>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
     56a:	13 c0       	rjmp	.+38     	; 0x592 <__LOCK_REGION_LENGTH__+0x192>
     56c:	6b a9       	ldd	r22, Y+51	; 0x33
     56e:	7c a9       	ldd	r23, Y+52	; 0x34
     570:	8d a9       	ldd	r24, Y+53	; 0x35
     572:	9e a9       	ldd	r25, Y+54	; 0x36
     574:	80 d5       	rcall	.+2816   	; 0x1076 <__fixunssfsi>
     576:	dc 01       	movw	r26, r24
     578:	cb 01       	movw	r24, r22
     57a:	98 af       	std	Y+56, r25	; 0x38
     57c:	8f ab       	std	Y+55, r24	; 0x37
     57e:	8f a9       	ldd	r24, Y+55	; 0x37
     580:	98 ad       	ldd	r25, Y+56	; 0x38
     582:	9c af       	std	Y+60, r25	; 0x3c
     584:	8b af       	std	Y+59, r24	; 0x3b
     586:	8b ad       	ldd	r24, Y+59	; 0x3b
     588:	9c ad       	ldd	r25, Y+60	; 0x3c
     58a:	01 97       	sbiw	r24, 0x01	; 1
     58c:	f1 f7       	brne	.-4      	; 0x58a <__LOCK_REGION_LENGTH__+0x18a>
     58e:	9c af       	std	Y+60, r25	; 0x3c
			_delay_ms(1);
			magBL = 15 - ADC_SEND();
     590:	8b af       	std	Y+59, r24	; 0x3b
     592:	d4 dd       	rcall	.-1112   	; 0x13c <ADC_SEND>
     594:	98 2f       	mov	r25, r24
     596:	8f e0       	ldi	r24, 0x0F	; 15
     598:	89 1b       	sub	r24, r25
     59a:	80 93 0a 01 	sts	0x010A, r24	; 0x80010a <magBL>
     59e:	80 e0       	ldi	r24, 0x00	; 0
     5a0:	90 e0       	ldi	r25, 0x00	; 0
     5a2:	a0 e8       	ldi	r26, 0x80	; 128
     5a4:	bf e3       	ldi	r27, 0x3F	; 63
     5a6:	89 87       	std	Y+9, r24	; 0x09
     5a8:	9a 87       	std	Y+10, r25	; 0x0a
     5aa:	ab 87       	std	Y+11, r26	; 0x0b

	__builtin_avr_delay_cycles(__ticks_dc);

#else
	uint16_t __ticks;
	__tmp = ((F_CPU) / 4e3) * __ms;
     5ac:	bc 87       	std	Y+12, r27	; 0x0c
     5ae:	20 e0       	ldi	r18, 0x00	; 0
     5b0:	30 e0       	ldi	r19, 0x00	; 0
     5b2:	4a ef       	ldi	r20, 0xFA	; 250
     5b4:	54 e4       	ldi	r21, 0x44	; 68
     5b6:	69 85       	ldd	r22, Y+9	; 0x09
     5b8:	7a 85       	ldd	r23, Y+10	; 0x0a
     5ba:	8b 85       	ldd	r24, Y+11	; 0x0b
     5bc:	9c 85       	ldd	r25, Y+12	; 0x0c
     5be:	d8 d5       	rcall	.+2992   	; 0x1170 <__mulsf3>
     5c0:	dc 01       	movw	r26, r24
     5c2:	cb 01       	movw	r24, r22
     5c4:	89 a7       	std	Y+41, r24	; 0x29
     5c6:	9a a7       	std	Y+42, r25	; 0x2a
     5c8:	ab a7       	std	Y+43, r26	; 0x2b
	if (__tmp < 1.0)
     5ca:	bc a7       	std	Y+44, r27	; 0x2c
     5cc:	20 e0       	ldi	r18, 0x00	; 0
     5ce:	30 e0       	ldi	r19, 0x00	; 0
     5d0:	40 e8       	ldi	r20, 0x80	; 128
     5d2:	5f e3       	ldi	r21, 0x3F	; 63
     5d4:	69 a5       	ldd	r22, Y+41	; 0x29
     5d6:	7a a5       	ldd	r23, Y+42	; 0x2a
     5d8:	8b a5       	ldd	r24, Y+43	; 0x2b
     5da:	9c a5       	ldd	r25, Y+44	; 0x2c
     5dc:	48 d5       	rcall	.+2704   	; 0x106e <__cmpsf2>
     5de:	88 23       	and	r24, r24
		__ticks = 1;
     5e0:	2c f4       	brge	.+10     	; 0x5ec <__LOCK_REGION_LENGTH__+0x1ec>
     5e2:	81 e0       	ldi	r24, 0x01	; 1
     5e4:	90 e0       	ldi	r25, 0x00	; 0
     5e6:	9e a7       	std	Y+46, r25	; 0x2e
     5e8:	8d a7       	std	Y+45, r24	; 0x2d
	else if (__tmp > 65535)
     5ea:	3b c0       	rjmp	.+118    	; 0x662 <__LOCK_REGION_LENGTH__+0x262>
     5ec:	20 e0       	ldi	r18, 0x00	; 0
     5ee:	3f ef       	ldi	r19, 0xFF	; 255
     5f0:	4f e7       	ldi	r20, 0x7F	; 127
     5f2:	57 e4       	ldi	r21, 0x47	; 71
     5f4:	69 a5       	ldd	r22, Y+41	; 0x29
     5f6:	7a a5       	ldd	r23, Y+42	; 0x2a
     5f8:	8b a5       	ldd	r24, Y+43	; 0x2b
     5fa:	9c a5       	ldd	r25, Y+44	; 0x2c
     5fc:	b5 d5       	rcall	.+2922   	; 0x1168 <__gesf2>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
     5fe:	18 16       	cp	r1, r24
     600:	3c f5       	brge	.+78     	; 0x650 <__LOCK_REGION_LENGTH__+0x250>
     602:	20 e0       	ldi	r18, 0x00	; 0
     604:	30 e0       	ldi	r19, 0x00	; 0
     606:	40 e2       	ldi	r20, 0x20	; 32
     608:	51 e4       	ldi	r21, 0x41	; 65
     60a:	69 85       	ldd	r22, Y+9	; 0x09
     60c:	7a 85       	ldd	r23, Y+10	; 0x0a
     60e:	8b 85       	ldd	r24, Y+11	; 0x0b
     610:	9c 85       	ldd	r25, Y+12	; 0x0c
     612:	ae d5       	rcall	.+2908   	; 0x1170 <__mulsf3>
     614:	dc 01       	movw	r26, r24
     616:	cb 01       	movw	r24, r22
     618:	bc 01       	movw	r22, r24
     61a:	cd 01       	movw	r24, r26
     61c:	2c d5       	rcall	.+2648   	; 0x1076 <__fixunssfsi>
     61e:	dc 01       	movw	r26, r24
     620:	cb 01       	movw	r24, r22
     622:	9e a7       	std	Y+46, r25	; 0x2e
     624:	8d a7       	std	Y+45, r24	; 0x2d
     626:	0f c0       	rjmp	.+30     	; 0x646 <__LOCK_REGION_LENGTH__+0x246>
     628:	88 ec       	ldi	r24, 0xC8	; 200
     62a:	90 e0       	ldi	r25, 0x00	; 0
     62c:	98 ab       	std	Y+48, r25	; 0x30
     62e:	8f a7       	std	Y+47, r24	; 0x2f
     630:	8f a5       	ldd	r24, Y+47	; 0x2f
     632:	98 a9       	ldd	r25, Y+48	; 0x30
     634:	01 97       	sbiw	r24, 0x01	; 1
     636:	f1 f7       	brne	.-4      	; 0x634 <__LOCK_REGION_LENGTH__+0x234>
     638:	98 ab       	std	Y+48, r25	; 0x30
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     63a:	8f a7       	std	Y+47, r24	; 0x2f
     63c:	8d a5       	ldd	r24, Y+45	; 0x2d
     63e:	9e a5       	ldd	r25, Y+46	; 0x2e
     640:	01 97       	sbiw	r24, 0x01	; 1
     642:	9e a7       	std	Y+46, r25	; 0x2e
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     644:	8d a7       	std	Y+45, r24	; 0x2d
     646:	8d a5       	ldd	r24, Y+45	; 0x2d
     648:	9e a5       	ldd	r25, Y+46	; 0x2e
     64a:	89 2b       	or	r24, r25
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
     64c:	69 f7       	brne	.-38     	; 0x628 <__LOCK_REGION_LENGTH__+0x228>
     64e:	13 c0       	rjmp	.+38     	; 0x676 <__LOCK_REGION_LENGTH__+0x276>
     650:	69 a5       	ldd	r22, Y+41	; 0x29
     652:	7a a5       	ldd	r23, Y+42	; 0x2a
     654:	8b a5       	ldd	r24, Y+43	; 0x2b
     656:	9c a5       	ldd	r25, Y+44	; 0x2c
     658:	0e d5       	rcall	.+2588   	; 0x1076 <__fixunssfsi>
     65a:	dc 01       	movw	r26, r24
     65c:	cb 01       	movw	r24, r22
     65e:	9e a7       	std	Y+46, r25	; 0x2e
     660:	8d a7       	std	Y+45, r24	; 0x2d
     662:	8d a5       	ldd	r24, Y+45	; 0x2d
     664:	9e a5       	ldd	r25, Y+46	; 0x2e
     666:	9a ab       	std	Y+50, r25	; 0x32
     668:	89 ab       	std	Y+49, r24	; 0x31
     66a:	89 a9       	ldd	r24, Y+49	; 0x31
     66c:	9a a9       	ldd	r25, Y+50	; 0x32
     66e:	01 97       	sbiw	r24, 0x01	; 1
     670:	f1 f7       	brne	.-4      	; 0x66e <__LOCK_REGION_LENGTH__+0x26e>
			_delay_ms(1);
			ADC_SELECT(4);
     672:	9a ab       	std	Y+50, r25	; 0x32
     674:	89 ab       	std	Y+49, r24	; 0x31
			magTR = 15 - ADC_SEND();
     676:	84 e0       	ldi	r24, 0x04	; 4
     678:	3b dd       	rcall	.-1418   	; 0xf0 <ADC_SELECT>
     67a:	60 dd       	rcall	.-1344   	; 0x13c <ADC_SEND>
     67c:	98 2f       	mov	r25, r24
     67e:	8f e0       	ldi	r24, 0x0F	; 15
     680:	89 1b       	sub	r24, r25
     682:	80 93 09 01 	sts	0x0109, r24	; 0x800109 <magTR>
     686:	80 e0       	ldi	r24, 0x00	; 0
     688:	90 e0       	ldi	r25, 0x00	; 0
     68a:	a0 e8       	ldi	r26, 0x80	; 128
     68c:	bf e3       	ldi	r27, 0x3F	; 63
     68e:	8d 87       	std	Y+13, r24	; 0x0d
     690:	9e 87       	std	Y+14, r25	; 0x0e

	__builtin_avr_delay_cycles(__ticks_dc);

#else
	uint16_t __ticks;
	__tmp = ((F_CPU) / 4e3) * __ms;
     692:	af 87       	std	Y+15, r26	; 0x0f
     694:	b8 8b       	std	Y+16, r27	; 0x10
     696:	20 e0       	ldi	r18, 0x00	; 0
     698:	30 e0       	ldi	r19, 0x00	; 0
     69a:	4a ef       	ldi	r20, 0xFA	; 250
     69c:	54 e4       	ldi	r21, 0x44	; 68
     69e:	6d 85       	ldd	r22, Y+13	; 0x0d
     6a0:	7e 85       	ldd	r23, Y+14	; 0x0e
     6a2:	8f 85       	ldd	r24, Y+15	; 0x0f
     6a4:	98 89       	ldd	r25, Y+16	; 0x10
     6a6:	64 d5       	rcall	.+2760   	; 0x1170 <__mulsf3>
     6a8:	dc 01       	movw	r26, r24
     6aa:	cb 01       	movw	r24, r22
     6ac:	8f 8f       	std	Y+31, r24	; 0x1f
     6ae:	98 a3       	std	Y+32, r25	; 0x20
	if (__tmp < 1.0)
     6b0:	a9 a3       	std	Y+33, r26	; 0x21
     6b2:	ba a3       	std	Y+34, r27	; 0x22
     6b4:	20 e0       	ldi	r18, 0x00	; 0
     6b6:	30 e0       	ldi	r19, 0x00	; 0
     6b8:	40 e8       	ldi	r20, 0x80	; 128
     6ba:	5f e3       	ldi	r21, 0x3F	; 63
     6bc:	6f 8d       	ldd	r22, Y+31	; 0x1f
     6be:	78 a1       	ldd	r23, Y+32	; 0x20
     6c0:	89 a1       	ldd	r24, Y+33	; 0x21
     6c2:	9a a1       	ldd	r25, Y+34	; 0x22
     6c4:	d4 d4       	rcall	.+2472   	; 0x106e <__cmpsf2>
		__ticks = 1;
     6c6:	88 23       	and	r24, r24
     6c8:	2c f4       	brge	.+10     	; 0x6d4 <__LOCK_REGION_LENGTH__+0x2d4>
     6ca:	81 e0       	ldi	r24, 0x01	; 1
     6cc:	90 e0       	ldi	r25, 0x00	; 0
	else if (__tmp > 65535)
     6ce:	9c a3       	std	Y+36, r25	; 0x24
     6d0:	8b a3       	std	Y+35, r24	; 0x23
     6d2:	3b c0       	rjmp	.+118    	; 0x74a <__LOCK_REGION_LENGTH__+0x34a>
     6d4:	20 e0       	ldi	r18, 0x00	; 0
     6d6:	3f ef       	ldi	r19, 0xFF	; 255
     6d8:	4f e7       	ldi	r20, 0x7F	; 127
     6da:	57 e4       	ldi	r21, 0x47	; 71
     6dc:	6f 8d       	ldd	r22, Y+31	; 0x1f
     6de:	78 a1       	ldd	r23, Y+32	; 0x20
     6e0:	89 a1       	ldd	r24, Y+33	; 0x21
     6e2:	9a a1       	ldd	r25, Y+34	; 0x22
     6e4:	41 d5       	rcall	.+2690   	; 0x1168 <__gesf2>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
     6e6:	18 16       	cp	r1, r24
     6e8:	3c f5       	brge	.+78     	; 0x738 <__LOCK_REGION_LENGTH__+0x338>
     6ea:	20 e0       	ldi	r18, 0x00	; 0
     6ec:	30 e0       	ldi	r19, 0x00	; 0
     6ee:	40 e2       	ldi	r20, 0x20	; 32
     6f0:	51 e4       	ldi	r21, 0x41	; 65
     6f2:	6d 85       	ldd	r22, Y+13	; 0x0d
     6f4:	7e 85       	ldd	r23, Y+14	; 0x0e
     6f6:	8f 85       	ldd	r24, Y+15	; 0x0f
     6f8:	98 89       	ldd	r25, Y+16	; 0x10
     6fa:	3a d5       	rcall	.+2676   	; 0x1170 <__mulsf3>
     6fc:	dc 01       	movw	r26, r24
     6fe:	cb 01       	movw	r24, r22
     700:	bc 01       	movw	r22, r24
     702:	cd 01       	movw	r24, r26
     704:	b8 d4       	rcall	.+2416   	; 0x1076 <__fixunssfsi>
     706:	dc 01       	movw	r26, r24
     708:	cb 01       	movw	r24, r22
     70a:	9c a3       	std	Y+36, r25	; 0x24
     70c:	8b a3       	std	Y+35, r24	; 0x23
     70e:	0f c0       	rjmp	.+30     	; 0x72e <__LOCK_REGION_LENGTH__+0x32e>
     710:	88 ec       	ldi	r24, 0xC8	; 200
     712:	90 e0       	ldi	r25, 0x00	; 0
     714:	9e a3       	std	Y+38, r25	; 0x26
     716:	8d a3       	std	Y+37, r24	; 0x25
     718:	8d a1       	ldd	r24, Y+37	; 0x25
     71a:	9e a1       	ldd	r25, Y+38	; 0x26
     71c:	01 97       	sbiw	r24, 0x01	; 1
     71e:	f1 f7       	brne	.-4      	; 0x71c <__LOCK_REGION_LENGTH__+0x31c>
     720:	9e a3       	std	Y+38, r25	; 0x26
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     722:	8d a3       	std	Y+37, r24	; 0x25
     724:	8b a1       	ldd	r24, Y+35	; 0x23
     726:	9c a1       	ldd	r25, Y+36	; 0x24
     728:	01 97       	sbiw	r24, 0x01	; 1
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     72a:	9c a3       	std	Y+36, r25	; 0x24
     72c:	8b a3       	std	Y+35, r24	; 0x23
     72e:	8b a1       	ldd	r24, Y+35	; 0x23
     730:	9c a1       	ldd	r25, Y+36	; 0x24
     732:	89 2b       	or	r24, r25
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
     734:	69 f7       	brne	.-38     	; 0x710 <__LOCK_REGION_LENGTH__+0x310>
     736:	13 c0       	rjmp	.+38     	; 0x75e <__LOCK_REGION_LENGTH__+0x35e>
     738:	6f 8d       	ldd	r22, Y+31	; 0x1f
     73a:	78 a1       	ldd	r23, Y+32	; 0x20
     73c:	89 a1       	ldd	r24, Y+33	; 0x21
     73e:	9a a1       	ldd	r25, Y+34	; 0x22
     740:	9a d4       	rcall	.+2356   	; 0x1076 <__fixunssfsi>
     742:	dc 01       	movw	r26, r24
     744:	cb 01       	movw	r24, r22
     746:	9c a3       	std	Y+36, r25	; 0x24
     748:	8b a3       	std	Y+35, r24	; 0x23
     74a:	8b a1       	ldd	r24, Y+35	; 0x23
     74c:	9c a1       	ldd	r25, Y+36	; 0x24
     74e:	98 a7       	std	Y+40, r25	; 0x28
     750:	8f a3       	std	Y+39, r24	; 0x27
     752:	8f a1       	ldd	r24, Y+39	; 0x27
     754:	98 a5       	ldd	r25, Y+40	; 0x28
     756:	01 97       	sbiw	r24, 0x01	; 1
     758:	f1 f7       	brne	.-4      	; 0x756 <__LOCK_REGION_LENGTH__+0x356>
			_delay_ms(1);
			ADC_SELECT(3);
     75a:	98 a7       	std	Y+40, r25	; 0x28
     75c:	8f a3       	std	Y+39, r24	; 0x27
     75e:	83 e0       	ldi	r24, 0x03	; 3
     760:	c7 dc       	rcall	.-1650   	; 0xf0 <ADC_SELECT>
     762:	80 e0       	ldi	r24, 0x00	; 0
     764:	90 e0       	ldi	r25, 0x00	; 0
     766:	a0 e8       	ldi	r26, 0x80	; 128
     768:	bf e3       	ldi	r27, 0x3F	; 63
     76a:	89 8b       	std	Y+17, r24	; 0x11
     76c:	9a 8b       	std	Y+18, r25	; 0x12

	__builtin_avr_delay_cycles(__ticks_dc);

#else
	uint16_t __ticks;
	__tmp = ((F_CPU) / 4e3) * __ms;
     76e:	ab 8b       	std	Y+19, r26	; 0x13
     770:	bc 8b       	std	Y+20, r27	; 0x14
     772:	20 e0       	ldi	r18, 0x00	; 0
     774:	30 e0       	ldi	r19, 0x00	; 0
     776:	4a ef       	ldi	r20, 0xFA	; 250
     778:	54 e4       	ldi	r21, 0x44	; 68
     77a:	69 89       	ldd	r22, Y+17	; 0x11
     77c:	7a 89       	ldd	r23, Y+18	; 0x12
     77e:	8b 89       	ldd	r24, Y+19	; 0x13
     780:	9c 89       	ldd	r25, Y+20	; 0x14
     782:	f6 d4       	rcall	.+2540   	; 0x1170 <__mulsf3>
     784:	dc 01       	movw	r26, r24
     786:	cb 01       	movw	r24, r22
     788:	8d 8b       	std	Y+21, r24	; 0x15
     78a:	9e 8b       	std	Y+22, r25	; 0x16
	if (__tmp < 1.0)
     78c:	af 8b       	std	Y+23, r26	; 0x17
     78e:	b8 8f       	std	Y+24, r27	; 0x18
     790:	20 e0       	ldi	r18, 0x00	; 0
     792:	30 e0       	ldi	r19, 0x00	; 0
     794:	40 e8       	ldi	r20, 0x80	; 128
     796:	5f e3       	ldi	r21, 0x3F	; 63
     798:	6d 89       	ldd	r22, Y+21	; 0x15
     79a:	7e 89       	ldd	r23, Y+22	; 0x16
     79c:	8f 89       	ldd	r24, Y+23	; 0x17
     79e:	98 8d       	ldd	r25, Y+24	; 0x18
		__ticks = 1;
     7a0:	66 d4       	rcall	.+2252   	; 0x106e <__cmpsf2>
     7a2:	88 23       	and	r24, r24
     7a4:	2c f4       	brge	.+10     	; 0x7b0 <__LOCK_REGION_LENGTH__+0x3b0>
     7a6:	81 e0       	ldi	r24, 0x01	; 1
     7a8:	90 e0       	ldi	r25, 0x00	; 0
	else if (__tmp > 65535)
     7aa:	9a 8f       	std	Y+26, r25	; 0x1a
     7ac:	89 8f       	std	Y+25, r24	; 0x19
     7ae:	3b c0       	rjmp	.+118    	; 0x826 <__LOCK_REGION_LENGTH__+0x426>
     7b0:	20 e0       	ldi	r18, 0x00	; 0
     7b2:	3f ef       	ldi	r19, 0xFF	; 255
     7b4:	4f e7       	ldi	r20, 0x7F	; 127
     7b6:	57 e4       	ldi	r21, 0x47	; 71
     7b8:	6d 89       	ldd	r22, Y+21	; 0x15
     7ba:	7e 89       	ldd	r23, Y+22	; 0x16
     7bc:	8f 89       	ldd	r24, Y+23	; 0x17
     7be:	98 8d       	ldd	r25, Y+24	; 0x18
     7c0:	d3 d4       	rcall	.+2470   	; 0x1168 <__gesf2>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
     7c2:	18 16       	cp	r1, r24
     7c4:	3c f5       	brge	.+78     	; 0x814 <__LOCK_REGION_LENGTH__+0x414>
     7c6:	20 e0       	ldi	r18, 0x00	; 0
     7c8:	30 e0       	ldi	r19, 0x00	; 0
     7ca:	40 e2       	ldi	r20, 0x20	; 32
     7cc:	51 e4       	ldi	r21, 0x41	; 65
     7ce:	69 89       	ldd	r22, Y+17	; 0x11
     7d0:	7a 89       	ldd	r23, Y+18	; 0x12
     7d2:	8b 89       	ldd	r24, Y+19	; 0x13
     7d4:	9c 89       	ldd	r25, Y+20	; 0x14
     7d6:	cc d4       	rcall	.+2456   	; 0x1170 <__mulsf3>
     7d8:	dc 01       	movw	r26, r24
     7da:	cb 01       	movw	r24, r22
     7dc:	bc 01       	movw	r22, r24
     7de:	cd 01       	movw	r24, r26
     7e0:	4a d4       	rcall	.+2196   	; 0x1076 <__fixunssfsi>
     7e2:	dc 01       	movw	r26, r24
     7e4:	cb 01       	movw	r24, r22
     7e6:	9a 8f       	std	Y+26, r25	; 0x1a
     7e8:	89 8f       	std	Y+25, r24	; 0x19
     7ea:	0f c0       	rjmp	.+30     	; 0x80a <__LOCK_REGION_LENGTH__+0x40a>
     7ec:	88 ec       	ldi	r24, 0xC8	; 200
     7ee:	90 e0       	ldi	r25, 0x00	; 0
     7f0:	9c 8f       	std	Y+28, r25	; 0x1c
     7f2:	8b 8f       	std	Y+27, r24	; 0x1b
     7f4:	8b 8d       	ldd	r24, Y+27	; 0x1b
     7f6:	9c 8d       	ldd	r25, Y+28	; 0x1c
     7f8:	01 97       	sbiw	r24, 0x01	; 1
     7fa:	f1 f7       	brne	.-4      	; 0x7f8 <__LOCK_REGION_LENGTH__+0x3f8>
     7fc:	9c 8f       	std	Y+28, r25	; 0x1c
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     7fe:	8b 8f       	std	Y+27, r24	; 0x1b
     800:	89 8d       	ldd	r24, Y+25	; 0x19
     802:	9a 8d       	ldd	r25, Y+26	; 0x1a
     804:	01 97       	sbiw	r24, 0x01	; 1
     806:	9a 8f       	std	Y+26, r25	; 0x1a
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     808:	89 8f       	std	Y+25, r24	; 0x19
     80a:	89 8d       	ldd	r24, Y+25	; 0x19
     80c:	9a 8d       	ldd	r25, Y+26	; 0x1a
     80e:	89 2b       	or	r24, r25
     810:	69 f7       	brne	.-38     	; 0x7ec <__LOCK_REGION_LENGTH__+0x3ec>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
     812:	13 c0       	rjmp	.+38     	; 0x83a <__LOCK_REGION_LENGTH__+0x43a>
     814:	6d 89       	ldd	r22, Y+21	; 0x15
     816:	7e 89       	ldd	r23, Y+22	; 0x16
     818:	8f 89       	ldd	r24, Y+23	; 0x17
     81a:	98 8d       	ldd	r25, Y+24	; 0x18
     81c:	2c d4       	rcall	.+2136   	; 0x1076 <__fixunssfsi>
     81e:	dc 01       	movw	r26, r24
     820:	cb 01       	movw	r24, r22
     822:	9a 8f       	std	Y+26, r25	; 0x1a
     824:	89 8f       	std	Y+25, r24	; 0x19
     826:	89 8d       	ldd	r24, Y+25	; 0x19
     828:	9a 8d       	ldd	r25, Y+26	; 0x1a
     82a:	9e 8f       	std	Y+30, r25	; 0x1e
     82c:	8d 8f       	std	Y+29, r24	; 0x1d
     82e:	8d 8d       	ldd	r24, Y+29	; 0x1d
     830:	9e 8d       	ldd	r25, Y+30	; 0x1e
     832:	01 97       	sbiw	r24, 0x01	; 1
     834:	f1 f7       	brne	.-4      	; 0x832 <__LOCK_REGION_LENGTH__+0x432>
     836:	9e 8f       	std	Y+30, r25	; 0x1e
     838:	8d 8f       	std	Y+29, r24	; 0x1d
			_delay_ms(1);
			magBR = 15 - ADC_SEND();
     83a:	80 dc       	rcall	.-1792   	; 0x13c <ADC_SEND>
     83c:	98 2f       	mov	r25, r24
     83e:	8f e0       	ldi	r24, 0x0F	; 15
     840:	89 1b       	sub	r24, r25
     842:	80 93 0b 01 	sts	0x010B, r24	; 0x80010b <magBR>
     846:	10 c0       	rjmp	.+32     	; 0x868 <__LOCK_REGION_LENGTH__+0x468>
			break;
     848:	ce 01       	movw	r24, r28
		
		case magOff:
			state = magOff;
     84a:	89 5b       	subi	r24, 0xB9	; 185
     84c:	9f 4f       	sbci	r25, 0xFF	; 255
     84e:	22 e0       	ldi	r18, 0x02	; 2
     850:	30 e0       	ldi	r19, 0x00	; 0
     852:	fc 01       	movw	r30, r24
     854:	31 83       	std	Z+1, r19	; 0x01
     856:	20 83       	st	Z, r18
     858:	07 c0       	rjmp	.+14     	; 0x868 <__LOCK_REGION_LENGTH__+0x468>
			break;
     85a:	ce 01       	movw	r24, r28
		
		default:
			state = magStart;
     85c:	89 5b       	subi	r24, 0xB9	; 185
     85e:	9f 4f       	sbci	r25, 0xFF	; 255
     860:	fc 01       	movw	r30, r24
     862:	11 82       	std	Z+1, r1	; 0x01
     864:	10 82       	st	Z, r1
     866:	00 00       	nop
			break;
     868:	ce 01       	movw	r24, r28
	}
	switch(state)
     86a:	89 5b       	subi	r24, 0xB9	; 185
     86c:	9f 4f       	sbci	r25, 0xFF	; 255
     86e:	fc 01       	movw	r30, r24
     870:	80 81       	ld	r24, Z
     872:	91 81       	ldd	r25, Z+1	; 0x01
     874:	81 30       	cpi	r24, 0x01	; 1
     876:	91 05       	cpc	r25, r1
     878:	31 f0       	breq	.+12     	; 0x886 <__LOCK_REGION_LENGTH__+0x486>
     87a:	82 30       	cpi	r24, 0x02	; 2
     87c:	91 05       	cpc	r25, r1
     87e:	a1 f0       	breq	.+40     	; 0x8a8 <__LOCK_REGION_LENGTH__+0x4a8>
     880:	89 2b       	or	r24, r25
     882:	11 f1       	breq	.+68     	; 0x8c8 <__LOCK_REGION_LENGTH__+0x4c8>
     884:	1a c0       	rjmp	.+52     	; 0x8ba <__LOCK_REGION_LENGTH__+0x4ba>
     886:	80 91 0d 01 	lds	r24, 0x010D	; 0x80010d <magY>
	{
		case magStart:
			break;
		
		case magRead:
			magCalc = magY | (magX << 8);
     88a:	28 2f       	mov	r18, r24
     88c:	30 e0       	ldi	r19, 0x00	; 0
     88e:	80 91 0c 01 	lds	r24, 0x010C	; 0x80010c <magX>
     892:	88 2f       	mov	r24, r24
     894:	90 e0       	ldi	r25, 0x00	; 0
     896:	98 2f       	mov	r25, r24
     898:	88 27       	eor	r24, r24
     89a:	82 2b       	or	r24, r18
     89c:	93 2b       	or	r25, r19
     89e:	90 93 07 01 	sts	0x0107, r25	; 0x800107 <magCalc+0x1>
     8a2:	80 93 06 01 	sts	0x0106, r24	; 0x800106 <magCalc>
     8a6:	11 c0       	rjmp	.+34     	; 0x8ca <__LOCK_REGION_LENGTH__+0x4ca>
			break;
     8a8:	ce 01       	movw	r24, r28
		
		case magOff:
			state = magOff;
     8aa:	89 5b       	subi	r24, 0xB9	; 185
     8ac:	9f 4f       	sbci	r25, 0xFF	; 255
     8ae:	22 e0       	ldi	r18, 0x02	; 2
     8b0:	30 e0       	ldi	r19, 0x00	; 0
     8b2:	fc 01       	movw	r30, r24
     8b4:	31 83       	std	Z+1, r19	; 0x01
     8b6:	20 83       	st	Z, r18
     8b8:	08 c0       	rjmp	.+16     	; 0x8ca <__LOCK_REGION_LENGTH__+0x4ca>
			break;
     8ba:	ce 01       	movw	r24, r28
		
		default:
			state = magStart;
     8bc:	89 5b       	subi	r24, 0xB9	; 185
     8be:	9f 4f       	sbci	r25, 0xFF	; 255
     8c0:	fc 01       	movw	r30, r24
     8c2:	11 82       	std	Z+1, r1	; 0x01
     8c4:	10 82       	st	Z, r1
     8c6:	01 c0       	rjmp	.+2      	; 0x8ca <__LOCK_REGION_LENGTH__+0x4ca>
			break;
     8c8:	00 00       	nop
			break;
	}
	switch(state)
	{
		case magStart:
			break;
     8ca:	ce 01       	movw	r24, r28
		
		default:
			state = magStart;
			break;
	}
	return state;
     8cc:	89 5b       	subi	r24, 0xB9	; 185
     8ce:	9f 4f       	sbci	r25, 0xFF	; 255
     8d0:	fc 01       	movw	r30, r24
     8d2:	80 81       	ld	r24, Z
     8d4:	91 81       	ldd	r25, Z+1	; 0x01
     8d6:	c8 5b       	subi	r28, 0xB8	; 184
}
     8d8:	df 4f       	sbci	r29, 0xFF	; 255
     8da:	0f b6       	in	r0, 0x3f	; 63
     8dc:	f8 94       	cli
     8de:	de bf       	out	0x3e, r29	; 62
     8e0:	0f be       	out	0x3f, r0	; 63
     8e2:	cd bf       	out	0x3d, r28	; 61
     8e4:	df 91       	pop	r29
     8e6:	cf 91       	pop	r28
     8e8:	1f 91       	pop	r17
     8ea:	0f 91       	pop	r16
     8ec:	08 95       	ret

000008ee <TimerISR>:
     8ee:	0f 93       	push	r16

task* tasks;

///////////////////////////////////////////////////////////////////////////////
// Heart of the scheduler code
void TimerISR() {
     8f0:	1f 93       	push	r17
     8f2:	cf 93       	push	r28
     8f4:	df 93       	push	r29
     8f6:	cd b7       	in	r28, 0x3d	; 61
     8f8:	de b7       	in	r29, 0x3e	; 62
	static unsigned char i;
	for (i = 0; i < tasksNum; i++) {
     8fa:	10 92 14 01 	sts	0x0114, r1	; 0x800114 <i.1800>
     8fe:	be c0       	rjmp	.+380    	; 0xa7c <TimerISR+0x18e>
		if ( tasks[i].elapsedTime >= tasks[i].period ) { // Ready
     900:	20 91 16 01 	lds	r18, 0x0116	; 0x800116 <tasks>
     904:	30 91 17 01 	lds	r19, 0x0117	; 0x800117 <tasks+0x1>
     908:	80 91 14 01 	lds	r24, 0x0114	; 0x800114 <i.1800>
     90c:	48 2f       	mov	r20, r24
     90e:	50 e0       	ldi	r21, 0x00	; 0
     910:	6b e0       	ldi	r22, 0x0B	; 11
     912:	64 9f       	mul	r22, r20
     914:	c0 01       	movw	r24, r0
     916:	65 9f       	mul	r22, r21
     918:	90 0d       	add	r25, r0
     91a:	11 24       	eor	r1, r1
     91c:	82 0f       	add	r24, r18
     91e:	93 1f       	adc	r25, r19
     920:	fc 01       	movw	r30, r24
     922:	25 81       	ldd	r18, Z+5	; 0x05
     924:	36 81       	ldd	r19, Z+6	; 0x06
     926:	47 81       	ldd	r20, Z+7	; 0x07
     928:	50 85       	ldd	r21, Z+8	; 0x08
     92a:	60 91 16 01 	lds	r22, 0x0116	; 0x800116 <tasks>
     92e:	70 91 17 01 	lds	r23, 0x0117	; 0x800117 <tasks+0x1>
     932:	80 91 14 01 	lds	r24, 0x0114	; 0x800114 <i.1800>
     936:	e8 2f       	mov	r30, r24
     938:	f0 e0       	ldi	r31, 0x00	; 0
     93a:	ab e0       	ldi	r26, 0x0B	; 11
     93c:	ae 9f       	mul	r26, r30
     93e:	c0 01       	movw	r24, r0
     940:	af 9f       	mul	r26, r31
     942:	90 0d       	add	r25, r0
     944:	11 24       	eor	r1, r1
     946:	86 0f       	add	r24, r22
     948:	97 1f       	adc	r25, r23
     94a:	fc 01       	movw	r30, r24
     94c:	81 81       	ldd	r24, Z+1	; 0x01
     94e:	92 81       	ldd	r25, Z+2	; 0x02
     950:	a3 81       	ldd	r26, Z+3	; 0x03
     952:	b4 81       	ldd	r27, Z+4	; 0x04
     954:	28 17       	cp	r18, r24
     956:	39 07       	cpc	r19, r25
     958:	4a 07       	cpc	r20, r26
     95a:	5b 07       	cpc	r21, r27
     95c:	08 f4       	brcc	.+2      	; 0x960 <TimerISR+0x72>
     95e:	52 c0       	rjmp	.+164    	; 0xa04 <TimerISR+0x116>
			tasks[i].state = tasks[i].TickFct(tasks[i].state);
     960:	20 91 16 01 	lds	r18, 0x0116	; 0x800116 <tasks>
     964:	30 91 17 01 	lds	r19, 0x0117	; 0x800117 <tasks+0x1>
     968:	80 91 14 01 	lds	r24, 0x0114	; 0x800114 <i.1800>
     96c:	48 2f       	mov	r20, r24
     96e:	50 e0       	ldi	r21, 0x00	; 0
     970:	6b e0       	ldi	r22, 0x0B	; 11
     972:	64 9f       	mul	r22, r20
     974:	c0 01       	movw	r24, r0
     976:	65 9f       	mul	r22, r21
     978:	90 0d       	add	r25, r0
     97a:	11 24       	eor	r1, r1
     97c:	89 01       	movw	r16, r18
     97e:	08 0f       	add	r16, r24
     980:	19 1f       	adc	r17, r25
     982:	20 91 16 01 	lds	r18, 0x0116	; 0x800116 <tasks>
     986:	30 91 17 01 	lds	r19, 0x0117	; 0x800117 <tasks+0x1>
     98a:	80 91 14 01 	lds	r24, 0x0114	; 0x800114 <i.1800>
     98e:	48 2f       	mov	r20, r24
     990:	50 e0       	ldi	r21, 0x00	; 0
     992:	6b e0       	ldi	r22, 0x0B	; 11
     994:	64 9f       	mul	r22, r20
     996:	c0 01       	movw	r24, r0
     998:	65 9f       	mul	r22, r21
     99a:	90 0d       	add	r25, r0
     99c:	11 24       	eor	r1, r1
     99e:	82 0f       	add	r24, r18
     9a0:	93 1f       	adc	r25, r19
     9a2:	fc 01       	movw	r30, r24
     9a4:	21 85       	ldd	r18, Z+9	; 0x09
     9a6:	32 85       	ldd	r19, Z+10	; 0x0a
     9a8:	40 91 16 01 	lds	r20, 0x0116	; 0x800116 <tasks>
     9ac:	50 91 17 01 	lds	r21, 0x0117	; 0x800117 <tasks+0x1>
     9b0:	80 91 14 01 	lds	r24, 0x0114	; 0x800114 <i.1800>
     9b4:	68 2f       	mov	r22, r24
     9b6:	70 e0       	ldi	r23, 0x00	; 0
     9b8:	eb e0       	ldi	r30, 0x0B	; 11
     9ba:	e6 9f       	mul	r30, r22
     9bc:	c0 01       	movw	r24, r0
     9be:	e7 9f       	mul	r30, r23
     9c0:	90 0d       	add	r25, r0
     9c2:	11 24       	eor	r1, r1
     9c4:	84 0f       	add	r24, r20
     9c6:	95 1f       	adc	r25, r21
     9c8:	fc 01       	movw	r30, r24
     9ca:	80 81       	ld	r24, Z
     9cc:	08 2e       	mov	r0, r24
     9ce:	00 0c       	add	r0, r0
     9d0:	99 0b       	sbc	r25, r25
     9d2:	f9 01       	movw	r30, r18
     9d4:	09 95       	icall
     9d6:	f8 01       	movw	r30, r16
     9d8:	80 83       	st	Z, r24
			tasks[i].elapsedTime = 0;
     9da:	20 91 16 01 	lds	r18, 0x0116	; 0x800116 <tasks>
     9de:	30 91 17 01 	lds	r19, 0x0117	; 0x800117 <tasks+0x1>
     9e2:	80 91 14 01 	lds	r24, 0x0114	; 0x800114 <i.1800>
     9e6:	48 2f       	mov	r20, r24
     9e8:	50 e0       	ldi	r21, 0x00	; 0
     9ea:	6b e0       	ldi	r22, 0x0B	; 11
     9ec:	64 9f       	mul	r22, r20
     9ee:	c0 01       	movw	r24, r0
     9f0:	65 9f       	mul	r22, r21
     9f2:	90 0d       	add	r25, r0
     9f4:	11 24       	eor	r1, r1
     9f6:	82 0f       	add	r24, r18
     9f8:	93 1f       	adc	r25, r19
     9fa:	fc 01       	movw	r30, r24
     9fc:	15 82       	std	Z+5, r1	; 0x05
     9fe:	16 82       	std	Z+6, r1	; 0x06
     a00:	17 82       	std	Z+7, r1	; 0x07
     a02:	10 86       	std	Z+8, r1	; 0x08
		}
		tasks[i].elapsedTime += tasksPeriodGCD;
     a04:	20 91 16 01 	lds	r18, 0x0116	; 0x800116 <tasks>
     a08:	30 91 17 01 	lds	r19, 0x0117	; 0x800117 <tasks+0x1>
     a0c:	80 91 14 01 	lds	r24, 0x0114	; 0x800114 <i.1800>
     a10:	48 2f       	mov	r20, r24
     a12:	50 e0       	ldi	r21, 0x00	; 0
     a14:	6b e0       	ldi	r22, 0x0B	; 11
     a16:	64 9f       	mul	r22, r20
     a18:	c0 01       	movw	r24, r0
     a1a:	65 9f       	mul	r22, r21
     a1c:	90 0d       	add	r25, r0
     a1e:	11 24       	eor	r1, r1
     a20:	b9 01       	movw	r22, r18
     a22:	68 0f       	add	r22, r24
     a24:	79 1f       	adc	r23, r25
     a26:	20 91 16 01 	lds	r18, 0x0116	; 0x800116 <tasks>
     a2a:	30 91 17 01 	lds	r19, 0x0117	; 0x800117 <tasks+0x1>
     a2e:	80 91 14 01 	lds	r24, 0x0114	; 0x800114 <i.1800>
     a32:	48 2f       	mov	r20, r24
     a34:	50 e0       	ldi	r21, 0x00	; 0
     a36:	eb e0       	ldi	r30, 0x0B	; 11
     a38:	e4 9f       	mul	r30, r20
     a3a:	c0 01       	movw	r24, r0
     a3c:	e5 9f       	mul	r30, r21
     a3e:	90 0d       	add	r25, r0
     a40:	11 24       	eor	r1, r1
     a42:	82 0f       	add	r24, r18
     a44:	93 1f       	adc	r25, r19
     a46:	fc 01       	movw	r30, r24
     a48:	25 81       	ldd	r18, Z+5	; 0x05
     a4a:	36 81       	ldd	r19, Z+6	; 0x06
     a4c:	47 81       	ldd	r20, Z+7	; 0x07
     a4e:	50 85       	ldd	r21, Z+8	; 0x08
     a50:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <__DATA_REGION_ORIGIN__>
     a54:	90 91 01 01 	lds	r25, 0x0101	; 0x800101 <__DATA_REGION_ORIGIN__+0x1>
     a58:	a0 91 02 01 	lds	r26, 0x0102	; 0x800102 <__DATA_REGION_ORIGIN__+0x2>
     a5c:	b0 91 03 01 	lds	r27, 0x0103	; 0x800103 <__DATA_REGION_ORIGIN__+0x3>
     a60:	82 0f       	add	r24, r18
     a62:	93 1f       	adc	r25, r19
     a64:	a4 1f       	adc	r26, r20
     a66:	b5 1f       	adc	r27, r21
     a68:	fb 01       	movw	r30, r22
     a6a:	85 83       	std	Z+5, r24	; 0x05
     a6c:	96 83       	std	Z+6, r25	; 0x06
     a6e:	a7 83       	std	Z+7, r26	; 0x07
     a70:	b0 87       	std	Z+8, r27	; 0x08

///////////////////////////////////////////////////////////////////////////////
// Heart of the scheduler code
void TimerISR() {
	static unsigned char i;
	for (i = 0; i < tasksNum; i++) {
     a72:	80 91 14 01 	lds	r24, 0x0114	; 0x800114 <i.1800>
     a76:	8f 5f       	subi	r24, 0xFF	; 255
     a78:	80 93 14 01 	sts	0x0114, r24	; 0x800114 <i.1800>
     a7c:	90 91 14 01 	lds	r25, 0x0114	; 0x800114 <i.1800>
     a80:	80 91 12 01 	lds	r24, 0x0112	; 0x800112 <tasksNum>
     a84:	98 17       	cp	r25, r24
     a86:	08 f4       	brcc	.+2      	; 0xa8a <TimerISR+0x19c>
     a88:	3b cf       	rjmp	.-394    	; 0x900 <TimerISR+0x12>
			tasks[i].state = tasks[i].TickFct(tasks[i].state);
			tasks[i].elapsedTime = 0;
		}
		tasks[i].elapsedTime += tasksPeriodGCD;
	}
}
     a8a:	00 00       	nop
     a8c:	df 91       	pop	r29
     a8e:	cf 91       	pop	r28
     a90:	1f 91       	pop	r17
     a92:	0f 91       	pop	r16
     a94:	08 95       	ret

00000a96 <__vector_13>:

///////////////////////////////////////////////////////////////////////////////
// In our approach, the C programmer does not touch this ISR, but rather TimerISR()
ISR(TIMER1_COMPA_vect) {
     a96:	1f 92       	push	r1
     a98:	0f 92       	push	r0
     a9a:	00 90 5f 00 	lds	r0, 0x005F	; 0x80005f <__TEXT_REGION_LENGTH__+0x7e005f>
     a9e:	0f 92       	push	r0
     aa0:	11 24       	eor	r1, r1
     aa2:	00 90 5b 00 	lds	r0, 0x005B	; 0x80005b <__TEXT_REGION_LENGTH__+0x7e005b>
     aa6:	0f 92       	push	r0
     aa8:	2f 93       	push	r18
     aaa:	3f 93       	push	r19
     aac:	4f 93       	push	r20
     aae:	5f 93       	push	r21
     ab0:	6f 93       	push	r22
     ab2:	7f 93       	push	r23
     ab4:	8f 93       	push	r24
     ab6:	9f 93       	push	r25
     ab8:	af 93       	push	r26
     aba:	bf 93       	push	r27
     abc:	ef 93       	push	r30
     abe:	ff 93       	push	r31
     ac0:	cf 93       	push	r28
     ac2:	df 93       	push	r29
     ac4:	cd b7       	in	r28, 0x3d	; 61
     ac6:	de b7       	in	r29, 0x3e	; 62
	// CPU automatically calls when TCNT0 == OCR0 (every 1 ms per TimerOn settings)
	tasksPeriodCntDown--; 			// Count down to 0 rather than up to TOP
     ac8:	80 91 0e 01 	lds	r24, 0x010E	; 0x80010e <tasksPeriodCntDown>
     acc:	90 91 0f 01 	lds	r25, 0x010F	; 0x80010f <tasksPeriodCntDown+0x1>
     ad0:	a0 91 10 01 	lds	r26, 0x0110	; 0x800110 <tasksPeriodCntDown+0x2>
     ad4:	b0 91 11 01 	lds	r27, 0x0111	; 0x800111 <tasksPeriodCntDown+0x3>
     ad8:	01 97       	sbiw	r24, 0x01	; 1
     ada:	a1 09       	sbc	r26, r1
     adc:	b1 09       	sbc	r27, r1
     ade:	80 93 0e 01 	sts	0x010E, r24	; 0x80010e <tasksPeriodCntDown>
     ae2:	90 93 0f 01 	sts	0x010F, r25	; 0x80010f <tasksPeriodCntDown+0x1>
     ae6:	a0 93 10 01 	sts	0x0110, r26	; 0x800110 <tasksPeriodCntDown+0x2>
     aea:	b0 93 11 01 	sts	0x0111, r27	; 0x800111 <tasksPeriodCntDown+0x3>
	if (tasksPeriodCntDown == 0) { 	// results in a more efficient compare
     aee:	80 91 0e 01 	lds	r24, 0x010E	; 0x80010e <tasksPeriodCntDown>
     af2:	90 91 0f 01 	lds	r25, 0x010F	; 0x80010f <tasksPeriodCntDown+0x1>
     af6:	a0 91 10 01 	lds	r26, 0x0110	; 0x800110 <tasksPeriodCntDown+0x2>
     afa:	b0 91 11 01 	lds	r27, 0x0111	; 0x800111 <tasksPeriodCntDown+0x3>
     afe:	89 2b       	or	r24, r25
     b00:	8a 2b       	or	r24, r26
     b02:	8b 2b       	or	r24, r27
     b04:	89 f4       	brne	.+34     	; 0xb28 <__vector_13+0x92>
		TimerISR(); 				// Call the ISR that the user uses
     b06:	f3 de       	rcall	.-538    	; 0x8ee <TimerISR>
		tasksPeriodCntDown = tasksPeriodGCD;
     b08:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <__DATA_REGION_ORIGIN__>
     b0c:	90 91 01 01 	lds	r25, 0x0101	; 0x800101 <__DATA_REGION_ORIGIN__+0x1>
     b10:	a0 91 02 01 	lds	r26, 0x0102	; 0x800102 <__DATA_REGION_ORIGIN__+0x2>
     b14:	b0 91 03 01 	lds	r27, 0x0103	; 0x800103 <__DATA_REGION_ORIGIN__+0x3>
     b18:	80 93 0e 01 	sts	0x010E, r24	; 0x80010e <tasksPeriodCntDown>
     b1c:	90 93 0f 01 	sts	0x010F, r25	; 0x80010f <tasksPeriodCntDown+0x1>
     b20:	a0 93 10 01 	sts	0x0110, r26	; 0x800110 <tasksPeriodCntDown+0x2>
     b24:	b0 93 11 01 	sts	0x0111, r27	; 0x800111 <tasksPeriodCntDown+0x3>
	}
}
     b28:	00 00       	nop
     b2a:	df 91       	pop	r29
     b2c:	cf 91       	pop	r28
     b2e:	ff 91       	pop	r31
     b30:	ef 91       	pop	r30
     b32:	bf 91       	pop	r27
     b34:	af 91       	pop	r26
     b36:	9f 91       	pop	r25
     b38:	8f 91       	pop	r24
     b3a:	7f 91       	pop	r23
     b3c:	6f 91       	pop	r22
     b3e:	5f 91       	pop	r21
     b40:	4f 91       	pop	r20
     b42:	3f 91       	pop	r19
     b44:	2f 91       	pop	r18
     b46:	0f 90       	pop	r0
     b48:	00 92 5b 00 	sts	0x005B, r0	; 0x80005b <__TEXT_REGION_LENGTH__+0x7e005b>
     b4c:	0f 90       	pop	r0
     b4e:	00 92 5f 00 	sts	0x005F, r0	; 0x80005f <__TEXT_REGION_LENGTH__+0x7e005f>
     b52:	0f 90       	pop	r0
     b54:	1f 90       	pop	r1
     b56:	18 95       	reti

00000b58 <TimerSet>:

///////////////////////////////////////////////////////////////////////////////
// Set TimerISR() to tick every m ms
void TimerSet(unsigned long m) {
     b58:	cf 93       	push	r28
     b5a:	df 93       	push	r29
     b5c:	00 d0       	rcall	.+0      	; 0xb5e <TimerSet+0x6>
     b5e:	00 d0       	rcall	.+0      	; 0xb60 <TimerSet+0x8>
     b60:	cd b7       	in	r28, 0x3d	; 61
     b62:	de b7       	in	r29, 0x3e	; 62
     b64:	69 83       	std	Y+1, r22	; 0x01
     b66:	7a 83       	std	Y+2, r23	; 0x02
     b68:	8b 83       	std	Y+3, r24	; 0x03
     b6a:	9c 83       	std	Y+4, r25	; 0x04
	tasksPeriodGCD = m;
     b6c:	89 81       	ldd	r24, Y+1	; 0x01
     b6e:	9a 81       	ldd	r25, Y+2	; 0x02
     b70:	ab 81       	ldd	r26, Y+3	; 0x03
     b72:	bc 81       	ldd	r27, Y+4	; 0x04
     b74:	80 93 00 01 	sts	0x0100, r24	; 0x800100 <__DATA_REGION_ORIGIN__>
     b78:	90 93 01 01 	sts	0x0101, r25	; 0x800101 <__DATA_REGION_ORIGIN__+0x1>
     b7c:	a0 93 02 01 	sts	0x0102, r26	; 0x800102 <__DATA_REGION_ORIGIN__+0x2>
     b80:	b0 93 03 01 	sts	0x0103, r27	; 0x800103 <__DATA_REGION_ORIGIN__+0x3>
	tasksPeriodCntDown = tasksPeriodGCD;
     b84:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <__DATA_REGION_ORIGIN__>
     b88:	90 91 01 01 	lds	r25, 0x0101	; 0x800101 <__DATA_REGION_ORIGIN__+0x1>
     b8c:	a0 91 02 01 	lds	r26, 0x0102	; 0x800102 <__DATA_REGION_ORIGIN__+0x2>
     b90:	b0 91 03 01 	lds	r27, 0x0103	; 0x800103 <__DATA_REGION_ORIGIN__+0x3>
     b94:	80 93 0e 01 	sts	0x010E, r24	; 0x80010e <tasksPeriodCntDown>
     b98:	90 93 0f 01 	sts	0x010F, r25	; 0x80010f <tasksPeriodCntDown+0x1>
     b9c:	a0 93 10 01 	sts	0x0110, r26	; 0x800110 <tasksPeriodCntDown+0x2>
     ba0:	b0 93 11 01 	sts	0x0111, r27	; 0x800111 <tasksPeriodCntDown+0x3>
}
     ba4:	00 00       	nop
     ba6:	0f 90       	pop	r0
     ba8:	0f 90       	pop	r0
     baa:	0f 90       	pop	r0
     bac:	0f 90       	pop	r0
     bae:	df 91       	pop	r29
     bb0:	cf 91       	pop	r28
     bb2:	08 95       	ret

00000bb4 <TimerOn>:

///////////////////////////////////////////////////////////////////////////////
void TimerOn() {
     bb4:	cf 93       	push	r28
     bb6:	df 93       	push	r29
     bb8:	cd b7       	in	r28, 0x3d	; 61
     bba:	de b7       	in	r29, 0x3e	; 62
	// AVR timer/counter controller register TCCR1
	TCCR1B 	= (1<<WGM12)|(1<<CS11)|(1<<CS10);
     bbc:	81 e8       	ldi	r24, 0x81	; 129
     bbe:	90 e0       	ldi	r25, 0x00	; 0
     bc0:	2b e0       	ldi	r18, 0x0B	; 11
     bc2:	fc 01       	movw	r30, r24
     bc4:	20 83       	st	Z, r18
	// Thus TCCR1B = 00001011 or 0x0B
	// So, 8 MHz clock or 8,000,000 /64 = 125,000 ticks/s
	// Thus, TCNT1 register will count at 125,000 ticks/s

	// AVR output compare register OCR1A.
	OCR1A 	= 125;	// Timer interrupt will be generated when TCNT1==OCR1A
     bc6:	88 e8       	ldi	r24, 0x88	; 136
     bc8:	90 e0       	ldi	r25, 0x00	; 0
     bca:	2d e7       	ldi	r18, 0x7D	; 125
     bcc:	30 e0       	ldi	r19, 0x00	; 0
     bce:	fc 01       	movw	r30, r24
     bd0:	31 83       	std	Z+1, r19	; 0x01
     bd2:	20 83       	st	Z, r18
	// So when TCNT1 register equals 125,
	// 1 ms has passed. Thus, we compare to 125.
	// AVR timer interrupt mask register

	#if defined (__AVR_ATmega1284__)
	TIMSK1 	= (1<<OCIE1A); // OCIE1A (bit1): enables compare match interrupt - ATMega1284
     bd4:	8f e6       	ldi	r24, 0x6F	; 111
     bd6:	90 e0       	ldi	r25, 0x00	; 0
     bd8:	22 e0       	ldi	r18, 0x02	; 2
     bda:	fc 01       	movw	r30, r24
     bdc:	20 83       	st	Z, r18
	#else
	TIMSK 	= (1<<OCIE1A); // OCIE1A (bit1): enables compare match interrupt - ATMega32
	#endif

	// Initialize avr counter
	TCNT1 = 0;
     bde:	84 e8       	ldi	r24, 0x84	; 132
     be0:	90 e0       	ldi	r25, 0x00	; 0
     be2:	fc 01       	movw	r30, r24
     be4:	11 82       	std	Z+1, r1	; 0x01
     be6:	10 82       	st	Z, r1

	// TimerISR will be called every tasksPeriodCntDown milliseconds
	tasksPeriodCntDown = tasksPeriodGCD;
     be8:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <__DATA_REGION_ORIGIN__>
     bec:	90 91 01 01 	lds	r25, 0x0101	; 0x800101 <__DATA_REGION_ORIGIN__+0x1>
     bf0:	a0 91 02 01 	lds	r26, 0x0102	; 0x800102 <__DATA_REGION_ORIGIN__+0x2>
     bf4:	b0 91 03 01 	lds	r27, 0x0103	; 0x800103 <__DATA_REGION_ORIGIN__+0x3>
     bf8:	80 93 0e 01 	sts	0x010E, r24	; 0x80010e <tasksPeriodCntDown>
     bfc:	90 93 0f 01 	sts	0x010F, r25	; 0x80010f <tasksPeriodCntDown+0x1>
     c00:	a0 93 10 01 	sts	0x0110, r26	; 0x800110 <tasksPeriodCntDown+0x2>
     c04:	b0 93 11 01 	sts	0x0111, r27	; 0x800111 <tasksPeriodCntDown+0x3>

	// Enable global interrupts
	SREG |= 0x80;	// 0x80: 1000000
     c08:	8f e5       	ldi	r24, 0x5F	; 95
     c0a:	90 e0       	ldi	r25, 0x00	; 0
     c0c:	2f e5       	ldi	r18, 0x5F	; 95
     c0e:	30 e0       	ldi	r19, 0x00	; 0
     c10:	f9 01       	movw	r30, r18
     c12:	20 81       	ld	r18, Z
     c14:	20 68       	ori	r18, 0x80	; 128
     c16:	fc 01       	movw	r30, r24
     c18:	20 83       	st	Z, r18
}
     c1a:	00 00       	nop
     c1c:	df 91       	pop	r29
     c1e:	cf 91       	pop	r28
     c20:	08 95       	ret

00000c22 <B1_task>:
enum B2 {B2_start, B2_sample, B2_wait} B2_states;
	
unsigned char buttons = 0;
	
int B1_task(int state)
{
     c22:	cf 93       	push	r28
     c24:	df 93       	push	r29
     c26:	00 d0       	rcall	.+0      	; 0xc28 <B1_task+0x6>
     c28:	cd b7       	in	r28, 0x3d	; 61
     c2a:	de b7       	in	r29, 0x3e	; 62
     c2c:	9a 83       	std	Y+2, r25	; 0x02
     c2e:	89 83       	std	Y+1, r24	; 0x01
	switch(state)
     c30:	89 81       	ldd	r24, Y+1	; 0x01
     c32:	9a 81       	ldd	r25, Y+2	; 0x02
     c34:	81 30       	cpi	r24, 0x01	; 1
     c36:	91 05       	cpc	r25, r1
     c38:	51 f0       	breq	.+20     	; 0xc4e <B1_task+0x2c>
     c3a:	82 30       	cpi	r24, 0x02	; 2
     c3c:	91 05       	cpc	r25, r1
     c3e:	d9 f0       	breq	.+54     	; 0xc76 <B1_task+0x54>
     c40:	89 2b       	or	r24, r25
     c42:	69 f5       	brne	.+90     	; 0xc9e <B1_task+0x7c>
	{
		case B1_start:
			state = B1_sample;
     c44:	81 e0       	ldi	r24, 0x01	; 1
     c46:	90 e0       	ldi	r25, 0x00	; 0
     c48:	9a 83       	std	Y+2, r25	; 0x02
     c4a:	89 83       	std	Y+1, r24	; 0x01
			break;
     c4c:	2b c0       	rjmp	.+86     	; 0xca4 <B1_task+0x82>
			
		case B1_sample:
			if(button1)
     c4e:	86 e2       	ldi	r24, 0x26	; 38
     c50:	90 e0       	ldi	r25, 0x00	; 0
     c52:	fc 01       	movw	r30, r24
     c54:	80 81       	ld	r24, Z
     c56:	88 2f       	mov	r24, r24
     c58:	90 e0       	ldi	r25, 0x00	; 0
     c5a:	81 70       	andi	r24, 0x01	; 1
     c5c:	99 27       	eor	r25, r25
     c5e:	89 2b       	or	r24, r25
     c60:	29 f4       	brne	.+10     	; 0xc6c <B1_task+0x4a>
				state = B1_wait;
     c62:	82 e0       	ldi	r24, 0x02	; 2
     c64:	90 e0       	ldi	r25, 0x00	; 0
     c66:	9a 83       	std	Y+2, r25	; 0x02
     c68:	89 83       	std	Y+1, r24	; 0x01
			else state = B1_sample;
			break;
     c6a:	1c c0       	rjmp	.+56     	; 0xca4 <B1_task+0x82>
			break;
			
		case B1_sample:
			if(button1)
				state = B1_wait;
			else state = B1_sample;
     c6c:	81 e0       	ldi	r24, 0x01	; 1
     c6e:	90 e0       	ldi	r25, 0x00	; 0
     c70:	9a 83       	std	Y+2, r25	; 0x02
     c72:	89 83       	std	Y+1, r24	; 0x01
			break;
     c74:	17 c0       	rjmp	.+46     	; 0xca4 <B1_task+0x82>
			
		case B1_wait:
			if(!button1)
     c76:	86 e2       	ldi	r24, 0x26	; 38
     c78:	90 e0       	ldi	r25, 0x00	; 0
     c7a:	fc 01       	movw	r30, r24
     c7c:	80 81       	ld	r24, Z
     c7e:	88 2f       	mov	r24, r24
     c80:	90 e0       	ldi	r25, 0x00	; 0
     c82:	81 70       	andi	r24, 0x01	; 1
     c84:	99 27       	eor	r25, r25
     c86:	89 2b       	or	r24, r25
     c88:	29 f0       	breq	.+10     	; 0xc94 <B1_task+0x72>
				state = B1_sample;
     c8a:	81 e0       	ldi	r24, 0x01	; 1
     c8c:	90 e0       	ldi	r25, 0x00	; 0
     c8e:	9a 83       	std	Y+2, r25	; 0x02
     c90:	89 83       	std	Y+1, r24	; 0x01
			else
				state = B1_wait;
			break;
     c92:	08 c0       	rjmp	.+16     	; 0xca4 <B1_task+0x82>
			
		case B1_wait:
			if(!button1)
				state = B1_sample;
			else
				state = B1_wait;
     c94:	82 e0       	ldi	r24, 0x02	; 2
     c96:	90 e0       	ldi	r25, 0x00	; 0
     c98:	9a 83       	std	Y+2, r25	; 0x02
     c9a:	89 83       	std	Y+1, r24	; 0x01
			break;
     c9c:	03 c0       	rjmp	.+6      	; 0xca4 <B1_task+0x82>
		
		default:
			state = B1_start;
     c9e:	1a 82       	std	Y+2, r1	; 0x02
     ca0:	19 82       	std	Y+1, r1	; 0x01
			break;
     ca2:	00 00       	nop
	}
	switch(state)
     ca4:	89 81       	ldd	r24, Y+1	; 0x01
     ca6:	9a 81       	ldd	r25, Y+2	; 0x02
     ca8:	81 30       	cpi	r24, 0x01	; 1
     caa:	91 05       	cpc	r25, r1
     cac:	31 f0       	breq	.+12     	; 0xcba <B1_task+0x98>
     cae:	82 30       	cpi	r24, 0x02	; 2
     cb0:	91 05       	cpc	r25, r1
     cb2:	49 f0       	breq	.+18     	; 0xcc6 <B1_task+0xa4>
     cb4:	89 2b       	or	r24, r25
     cb6:	69 f0       	breq	.+26     	; 0xcd2 <B1_task+0xb0>
			buttons |= 1;
			break;
		
		default:
		
			break;
     cb8:	0d c0       	rjmp	.+26     	; 0xcd4 <B1_task+0xb2>
	{
		case B1_start:
			break;
		
		case B1_sample:
			buttons &= ~(1);
     cba:	80 91 13 01 	lds	r24, 0x0113	; 0x800113 <buttons>
     cbe:	8e 7f       	andi	r24, 0xFE	; 254
     cc0:	80 93 13 01 	sts	0x0113, r24	; 0x800113 <buttons>
			break;
     cc4:	07 c0       	rjmp	.+14     	; 0xcd4 <B1_task+0xb2>
		
		case B1_wait:
			buttons |= 1;
     cc6:	80 91 13 01 	lds	r24, 0x0113	; 0x800113 <buttons>
     cca:	81 60       	ori	r24, 0x01	; 1
     ccc:	80 93 13 01 	sts	0x0113, r24	; 0x800113 <buttons>
			break;
     cd0:	01 c0       	rjmp	.+2      	; 0xcd4 <B1_task+0xb2>
			break;
	}
	switch(state)
	{
		case B1_start:
			break;
     cd2:	00 00       	nop
		
		default:
		
			break;
	}
	return state;
     cd4:	89 81       	ldd	r24, Y+1	; 0x01
     cd6:	9a 81       	ldd	r25, Y+2	; 0x02
}
     cd8:	0f 90       	pop	r0
     cda:	0f 90       	pop	r0
     cdc:	df 91       	pop	r29
     cde:	cf 91       	pop	r28
     ce0:	08 95       	ret

00000ce2 <B2_task>:

int B2_task(int state)
{
     ce2:	cf 93       	push	r28
     ce4:	df 93       	push	r29
     ce6:	00 d0       	rcall	.+0      	; 0xce8 <B2_task+0x6>
     ce8:	cd b7       	in	r28, 0x3d	; 61
     cea:	de b7       	in	r29, 0x3e	; 62
     cec:	9a 83       	std	Y+2, r25	; 0x02
     cee:	89 83       	std	Y+1, r24	; 0x01
	switch(state)
     cf0:	89 81       	ldd	r24, Y+1	; 0x01
     cf2:	9a 81       	ldd	r25, Y+2	; 0x02
     cf4:	81 30       	cpi	r24, 0x01	; 1
     cf6:	91 05       	cpc	r25, r1
     cf8:	51 f0       	breq	.+20     	; 0xd0e <B2_task+0x2c>
     cfa:	82 30       	cpi	r24, 0x02	; 2
     cfc:	91 05       	cpc	r25, r1
     cfe:	d9 f0       	breq	.+54     	; 0xd36 <B2_task+0x54>
     d00:	89 2b       	or	r24, r25
     d02:	69 f5       	brne	.+90     	; 0xd5e <B2_task+0x7c>
	{
		case B2_start:
			state = B2_sample;
     d04:	81 e0       	ldi	r24, 0x01	; 1
     d06:	90 e0       	ldi	r25, 0x00	; 0
     d08:	9a 83       	std	Y+2, r25	; 0x02
     d0a:	89 83       	std	Y+1, r24	; 0x01
			break;
     d0c:	2b c0       	rjmp	.+86     	; 0xd64 <B2_task+0x82>
		
		case B2_sample:
			if(button2)
     d0e:	86 e2       	ldi	r24, 0x26	; 38
     d10:	90 e0       	ldi	r25, 0x00	; 0
     d12:	fc 01       	movw	r30, r24
     d14:	80 81       	ld	r24, Z
     d16:	88 2f       	mov	r24, r24
     d18:	90 e0       	ldi	r25, 0x00	; 0
     d1a:	82 70       	andi	r24, 0x02	; 2
     d1c:	99 27       	eor	r25, r25
     d1e:	89 2b       	or	r24, r25
     d20:	29 f4       	brne	.+10     	; 0xd2c <B2_task+0x4a>
				state = B2_wait;
     d22:	82 e0       	ldi	r24, 0x02	; 2
     d24:	90 e0       	ldi	r25, 0x00	; 0
     d26:	9a 83       	std	Y+2, r25	; 0x02
     d28:	89 83       	std	Y+1, r24	; 0x01
			else
				state = B2_sample;
			break;
     d2a:	1c c0       	rjmp	.+56     	; 0xd64 <B2_task+0x82>
		
		case B2_sample:
			if(button2)
				state = B2_wait;
			else
				state = B2_sample;
     d2c:	81 e0       	ldi	r24, 0x01	; 1
     d2e:	90 e0       	ldi	r25, 0x00	; 0
     d30:	9a 83       	std	Y+2, r25	; 0x02
     d32:	89 83       	std	Y+1, r24	; 0x01
			break;
     d34:	17 c0       	rjmp	.+46     	; 0xd64 <B2_task+0x82>
		
		case B2_wait:
			if(!button2)
     d36:	86 e2       	ldi	r24, 0x26	; 38
     d38:	90 e0       	ldi	r25, 0x00	; 0
     d3a:	fc 01       	movw	r30, r24
     d3c:	80 81       	ld	r24, Z
     d3e:	88 2f       	mov	r24, r24
     d40:	90 e0       	ldi	r25, 0x00	; 0
     d42:	82 70       	andi	r24, 0x02	; 2
     d44:	99 27       	eor	r25, r25
     d46:	89 2b       	or	r24, r25
     d48:	29 f0       	breq	.+10     	; 0xd54 <B2_task+0x72>
				state = B2_sample;
     d4a:	81 e0       	ldi	r24, 0x01	; 1
     d4c:	90 e0       	ldi	r25, 0x00	; 0
     d4e:	9a 83       	std	Y+2, r25	; 0x02
     d50:	89 83       	std	Y+1, r24	; 0x01
			else
				state = B2_wait;
			break;
     d52:	08 c0       	rjmp	.+16     	; 0xd64 <B2_task+0x82>
		
		case B2_wait:
			if(!button2)
				state = B2_sample;
			else
				state = B2_wait;
     d54:	82 e0       	ldi	r24, 0x02	; 2
     d56:	90 e0       	ldi	r25, 0x00	; 0
     d58:	9a 83       	std	Y+2, r25	; 0x02
     d5a:	89 83       	std	Y+1, r24	; 0x01
			break;
     d5c:	03 c0       	rjmp	.+6      	; 0xd64 <B2_task+0x82>
		
		default:
			state = B2_start;
     d5e:	1a 82       	std	Y+2, r1	; 0x02
     d60:	19 82       	std	Y+1, r1	; 0x01
			break;
     d62:	00 00       	nop
	}
	switch(state)
     d64:	89 81       	ldd	r24, Y+1	; 0x01
     d66:	9a 81       	ldd	r25, Y+2	; 0x02
     d68:	81 30       	cpi	r24, 0x01	; 1
     d6a:	91 05       	cpc	r25, r1
     d6c:	31 f0       	breq	.+12     	; 0xd7a <B2_task+0x98>
     d6e:	82 30       	cpi	r24, 0x02	; 2
     d70:	91 05       	cpc	r25, r1
     d72:	49 f0       	breq	.+18     	; 0xd86 <B2_task+0xa4>
     d74:	89 2b       	or	r24, r25
     d76:	69 f0       	breq	.+26     	; 0xd92 <B2_task+0xb0>
			buttons |= (1 << 1);
			break;
		
		default:
		
			break;
     d78:	0d c0       	rjmp	.+26     	; 0xd94 <B2_task+0xb2>
	{
		case B2_start:
			break;
		
		case B2_sample:
			buttons &= ~(1 << 1);
     d7a:	80 91 13 01 	lds	r24, 0x0113	; 0x800113 <buttons>
     d7e:	8d 7f       	andi	r24, 0xFD	; 253
     d80:	80 93 13 01 	sts	0x0113, r24	; 0x800113 <buttons>
			break;
     d84:	07 c0       	rjmp	.+14     	; 0xd94 <B2_task+0xb2>
		
		case B2_wait:
			buttons |= (1 << 1);
     d86:	80 91 13 01 	lds	r24, 0x0113	; 0x800113 <buttons>
     d8a:	82 60       	ori	r24, 0x02	; 2
     d8c:	80 93 13 01 	sts	0x0113, r24	; 0x800113 <buttons>
			break;
     d90:	01 c0       	rjmp	.+2      	; 0xd94 <B2_task+0xb2>
			break;
	}
	switch(state)
	{
		case B2_start:
			break;
     d92:	00 00       	nop
		
		default:
		
			break;
	}
	return state;
     d94:	89 81       	ldd	r24, Y+1	; 0x01
     d96:	9a 81       	ldd	r25, Y+2	; 0x02
}
     d98:	0f 90       	pop	r0
     d9a:	0f 90       	pop	r0
     d9c:	df 91       	pop	r29
     d9e:	cf 91       	pop	r28
     da0:	08 95       	ret

00000da2 <tasks_task>:


enum TASKS{tasks_start, tasks_send, tasks_sleep} task_state;
	
int tasks_task(int state)
{
     da2:	cf 93       	push	r28
     da4:	df 93       	push	r29
     da6:	00 d0       	rcall	.+0      	; 0xda8 <tasks_task+0x6>
     da8:	cd b7       	in	r28, 0x3d	; 61
     daa:	de b7       	in	r29, 0x3e	; 62
     dac:	9a 83       	std	Y+2, r25	; 0x02
     dae:	89 83       	std	Y+1, r24	; 0x01
	static unsigned char tk; // counts to 5 seconds
	switch(state)
     db0:	89 81       	ldd	r24, Y+1	; 0x01
     db2:	9a 81       	ldd	r25, Y+2	; 0x02
     db4:	81 30       	cpi	r24, 0x01	; 1
     db6:	91 05       	cpc	r25, r1
     db8:	91 f1       	breq	.+100    	; 0xe1e <tasks_task+0x7c>
     dba:	82 30       	cpi	r24, 0x02	; 2
     dbc:	91 05       	cpc	r25, r1
     dbe:	09 f4       	brne	.+2      	; 0xdc2 <tasks_task+0x20>
     dc0:	3f c0       	rjmp	.+126    	; 0xe40 <tasks_task+0x9e>
     dc2:	89 2b       	or	r24, r25
     dc4:	d1 f5       	brne	.+116    	; 0xe3a <tasks_task+0x98>
	{
		case tasks_start:			// initializes all ports
			DDRA = 0x00; PORTA = 0xff;
     dc6:	81 e2       	ldi	r24, 0x21	; 33
     dc8:	90 e0       	ldi	r25, 0x00	; 0
     dca:	fc 01       	movw	r30, r24
     dcc:	10 82       	st	Z, r1
     dce:	82 e2       	ldi	r24, 0x22	; 34
     dd0:	90 e0       	ldi	r25, 0x00	; 0
     dd2:	2f ef       	ldi	r18, 0xFF	; 255
     dd4:	fc 01       	movw	r30, r24
     dd6:	20 83       	st	Z, r18
			DDRB = 0xff; PORTB = 0x00;
     dd8:	84 e2       	ldi	r24, 0x24	; 36
     dda:	90 e0       	ldi	r25, 0x00	; 0
     ddc:	2f ef       	ldi	r18, 0xFF	; 255
     dde:	fc 01       	movw	r30, r24
     de0:	20 83       	st	Z, r18
     de2:	85 e2       	ldi	r24, 0x25	; 37
     de4:	90 e0       	ldi	r25, 0x00	; 0
     de6:	fc 01       	movw	r30, r24
     de8:	10 82       	st	Z, r1
			DDRC = 0x00; PORTC = 0xff;
     dea:	87 e2       	ldi	r24, 0x27	; 39
     dec:	90 e0       	ldi	r25, 0x00	; 0
     dee:	fc 01       	movw	r30, r24
     df0:	10 82       	st	Z, r1
     df2:	88 e2       	ldi	r24, 0x28	; 40
     df4:	90 e0       	ldi	r25, 0x00	; 0
     df6:	2f ef       	ldi	r18, 0xFF	; 255
     df8:	fc 01       	movw	r30, r24
     dfa:	20 83       	st	Z, r18
			DDRD = 0xff; PORTD = 0x00;
     dfc:	8a e2       	ldi	r24, 0x2A	; 42
     dfe:	90 e0       	ldi	r25, 0x00	; 0
     e00:	2f ef       	ldi	r18, 0xFF	; 255
     e02:	fc 01       	movw	r30, r24
     e04:	20 83       	st	Z, r18
     e06:	8b e2       	ldi	r24, 0x2B	; 43
     e08:	90 e0       	ldi	r25, 0x00	; 0
     e0a:	fc 01       	movw	r30, r24
     e0c:	10 82       	st	Z, r1
			tk = 50;
     e0e:	82 e3       	ldi	r24, 0x32	; 50
     e10:	80 93 15 01 	sts	0x0115, r24	; 0x800115 <tk.1859>
			state = tasks_send;
     e14:	81 e0       	ldi	r24, 0x01	; 1
     e16:	90 e0       	ldi	r25, 0x00	; 0
     e18:	9a 83       	std	Y+2, r25	; 0x02
     e1a:	89 83       	std	Y+1, r24	; 0x01
			break;
     e1c:	12 c0       	rjmp	.+36     	; 0xe42 <tasks_task+0xa0>
		case tasks_send:
			if(tk == 0)
     e1e:	80 91 15 01 	lds	r24, 0x0115	; 0x800115 <tk.1859>
     e22:	88 23       	and	r24, r24
     e24:	29 f4       	brne	.+10     	; 0xe30 <tasks_task+0x8e>
				state = tasks_sleep;
     e26:	82 e0       	ldi	r24, 0x02	; 2
     e28:	90 e0       	ldi	r25, 0x00	; 0
     e2a:	9a 83       	std	Y+2, r25	; 0x02
     e2c:	89 83       	std	Y+1, r24	; 0x01
			else
				state = tasks_send;
			break;
     e2e:	09 c0       	rjmp	.+18     	; 0xe42 <tasks_task+0xa0>
			break;
		case tasks_send:
			if(tk == 0)
				state = tasks_sleep;
			else
				state = tasks_send;
     e30:	81 e0       	ldi	r24, 0x01	; 1
     e32:	90 e0       	ldi	r25, 0x00	; 0
     e34:	9a 83       	std	Y+2, r25	; 0x02
     e36:	89 83       	std	Y+1, r24	; 0x01
			break;
     e38:	04 c0       	rjmp	.+8      	; 0xe42 <tasks_task+0xa0>
		case tasks_sleep:
			break;
		default:
			state = tasks_start;
     e3a:	1a 82       	std	Y+2, r1	; 0x02
     e3c:	19 82       	std	Y+1, r1	; 0x01
			break;
     e3e:	01 c0       	rjmp	.+2      	; 0xe42 <tasks_task+0xa0>
				state = tasks_sleep;
			else
				state = tasks_send;
			break;
		case tasks_sleep:
			break;
     e40:	00 00       	nop
		default:
			state = tasks_start;
			break;
	}
	switch(state)
     e42:	89 81       	ldd	r24, Y+1	; 0x01
     e44:	9a 81       	ldd	r25, Y+2	; 0x02
     e46:	81 30       	cpi	r24, 0x01	; 1
     e48:	91 05       	cpc	r25, r1
     e4a:	51 f0       	breq	.+20     	; 0xe60 <tasks_task+0xbe>
     e4c:	82 30       	cpi	r24, 0x02	; 2
     e4e:	91 05       	cpc	r25, r1
     e50:	81 f1       	breq	.+96     	; 0xeb2 <tasks_task+0x110>
     e52:	89 2b       	or	r24, r25
     e54:	59 f5       	brne	.+86     	; 0xeac <tasks_task+0x10a>
		case tasks_start:			// initializes all ports
			/*DDRA = 0x00; PORTA = 0xff;
			DDRB = 0xff; PORTB = 0x00;
			DDRC = 0x00; PORTC = 0xff;
			DDRD = 0xff; PORTD = 0x00;*/
			state = tasks_send;
     e56:	81 e0       	ldi	r24, 0x01	; 1
     e58:	90 e0       	ldi	r25, 0x00	; 0
     e5a:	9a 83       	std	Y+2, r25	; 0x02
     e5c:	89 83       	std	Y+1, r24	; 0x01
			break;
     e5e:	2a c0       	rjmp	.+84     	; 0xeb4 <tasks_task+0x112>
		case tasks_send:
			PORTB = presSens | buttons | magTL | magTR | magBR | magBL; // temporary
     e60:	85 e2       	ldi	r24, 0x25	; 37
     e62:	90 e0       	ldi	r25, 0x00	; 0
     e64:	30 91 04 01 	lds	r19, 0x0104	; 0x800104 <__data_end>
     e68:	20 91 13 01 	lds	r18, 0x0113	; 0x800113 <buttons>
     e6c:	32 2b       	or	r19, r18
     e6e:	20 91 08 01 	lds	r18, 0x0108	; 0x800108 <magTL>
     e72:	32 2b       	or	r19, r18
     e74:	20 91 09 01 	lds	r18, 0x0109	; 0x800109 <magTR>
     e78:	32 2b       	or	r19, r18
     e7a:	20 91 0b 01 	lds	r18, 0x010B	; 0x80010b <magBR>
     e7e:	32 2b       	or	r19, r18
     e80:	20 91 0a 01 	lds	r18, 0x010A	; 0x80010a <magBL>
     e84:	23 2b       	or	r18, r19
     e86:	fc 01       	movw	r30, r24
     e88:	20 83       	st	Z, r18
			if(ADC == 0)
     e8a:	88 e7       	ldi	r24, 0x78	; 120
     e8c:	90 e0       	ldi	r25, 0x00	; 0
     e8e:	fc 01       	movw	r30, r24
     e90:	80 81       	ld	r24, Z
     e92:	91 81       	ldd	r25, Z+1	; 0x01
     e94:	89 2b       	or	r24, r25
     e96:	31 f4       	brne	.+12     	; 0xea4 <tasks_task+0x102>
				tk--;
     e98:	80 91 15 01 	lds	r24, 0x0115	; 0x800115 <tk.1859>
     e9c:	81 50       	subi	r24, 0x01	; 1
     e9e:	80 93 15 01 	sts	0x0115, r24	; 0x800115 <tk.1859>
			else
				tk = 50;
			break;
     ea2:	08 c0       	rjmp	.+16     	; 0xeb4 <tasks_task+0x112>
		case tasks_send:
			PORTB = presSens | buttons | magTL | magTR | magBR | magBL; // temporary
			if(ADC == 0)
				tk--;
			else
				tk = 50;
     ea4:	82 e3       	ldi	r24, 0x32	; 50
     ea6:	80 93 15 01 	sts	0x0115, r24	; 0x800115 <tk.1859>
			break;
     eaa:	04 c0       	rjmp	.+8      	; 0xeb4 <tasks_task+0x112>
		case tasks_sleep:
			//sleep();
			break;
		default:
			state = tasks_start;
     eac:	1a 82       	std	Y+2, r1	; 0x02
     eae:	19 82       	std	Y+1, r1	; 0x01
			break;
     eb0:	01 c0       	rjmp	.+2      	; 0xeb4 <tasks_task+0x112>
			else
				tk = 50;
			break;
		case tasks_sleep:
			//sleep();
			break;
     eb2:	00 00       	nop
		default:
			state = tasks_start;
			break;
	}
	
	return state;
     eb4:	89 81       	ldd	r24, Y+1	; 0x01
     eb6:	9a 81       	ldd	r25, Y+2	; 0x02
}
     eb8:	0f 90       	pop	r0
     eba:	0f 90       	pop	r0
     ebc:	df 91       	pop	r29
     ebe:	cf 91       	pop	r28
     ec0:	08 95       	ret

00000ec2 <main>:


int main(void)
{
     ec2:	cf 93       	push	r28
     ec4:	df 93       	push	r29
     ec6:	cd b7       	in	r28, 0x3d	; 61
     ec8:	de b7       	in	r29, 0x3e	; 62
     eca:	c0 57       	subi	r28, 0x70	; 112
     ecc:	d1 09       	sbc	r29, r1
     ece:	0f b6       	in	r0, 0x3f	; 63
     ed0:	f8 94       	cli
     ed2:	de bf       	out	0x3e, r29	; 62
     ed4:	0f be       	out	0x3f, r0	; 63
     ed6:	cd bf       	out	0x3d, r28	; 61
    /* Replace with your application code */
	unsigned char contTime = 100;
     ed8:	84 e6       	ldi	r24, 0x64	; 100
     eda:	89 83       	std	Y+1, r24	; 0x01
	task  Pressure;
	task Poll1;
	task Poll2;
	task Mag;
	
	controller.state = tasks_start;
     edc:	1b 82       	std	Y+3, r1	; 0x03
	controller.elapsedTime = contTime;
     ede:	89 81       	ldd	r24, Y+1	; 0x01
     ee0:	88 2f       	mov	r24, r24
     ee2:	90 e0       	ldi	r25, 0x00	; 0
     ee4:	a0 e0       	ldi	r26, 0x00	; 0
     ee6:	b0 e0       	ldi	r27, 0x00	; 0
     ee8:	88 87       	std	Y+8, r24	; 0x08
     eea:	99 87       	std	Y+9, r25	; 0x09
     eec:	aa 87       	std	Y+10, r26	; 0x0a
     eee:	bb 87       	std	Y+11, r27	; 0x0b
	controller.period = contTime;
     ef0:	89 81       	ldd	r24, Y+1	; 0x01
     ef2:	88 2f       	mov	r24, r24
     ef4:	90 e0       	ldi	r25, 0x00	; 0
     ef6:	a0 e0       	ldi	r26, 0x00	; 0
     ef8:	b0 e0       	ldi	r27, 0x00	; 0
     efa:	8c 83       	std	Y+4, r24	; 0x04
     efc:	9d 83       	std	Y+5, r25	; 0x05
     efe:	ae 83       	std	Y+6, r26	; 0x06
     f00:	bf 83       	std	Y+7, r27	; 0x07
	controller.TickFct = &tasks_task;
     f02:	81 ed       	ldi	r24, 0xD1	; 209
     f04:	96 e0       	ldi	r25, 0x06	; 6
     f06:	9d 87       	std	Y+13, r25	; 0x0d
     f08:	8c 87       	std	Y+12, r24	; 0x0c
	
	Pressure.state = presStart;
     f0a:	1e 86       	std	Y+14, r1	; 0x0e
	Pressure.TickFct = &PRESSENSE_task;
     f0c:	88 eb       	ldi	r24, 0xB8	; 184
     f0e:	90 e0       	ldi	r25, 0x00	; 0
     f10:	98 8f       	std	Y+24, r25	; 0x18
     f12:	8f 8b       	std	Y+23, r24	; 0x17
	Pressure.elapsedTime = contTime;
     f14:	89 81       	ldd	r24, Y+1	; 0x01
     f16:	88 2f       	mov	r24, r24
     f18:	90 e0       	ldi	r25, 0x00	; 0
     f1a:	a0 e0       	ldi	r26, 0x00	; 0
     f1c:	b0 e0       	ldi	r27, 0x00	; 0
     f1e:	8b 8b       	std	Y+19, r24	; 0x13
     f20:	9c 8b       	std	Y+20, r25	; 0x14
     f22:	ad 8b       	std	Y+21, r26	; 0x15
     f24:	be 8b       	std	Y+22, r27	; 0x16
	Pressure.period = contTime;
     f26:	89 81       	ldd	r24, Y+1	; 0x01
     f28:	88 2f       	mov	r24, r24
     f2a:	90 e0       	ldi	r25, 0x00	; 0
     f2c:	a0 e0       	ldi	r26, 0x00	; 0
     f2e:	b0 e0       	ldi	r27, 0x00	; 0
     f30:	8f 87       	std	Y+15, r24	; 0x0f
     f32:	98 8b       	std	Y+16, r25	; 0x10
     f34:	a9 8b       	std	Y+17, r26	; 0x11
     f36:	ba 8b       	std	Y+18, r27	; 0x12
	tasksPeriodGCD = contTime;
     f38:	89 81       	ldd	r24, Y+1	; 0x01
     f3a:	88 2f       	mov	r24, r24
     f3c:	90 e0       	ldi	r25, 0x00	; 0
     f3e:	a0 e0       	ldi	r26, 0x00	; 0
     f40:	b0 e0       	ldi	r27, 0x00	; 0
     f42:	80 93 00 01 	sts	0x0100, r24	; 0x800100 <__DATA_REGION_ORIGIN__>
     f46:	90 93 01 01 	sts	0x0101, r25	; 0x800101 <__DATA_REGION_ORIGIN__+0x1>
     f4a:	a0 93 02 01 	sts	0x0102, r26	; 0x800102 <__DATA_REGION_ORIGIN__+0x2>
     f4e:	b0 93 03 01 	sts	0x0103, r27	; 0x800103 <__DATA_REGION_ORIGIN__+0x3>
	
	Poll1.state = B1_start;
     f52:	19 8e       	std	Y+25, r1	; 0x19
	Poll1.elapsedTime = contTime;
     f54:	89 81       	ldd	r24, Y+1	; 0x01
     f56:	88 2f       	mov	r24, r24
     f58:	90 e0       	ldi	r25, 0x00	; 0
     f5a:	a0 e0       	ldi	r26, 0x00	; 0
     f5c:	b0 e0       	ldi	r27, 0x00	; 0
     f5e:	8e 8f       	std	Y+30, r24	; 0x1e
     f60:	9f 8f       	std	Y+31, r25	; 0x1f
     f62:	a8 a3       	std	Y+32, r26	; 0x20
     f64:	b9 a3       	std	Y+33, r27	; 0x21
	Poll1.period = contTime;
     f66:	89 81       	ldd	r24, Y+1	; 0x01
     f68:	88 2f       	mov	r24, r24
     f6a:	90 e0       	ldi	r25, 0x00	; 0
     f6c:	a0 e0       	ldi	r26, 0x00	; 0
     f6e:	b0 e0       	ldi	r27, 0x00	; 0
     f70:	8a 8f       	std	Y+26, r24	; 0x1a
     f72:	9b 8f       	std	Y+27, r25	; 0x1b
     f74:	ac 8f       	std	Y+28, r26	; 0x1c
     f76:	bd 8f       	std	Y+29, r27	; 0x1d
	Poll1.TickFct = &B1_task;
     f78:	81 e1       	ldi	r24, 0x11	; 17
     f7a:	96 e0       	ldi	r25, 0x06	; 6
     f7c:	9b a3       	std	Y+35, r25	; 0x23
     f7e:	8a a3       	std	Y+34, r24	; 0x22
	
	Poll2.state = B2_start;
     f80:	1c a2       	std	Y+36, r1	; 0x24
	Poll2.elapsedTime = contTime;
     f82:	89 81       	ldd	r24, Y+1	; 0x01
     f84:	88 2f       	mov	r24, r24
     f86:	90 e0       	ldi	r25, 0x00	; 0
     f88:	a0 e0       	ldi	r26, 0x00	; 0
     f8a:	b0 e0       	ldi	r27, 0x00	; 0
     f8c:	89 a7       	std	Y+41, r24	; 0x29
     f8e:	9a a7       	std	Y+42, r25	; 0x2a
     f90:	ab a7       	std	Y+43, r26	; 0x2b
     f92:	bc a7       	std	Y+44, r27	; 0x2c
	Poll2.period = contTime;
     f94:	89 81       	ldd	r24, Y+1	; 0x01
     f96:	88 2f       	mov	r24, r24
     f98:	90 e0       	ldi	r25, 0x00	; 0
     f9a:	a0 e0       	ldi	r26, 0x00	; 0
     f9c:	b0 e0       	ldi	r27, 0x00	; 0
     f9e:	8d a3       	std	Y+37, r24	; 0x25
     fa0:	9e a3       	std	Y+38, r25	; 0x26
     fa2:	af a3       	std	Y+39, r26	; 0x27
     fa4:	b8 a7       	std	Y+40, r27	; 0x28
	Poll2.TickFct = &B2_task;
     fa6:	81 e7       	ldi	r24, 0x71	; 113
     fa8:	96 e0       	ldi	r25, 0x06	; 6
     faa:	9e a7       	std	Y+46, r25	; 0x2e
     fac:	8d a7       	std	Y+45, r24	; 0x2d
	
	Mag.state = magStart;
     fae:	1f a6       	std	Y+47, r1	; 0x2f
	Mag.elapsedTime = contTime;
     fb0:	89 81       	ldd	r24, Y+1	; 0x01
     fb2:	88 2f       	mov	r24, r24
     fb4:	90 e0       	ldi	r25, 0x00	; 0
     fb6:	a0 e0       	ldi	r26, 0x00	; 0
     fb8:	b0 e0       	ldi	r27, 0x00	; 0
     fba:	8c ab       	std	Y+52, r24	; 0x34
     fbc:	9d ab       	std	Y+53, r25	; 0x35
     fbe:	ae ab       	std	Y+54, r26	; 0x36
     fc0:	bf ab       	std	Y+55, r27	; 0x37
	Mag.period = contTime;
     fc2:	89 81       	ldd	r24, Y+1	; 0x01
     fc4:	88 2f       	mov	r24, r24
     fc6:	90 e0       	ldi	r25, 0x00	; 0
     fc8:	a0 e0       	ldi	r26, 0x00	; 0
     fca:	b0 e0       	ldi	r27, 0x00	; 0
     fcc:	88 ab       	std	Y+48, r24	; 0x30
     fce:	99 ab       	std	Y+49, r25	; 0x31
     fd0:	aa ab       	std	Y+50, r26	; 0x32
     fd2:	bb ab       	std	Y+51, r27	; 0x33
	Mag.TickFct = &magSense_task;
     fd4:	80 e7       	ldi	r24, 0x70	; 112
     fd6:	91 e0       	ldi	r25, 0x01	; 1
     fd8:	99 af       	std	Y+57, r25	; 0x39
     fda:	88 af       	std	Y+56, r24	; 0x38
	/*DDRA = 0x00; PORTA = 0xff;
	DDRB = 0xff; PORTB = 0x00;
	DDRC = 0xff; PORTC = 0x00;
	DDRD = 0xff; PORTD = 0x00;
	*/
	TimerSet(contTime);
     fdc:	89 81       	ldd	r24, Y+1	; 0x01
     fde:	88 2f       	mov	r24, r24
     fe0:	90 e0       	ldi	r25, 0x00	; 0
     fe2:	a0 e0       	ldi	r26, 0x00	; 0
     fe4:	b0 e0       	ldi	r27, 0x00	; 0
     fe6:	bc 01       	movw	r22, r24
     fe8:	cd 01       	movw	r24, r26
     fea:	b6 dd       	rcall	.-1172   	; 0xb58 <TimerSet>
	TimerOn();
     fec:	e3 dd       	rcall	.-1082   	; 0xbb4 <TimerOn>
     fee:	8b e0       	ldi	r24, 0x0B	; 11
	
	
	task temp[] = {controller, Pressure, Poll1, Poll2, Mag};
     ff0:	fe 01       	movw	r30, r28
     ff2:	33 96       	adiw	r30, 0x03	; 3
     ff4:	de 01       	movw	r26, r28
     ff6:	da 96       	adiw	r26, 0x3a	; 58
     ff8:	01 90       	ld	r0, Z+
     ffa:	0d 92       	st	X+, r0
     ffc:	8a 95       	dec	r24
     ffe:	e1 f7       	brne	.-8      	; 0xff8 <main+0x136>
    1000:	ce 01       	movw	r24, r28
    1002:	8b 5b       	subi	r24, 0xBB	; 187
    1004:	9f 4f       	sbci	r25, 0xFF	; 255
    1006:	2b e0       	ldi	r18, 0x0B	; 11
    1008:	fe 01       	movw	r30, r28
    100a:	3e 96       	adiw	r30, 0x0e	; 14
    100c:	dc 01       	movw	r26, r24
    100e:	01 90       	ld	r0, Z+
    1010:	0d 92       	st	X+, r0
    1012:	2a 95       	dec	r18
    1014:	e1 f7       	brne	.-8      	; 0x100e <main+0x14c>
    1016:	ce 01       	movw	r24, r28
    1018:	80 5b       	subi	r24, 0xB0	; 176
    101a:	9f 4f       	sbci	r25, 0xFF	; 255
    101c:	2b e0       	ldi	r18, 0x0B	; 11
    101e:	fe 01       	movw	r30, r28
    1020:	79 96       	adiw	r30, 0x19	; 25
    1022:	dc 01       	movw	r26, r24
    1024:	01 90       	ld	r0, Z+
    1026:	0d 92       	st	X+, r0
    1028:	2a 95       	dec	r18
    102a:	e1 f7       	brne	.-8      	; 0x1024 <main+0x162>
    102c:	ce 01       	movw	r24, r28
    102e:	85 5a       	subi	r24, 0xA5	; 165
    1030:	9f 4f       	sbci	r25, 0xFF	; 255
    1032:	2b e0       	ldi	r18, 0x0B	; 11
    1034:	fe 01       	movw	r30, r28
    1036:	b4 96       	adiw	r30, 0x24	; 36
    1038:	dc 01       	movw	r26, r24
    103a:	01 90       	ld	r0, Z+
    103c:	0d 92       	st	X+, r0
    103e:	2a 95       	dec	r18
    1040:	e1 f7       	brne	.-8      	; 0x103a <main+0x178>
    1042:	ce 01       	movw	r24, r28
    1044:	8a 59       	subi	r24, 0x9A	; 154
    1046:	9f 4f       	sbci	r25, 0xFF	; 255
    1048:	2b e0       	ldi	r18, 0x0B	; 11
    104a:	fe 01       	movw	r30, r28
    104c:	bf 96       	adiw	r30, 0x2f	; 47
    104e:	dc 01       	movw	r26, r24
    1050:	01 90       	ld	r0, Z+
    1052:	0d 92       	st	X+, r0
    1054:	2a 95       	dec	r18
    1056:	e1 f7       	brne	.-8      	; 0x1050 <main+0x18e>
    1058:	ce 01       	movw	r24, r28
	tasks = &temp;
    105a:	ca 96       	adiw	r24, 0x3a	; 58
    105c:	90 93 17 01 	sts	0x0117, r25	; 0x800117 <tasks+0x1>
    1060:	80 93 16 01 	sts	0x0116, r24	; 0x800116 <tasks>
    1064:	85 e0       	ldi	r24, 0x05	; 5
	tasksNum = 5;
    1066:	80 93 12 01 	sts	0x0112, r24	; 0x800112 <tasksNum>
    106a:	1a 82       	std	Y+2, r1	; 0x02
	//task * temp[] = {Pressure};
		
	unsigned char selector = 0;
    106c:	ff cf       	rjmp	.-2      	; 0x106c <main+0x1aa>

0000106e <__cmpsf2>:
		//ADC_ON();
		//PORTB = ADC_SEND();
		//ADC_SELECT(selector);
		//selector++;
		//PORTB = presSens;
    }
    106e:	2f d0       	rcall	.+94     	; 0x10ce <__fp_cmp>
    1070:	08 f4       	brcc	.+2      	; 0x1074 <__cmpsf2+0x6>
    1072:	81 e0       	ldi	r24, 0x01	; 1
    1074:	08 95       	ret

00001076 <__fixunssfsi>:
    1076:	57 d0       	rcall	.+174    	; 0x1126 <__fp_splitA>
    1078:	88 f0       	brcs	.+34     	; 0x109c <__fixunssfsi+0x26>
    107a:	9f 57       	subi	r25, 0x7F	; 127
    107c:	90 f0       	brcs	.+36     	; 0x10a2 <__fixunssfsi+0x2c>
    107e:	b9 2f       	mov	r27, r25
    1080:	99 27       	eor	r25, r25
    1082:	b7 51       	subi	r27, 0x17	; 23
    1084:	a0 f0       	brcs	.+40     	; 0x10ae <__fixunssfsi+0x38>
    1086:	d1 f0       	breq	.+52     	; 0x10bc <__fixunssfsi+0x46>
    1088:	66 0f       	add	r22, r22
    108a:	77 1f       	adc	r23, r23
    108c:	88 1f       	adc	r24, r24
    108e:	99 1f       	adc	r25, r25
    1090:	1a f0       	brmi	.+6      	; 0x1098 <__fixunssfsi+0x22>
    1092:	ba 95       	dec	r27
    1094:	c9 f7       	brne	.-14     	; 0x1088 <__fixunssfsi+0x12>
    1096:	12 c0       	rjmp	.+36     	; 0x10bc <__fixunssfsi+0x46>
    1098:	b1 30       	cpi	r27, 0x01	; 1
    109a:	81 f0       	breq	.+32     	; 0x10bc <__fixunssfsi+0x46>
    109c:	5e d0       	rcall	.+188    	; 0x115a <__fp_zero>
    109e:	b1 e0       	ldi	r27, 0x01	; 1
    10a0:	08 95       	ret
    10a2:	5b c0       	rjmp	.+182    	; 0x115a <__fp_zero>
    10a4:	67 2f       	mov	r22, r23
    10a6:	78 2f       	mov	r23, r24
    10a8:	88 27       	eor	r24, r24
    10aa:	b8 5f       	subi	r27, 0xF8	; 248
    10ac:	39 f0       	breq	.+14     	; 0x10bc <__fixunssfsi+0x46>
    10ae:	b9 3f       	cpi	r27, 0xF9	; 249
    10b0:	cc f3       	brlt	.-14     	; 0x10a4 <__fixunssfsi+0x2e>
    10b2:	86 95       	lsr	r24
    10b4:	77 95       	ror	r23
    10b6:	67 95       	ror	r22
    10b8:	b3 95       	inc	r27
    10ba:	d9 f7       	brne	.-10     	; 0x10b2 <__fixunssfsi+0x3c>
    10bc:	3e f4       	brtc	.+14     	; 0x10cc <__fixunssfsi+0x56>
    10be:	90 95       	com	r25
    10c0:	80 95       	com	r24
    10c2:	70 95       	com	r23
    10c4:	61 95       	neg	r22
    10c6:	7f 4f       	sbci	r23, 0xFF	; 255
    10c8:	8f 4f       	sbci	r24, 0xFF	; 255
    10ca:	9f 4f       	sbci	r25, 0xFF	; 255
    10cc:	08 95       	ret

000010ce <__fp_cmp>:
    10ce:	99 0f       	add	r25, r25
    10d0:	00 08       	sbc	r0, r0
    10d2:	55 0f       	add	r21, r21
    10d4:	aa 0b       	sbc	r26, r26
    10d6:	e0 e8       	ldi	r30, 0x80	; 128
    10d8:	fe ef       	ldi	r31, 0xFE	; 254
    10da:	16 16       	cp	r1, r22
    10dc:	17 06       	cpc	r1, r23
    10de:	e8 07       	cpc	r30, r24
    10e0:	f9 07       	cpc	r31, r25
    10e2:	c0 f0       	brcs	.+48     	; 0x1114 <__fp_cmp+0x46>
    10e4:	12 16       	cp	r1, r18
    10e6:	13 06       	cpc	r1, r19
    10e8:	e4 07       	cpc	r30, r20
    10ea:	f5 07       	cpc	r31, r21
    10ec:	98 f0       	brcs	.+38     	; 0x1114 <__fp_cmp+0x46>
    10ee:	62 1b       	sub	r22, r18
    10f0:	73 0b       	sbc	r23, r19
    10f2:	84 0b       	sbc	r24, r20
    10f4:	95 0b       	sbc	r25, r21
    10f6:	39 f4       	brne	.+14     	; 0x1106 <__fp_cmp+0x38>
    10f8:	0a 26       	eor	r0, r26
    10fa:	61 f0       	breq	.+24     	; 0x1114 <__fp_cmp+0x46>
    10fc:	23 2b       	or	r18, r19
    10fe:	24 2b       	or	r18, r20
    1100:	25 2b       	or	r18, r21
    1102:	21 f4       	brne	.+8      	; 0x110c <__fp_cmp+0x3e>
    1104:	08 95       	ret
    1106:	0a 26       	eor	r0, r26
    1108:	09 f4       	brne	.+2      	; 0x110c <__fp_cmp+0x3e>
    110a:	a1 40       	sbci	r26, 0x01	; 1
    110c:	a6 95       	lsr	r26
    110e:	8f ef       	ldi	r24, 0xFF	; 255
    1110:	81 1d       	adc	r24, r1
    1112:	81 1d       	adc	r24, r1
    1114:	08 95       	ret

00001116 <__fp_split3>:
    1116:	57 fd       	sbrc	r21, 7
    1118:	90 58       	subi	r25, 0x80	; 128
    111a:	44 0f       	add	r20, r20
    111c:	55 1f       	adc	r21, r21
    111e:	59 f0       	breq	.+22     	; 0x1136 <__fp_splitA+0x10>
    1120:	5f 3f       	cpi	r21, 0xFF	; 255
    1122:	71 f0       	breq	.+28     	; 0x1140 <__fp_splitA+0x1a>
    1124:	47 95       	ror	r20

00001126 <__fp_splitA>:
    1126:	88 0f       	add	r24, r24
    1128:	97 fb       	bst	r25, 7
    112a:	99 1f       	adc	r25, r25
    112c:	61 f0       	breq	.+24     	; 0x1146 <__fp_splitA+0x20>
    112e:	9f 3f       	cpi	r25, 0xFF	; 255
    1130:	79 f0       	breq	.+30     	; 0x1150 <__fp_splitA+0x2a>
    1132:	87 95       	ror	r24
    1134:	08 95       	ret
    1136:	12 16       	cp	r1, r18
    1138:	13 06       	cpc	r1, r19
    113a:	14 06       	cpc	r1, r20
    113c:	55 1f       	adc	r21, r21
    113e:	f2 cf       	rjmp	.-28     	; 0x1124 <__fp_split3+0xe>
    1140:	46 95       	lsr	r20
    1142:	f1 df       	rcall	.-30     	; 0x1126 <__fp_splitA>
    1144:	08 c0       	rjmp	.+16     	; 0x1156 <__fp_splitA+0x30>
    1146:	16 16       	cp	r1, r22
    1148:	17 06       	cpc	r1, r23
    114a:	18 06       	cpc	r1, r24
    114c:	99 1f       	adc	r25, r25
    114e:	f1 cf       	rjmp	.-30     	; 0x1132 <__fp_splitA+0xc>
    1150:	86 95       	lsr	r24
    1152:	71 05       	cpc	r23, r1
    1154:	61 05       	cpc	r22, r1
    1156:	08 94       	sec
    1158:	08 95       	ret

0000115a <__fp_zero>:
    115a:	e8 94       	clt

0000115c <__fp_szero>:
    115c:	bb 27       	eor	r27, r27
    115e:	66 27       	eor	r22, r22
    1160:	77 27       	eor	r23, r23
    1162:	cb 01       	movw	r24, r22
    1164:	97 f9       	bld	r25, 7
    1166:	08 95       	ret

00001168 <__gesf2>:
    1168:	b2 df       	rcall	.-156    	; 0x10ce <__fp_cmp>
    116a:	08 f4       	brcc	.+2      	; 0x116e <__gesf2+0x6>
    116c:	8f ef       	ldi	r24, 0xFF	; 255
    116e:	08 95       	ret

00001170 <__mulsf3>:
    1170:	0b d0       	rcall	.+22     	; 0x1188 <__mulsf3x>
    1172:	78 c0       	rjmp	.+240    	; 0x1264 <__fp_round>
    1174:	69 d0       	rcall	.+210    	; 0x1248 <__fp_pscA>
    1176:	28 f0       	brcs	.+10     	; 0x1182 <__mulsf3+0x12>
    1178:	6e d0       	rcall	.+220    	; 0x1256 <__fp_pscB>
    117a:	18 f0       	brcs	.+6      	; 0x1182 <__mulsf3+0x12>
    117c:	95 23       	and	r25, r21
    117e:	09 f0       	breq	.+2      	; 0x1182 <__mulsf3+0x12>
    1180:	5a c0       	rjmp	.+180    	; 0x1236 <__fp_inf>
    1182:	5f c0       	rjmp	.+190    	; 0x1242 <__fp_nan>
    1184:	11 24       	eor	r1, r1
    1186:	ea cf       	rjmp	.-44     	; 0x115c <__fp_szero>

00001188 <__mulsf3x>:
    1188:	c6 df       	rcall	.-116    	; 0x1116 <__fp_split3>
    118a:	a0 f3       	brcs	.-24     	; 0x1174 <__mulsf3+0x4>

0000118c <__mulsf3_pse>:
    118c:	95 9f       	mul	r25, r21
    118e:	d1 f3       	breq	.-12     	; 0x1184 <__mulsf3+0x14>
    1190:	95 0f       	add	r25, r21
    1192:	50 e0       	ldi	r21, 0x00	; 0
    1194:	55 1f       	adc	r21, r21
    1196:	62 9f       	mul	r22, r18
    1198:	f0 01       	movw	r30, r0
    119a:	72 9f       	mul	r23, r18
    119c:	bb 27       	eor	r27, r27
    119e:	f0 0d       	add	r31, r0
    11a0:	b1 1d       	adc	r27, r1
    11a2:	63 9f       	mul	r22, r19
    11a4:	aa 27       	eor	r26, r26
    11a6:	f0 0d       	add	r31, r0
    11a8:	b1 1d       	adc	r27, r1
    11aa:	aa 1f       	adc	r26, r26
    11ac:	64 9f       	mul	r22, r20
    11ae:	66 27       	eor	r22, r22
    11b0:	b0 0d       	add	r27, r0
    11b2:	a1 1d       	adc	r26, r1
    11b4:	66 1f       	adc	r22, r22
    11b6:	82 9f       	mul	r24, r18
    11b8:	22 27       	eor	r18, r18
    11ba:	b0 0d       	add	r27, r0
    11bc:	a1 1d       	adc	r26, r1
    11be:	62 1f       	adc	r22, r18
    11c0:	73 9f       	mul	r23, r19
    11c2:	b0 0d       	add	r27, r0
    11c4:	a1 1d       	adc	r26, r1
    11c6:	62 1f       	adc	r22, r18
    11c8:	83 9f       	mul	r24, r19
    11ca:	a0 0d       	add	r26, r0
    11cc:	61 1d       	adc	r22, r1
    11ce:	22 1f       	adc	r18, r18
    11d0:	74 9f       	mul	r23, r20
    11d2:	33 27       	eor	r19, r19
    11d4:	a0 0d       	add	r26, r0
    11d6:	61 1d       	adc	r22, r1
    11d8:	23 1f       	adc	r18, r19
    11da:	84 9f       	mul	r24, r20
    11dc:	60 0d       	add	r22, r0
    11de:	21 1d       	adc	r18, r1
    11e0:	82 2f       	mov	r24, r18
    11e2:	76 2f       	mov	r23, r22
    11e4:	6a 2f       	mov	r22, r26
    11e6:	11 24       	eor	r1, r1
    11e8:	9f 57       	subi	r25, 0x7F	; 127
    11ea:	50 40       	sbci	r21, 0x00	; 0
    11ec:	8a f0       	brmi	.+34     	; 0x1210 <__mulsf3_pse+0x84>
    11ee:	e1 f0       	breq	.+56     	; 0x1228 <__mulsf3_pse+0x9c>
    11f0:	88 23       	and	r24, r24
    11f2:	4a f0       	brmi	.+18     	; 0x1206 <__mulsf3_pse+0x7a>
    11f4:	ee 0f       	add	r30, r30
    11f6:	ff 1f       	adc	r31, r31
    11f8:	bb 1f       	adc	r27, r27
    11fa:	66 1f       	adc	r22, r22
    11fc:	77 1f       	adc	r23, r23
    11fe:	88 1f       	adc	r24, r24
    1200:	91 50       	subi	r25, 0x01	; 1
    1202:	50 40       	sbci	r21, 0x00	; 0
    1204:	a9 f7       	brne	.-22     	; 0x11f0 <__mulsf3_pse+0x64>
    1206:	9e 3f       	cpi	r25, 0xFE	; 254
    1208:	51 05       	cpc	r21, r1
    120a:	70 f0       	brcs	.+28     	; 0x1228 <__mulsf3_pse+0x9c>
    120c:	14 c0       	rjmp	.+40     	; 0x1236 <__fp_inf>
    120e:	a6 cf       	rjmp	.-180    	; 0x115c <__fp_szero>
    1210:	5f 3f       	cpi	r21, 0xFF	; 255
    1212:	ec f3       	brlt	.-6      	; 0x120e <__mulsf3_pse+0x82>
    1214:	98 3e       	cpi	r25, 0xE8	; 232
    1216:	dc f3       	brlt	.-10     	; 0x120e <__mulsf3_pse+0x82>
    1218:	86 95       	lsr	r24
    121a:	77 95       	ror	r23
    121c:	67 95       	ror	r22
    121e:	b7 95       	ror	r27
    1220:	f7 95       	ror	r31
    1222:	e7 95       	ror	r30
    1224:	9f 5f       	subi	r25, 0xFF	; 255
    1226:	c1 f7       	brne	.-16     	; 0x1218 <__mulsf3_pse+0x8c>
    1228:	fe 2b       	or	r31, r30
    122a:	88 0f       	add	r24, r24
    122c:	91 1d       	adc	r25, r1
    122e:	96 95       	lsr	r25
    1230:	87 95       	ror	r24
    1232:	97 f9       	bld	r25, 7
    1234:	08 95       	ret

00001236 <__fp_inf>:
    1236:	97 f9       	bld	r25, 7
    1238:	9f 67       	ori	r25, 0x7F	; 127
    123a:	80 e8       	ldi	r24, 0x80	; 128
    123c:	70 e0       	ldi	r23, 0x00	; 0
    123e:	60 e0       	ldi	r22, 0x00	; 0
    1240:	08 95       	ret

00001242 <__fp_nan>:
    1242:	9f ef       	ldi	r25, 0xFF	; 255
    1244:	80 ec       	ldi	r24, 0xC0	; 192
    1246:	08 95       	ret

00001248 <__fp_pscA>:
    1248:	00 24       	eor	r0, r0
    124a:	0a 94       	dec	r0
    124c:	16 16       	cp	r1, r22
    124e:	17 06       	cpc	r1, r23
    1250:	18 06       	cpc	r1, r24
    1252:	09 06       	cpc	r0, r25
    1254:	08 95       	ret

00001256 <__fp_pscB>:
    1256:	00 24       	eor	r0, r0
    1258:	0a 94       	dec	r0
    125a:	12 16       	cp	r1, r18
    125c:	13 06       	cpc	r1, r19
    125e:	14 06       	cpc	r1, r20
    1260:	05 06       	cpc	r0, r21
    1262:	08 95       	ret

00001264 <__fp_round>:
    1264:	09 2e       	mov	r0, r25
    1266:	03 94       	inc	r0
    1268:	00 0c       	add	r0, r0
    126a:	11 f4       	brne	.+4      	; 0x1270 <__fp_round+0xc>
    126c:	88 23       	and	r24, r24
    126e:	52 f0       	brmi	.+20     	; 0x1284 <__fp_round+0x20>
    1270:	bb 0f       	add	r27, r27
    1272:	40 f4       	brcc	.+16     	; 0x1284 <__fp_round+0x20>
    1274:	bf 2b       	or	r27, r31
    1276:	11 f4       	brne	.+4      	; 0x127c <__fp_round+0x18>
    1278:	60 ff       	sbrs	r22, 0
    127a:	04 c0       	rjmp	.+8      	; 0x1284 <__fp_round+0x20>
    127c:	6f 5f       	subi	r22, 0xFF	; 255
    127e:	7f 4f       	sbci	r23, 0xFF	; 255
    1280:	8f 4f       	sbci	r24, 0xFF	; 255
    1282:	9f 4f       	sbci	r25, 0xFF	; 255
    1284:	08 95       	ret

00001286 <__umulhisi3>:
    1286:	a2 9f       	mul	r26, r18
    1288:	b0 01       	movw	r22, r0
    128a:	b3 9f       	mul	r27, r19
    128c:	c0 01       	movw	r24, r0
    128e:	a3 9f       	mul	r26, r19
    1290:	70 0d       	add	r23, r0
    1292:	81 1d       	adc	r24, r1
    1294:	11 24       	eor	r1, r1
    1296:	91 1d       	adc	r25, r1
    1298:	b2 9f       	mul	r27, r18
    129a:	70 0d       	add	r23, r0
    129c:	81 1d       	adc	r24, r1
    129e:	11 24       	eor	r1, r1
    12a0:	91 1d       	adc	r25, r1
    12a2:	08 95       	ret

000012a4 <_exit>:
    12a4:	f8 94       	cli

000012a6 <__stop_program>:
    12a6:	ff cf       	rjmp	.-2      	; 0x12a6 <__stop_program>
